
Auto_drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a30  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08007bd0  08007bd0  00008bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cc0  08007cc0  00009064  2**0
                  CONTENTS
  4 .ARM          00000008  08007cc0  08007cc0  00008cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cc8  08007cc8  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cc8  08007cc8  00008cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ccc  08007ccc  00008ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08007cd0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d24  20000064  08007d34  00009064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d88  08007d34  00009d88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac5c  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dbc  00000000  00000000  00023cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  00027ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010d7  00000000  00000000  00029078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004cf8  00000000  00000000  0002a14f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d6e  00000000  00000000  0002ee47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098855  00000000  00000000  00048bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e140a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cb8  00000000  00000000  000e1450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000e7108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007bb8 	.word	0x08007bb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08007bb8 	.word	0x08007bb8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004d4:	4a10      	ldr	r2, [pc, #64]	@ (8000518 <MX_FREERTOS_Init+0x48>)
 80004d6:	2100      	movs	r1, #0
 80004d8:	4810      	ldr	r0, [pc, #64]	@ (800051c <MX_FREERTOS_Init+0x4c>)
 80004da:	f004 fd1f 	bl	8004f1c <osThreadNew>
 80004de:	4603      	mov	r3, r0
 80004e0:	4a0f      	ldr	r2, [pc, #60]	@ (8000520 <MX_FREERTOS_Init+0x50>)
 80004e2:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80004e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000524 <MX_FREERTOS_Init+0x54>)
 80004e6:	2100      	movs	r1, #0
 80004e8:	480f      	ldr	r0, [pc, #60]	@ (8000528 <MX_FREERTOS_Init+0x58>)
 80004ea:	f004 fd17 	bl	8004f1c <osThreadNew>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a0e      	ldr	r2, [pc, #56]	@ (800052c <MX_FREERTOS_Init+0x5c>)
 80004f2:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 80004f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000530 <MX_FREERTOS_Init+0x60>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	480e      	ldr	r0, [pc, #56]	@ (8000534 <MX_FREERTOS_Init+0x64>)
 80004fa:	f004 fd0f 	bl	8004f1c <osThreadNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a0d      	ldr	r2, [pc, #52]	@ (8000538 <MX_FREERTOS_Init+0x68>)
 8000502:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 8000504:	4a0d      	ldr	r2, [pc, #52]	@ (800053c <MX_FREERTOS_Init+0x6c>)
 8000506:	2100      	movs	r1, #0
 8000508:	480d      	ldr	r0, [pc, #52]	@ (8000540 <MX_FREERTOS_Init+0x70>)
 800050a:	f004 fd07 	bl	8004f1c <osThreadNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a0c      	ldr	r2, [pc, #48]	@ (8000544 <MX_FREERTOS_Init+0x74>)
 8000512:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	08007c18 	.word	0x08007c18
 800051c:	08000549 	.word	0x08000549
 8000520:	20000080 	.word	0x20000080
 8000524:	08007c3c 	.word	0x08007c3c
 8000528:	08000569 	.word	0x08000569
 800052c:	20000084 	.word	0x20000084
 8000530:	08007c60 	.word	0x08007c60
 8000534:	0800057f 	.word	0x0800057f
 8000538:	20000088 	.word	0x20000088
 800053c:	08007c84 	.word	0x08007c84
 8000540:	08000595 	.word	0x08000595
 8000544:	2000008c 	.word	0x2000008c

08000548 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {

	  if (pwmFlag == 1){
 8000550:	4b04      	ldr	r3, [pc, #16]	@ (8000564 <StartDefaultTask+0x1c>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d101      	bne.n	800055c <StartDefaultTask+0x14>
	  START_while();
 8000558:	f000 fa32 	bl	80009c0 <START_while>
  	  }
    osDelay(1);
 800055c:	2001      	movs	r0, #1
 800055e:	f004 fd6f 	bl	8005040 <osDelay>
	  if (pwmFlag == 1){
 8000562:	e7f5      	b.n	8000550 <StartDefaultTask+0x8>
 8000564:	20000091 	.word	0x20000091

08000568 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//	  FORWARD();

    HCSR04_read_ch1();
 8000570:	f001 f84a 	bl	8001608 <HCSR04_read_ch1>
    osDelay(1);
 8000574:	2001      	movs	r0, #1
 8000576:	f004 fd63 	bl	8005040 <osDelay>
    HCSR04_read_ch1();
 800057a:	bf00      	nop
 800057c:	e7f8      	b.n	8000570 <StartTask02+0x8>

0800057e <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 800057e:	b580      	push	{r7, lr}
 8000580:	b082      	sub	sp, #8
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    HCSR04_read_ch2();
 8000586:	f001 f863 	bl	8001650 <HCSR04_read_ch2>
    osDelay(1);
 800058a:	2001      	movs	r0, #1
 800058c:	f004 fd58 	bl	8005040 <osDelay>
    HCSR04_read_ch2();
 8000590:	bf00      	nop
 8000592:	e7f8      	b.n	8000586 <StartTask03+0x8>

08000594 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    HCSR04_read_ch3();
 800059c:	f001 f87c 	bl	8001698 <HCSR04_read_ch3>
    osDelay(1);
 80005a0:	2001      	movs	r0, #1
 80005a2:	f004 fd4d 	bl	8005040 <osDelay>
    HCSR04_read_ch3();
 80005a6:	bf00      	nop
 80005a8:	e7f8      	b.n	800059c <StartTask04+0x8>
	...

080005ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]
 80005c6:	4b4b      	ldr	r3, [pc, #300]	@ (80006f4 <MX_GPIO_Init+0x148>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a4a      	ldr	r2, [pc, #296]	@ (80006f4 <MX_GPIO_Init+0x148>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b48      	ldr	r3, [pc, #288]	@ (80006f4 <MX_GPIO_Init+0x148>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	4b44      	ldr	r3, [pc, #272]	@ (80006f4 <MX_GPIO_Init+0x148>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a43      	ldr	r2, [pc, #268]	@ (80006f4 <MX_GPIO_Init+0x148>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b41      	ldr	r3, [pc, #260]	@ (80006f4 <MX_GPIO_Init+0x148>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	4b3d      	ldr	r3, [pc, #244]	@ (80006f4 <MX_GPIO_Init+0x148>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	4a3c      	ldr	r2, [pc, #240]	@ (80006f4 <MX_GPIO_Init+0x148>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	6313      	str	r3, [r2, #48]	@ 0x30
 800060a:	4b3a      	ldr	r3, [pc, #232]	@ (80006f4 <MX_GPIO_Init+0x148>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	4b36      	ldr	r3, [pc, #216]	@ (80006f4 <MX_GPIO_Init+0x148>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	4a35      	ldr	r2, [pc, #212]	@ (80006f4 <MX_GPIO_Init+0x148>)
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	6313      	str	r3, [r2, #48]	@ 0x30
 8000626:	4b33      	ldr	r3, [pc, #204]	@ (80006f4 <MX_GPIO_Init+0x148>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000638:	482f      	ldr	r0, [pc, #188]	@ (80006f8 <MX_GPIO_Init+0x14c>)
 800063a:	f001 fc73 	bl	8001f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	f44f 61a6 	mov.w	r1, #1328	@ 0x530
 8000644:	482d      	ldr	r0, [pc, #180]	@ (80006fc <MX_GPIO_Init+0x150>)
 8000646:	f001 fc6d 	bl	8001f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000650:	482b      	ldr	r0, [pc, #172]	@ (8000700 <MX_GPIO_Init+0x154>)
 8000652:	f001 fc67 	bl	8001f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000656:	2320      	movs	r3, #32
 8000658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	2301      	movs	r3, #1
 800065c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2300      	movs	r3, #0
 8000664:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4619      	mov	r1, r3
 800066c:	4822      	ldr	r0, [pc, #136]	@ (80006f8 <MX_GPIO_Init+0x14c>)
 800066e:	f001 fad5 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8000672:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000680:	2303      	movs	r3, #3
 8000682:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	481c      	ldr	r0, [pc, #112]	@ (80006fc <MX_GPIO_Init+0x150>)
 800068c:	f001 fac6 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000690:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	2301      	movs	r3, #1
 8000698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4619      	mov	r1, r3
 80006a8:	4815      	ldr	r0, [pc, #84]	@ (8000700 <MX_GPIO_Init+0x154>)
 80006aa:	f001 fab7 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006bc:	2303      	movs	r3, #3
 80006be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	480c      	ldr	r0, [pc, #48]	@ (80006f8 <MX_GPIO_Init+0x14c>)
 80006c8:	f001 faa8 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d2:	2301      	movs	r3, #1
 80006d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006da:	2300      	movs	r3, #0
 80006dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	4805      	ldr	r0, [pc, #20]	@ (80006fc <MX_GPIO_Init+0x150>)
 80006e6:	f001 fa99 	bl	8001c1c <HAL_GPIO_Init>

}
 80006ea:	bf00      	nop
 80006ec:	3728      	adds	r7, #40	@ 0x28
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40020000 	.word	0x40020000
 80006fc:	40020400 	.word	0x40020400
 8000700:	40020800 	.word	0x40020800

08000704 <HAL_UART_RxCpltCallback>:
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]


		if(rxData[0] == 'P')
 800070c:	4b0b      	ldr	r3, [pc, #44]	@ (800073c <HAL_UART_RxCpltCallback+0x38>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b50      	cmp	r3, #80	@ 0x50
 8000712:	d103      	bne.n	800071c <HAL_UART_RxCpltCallback+0x18>
		{
			pwmFlag = 1;
 8000714:	4b0a      	ldr	r3, [pc, #40]	@ (8000740 <HAL_UART_RxCpltCallback+0x3c>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
 800071a:	e006      	b.n	800072a <HAL_UART_RxCpltCallback+0x26>
		}
		else if (rxData[0] == 'A'){
 800071c:	4b07      	ldr	r3, [pc, #28]	@ (800073c <HAL_UART_RxCpltCallback+0x38>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b41      	cmp	r3, #65	@ 0x41
 8000722:	d102      	bne.n	800072a <HAL_UART_RxCpltCallback+0x26>
			pwmFlag = 0;
 8000724:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <HAL_UART_RxCpltCallback+0x3c>)
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
		}

	HAL_UART_Receive_IT(&huart6, rxData, sizeof(rxData));
 800072a:	2201      	movs	r2, #1
 800072c:	4903      	ldr	r1, [pc, #12]	@ (800073c <HAL_UART_RxCpltCallback+0x38>)
 800072e:	4805      	ldr	r0, [pc, #20]	@ (8000744 <HAL_UART_RxCpltCallback+0x40>)
 8000730:	f003 fc42 	bl	8003fb8 <HAL_UART_Receive_IT>
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000090 	.word	0x20000090
 8000740:	20000091 	.word	0x20000091
 8000744:	20000214 	.word	0x20000214

08000748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074c:	f001 f88c 	bl	8001868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000750:	f000 f830 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000754:	f7ff ff2a 	bl	80005ac <MX_GPIO_Init>
  MX_TIM3_Init();
 8000758:	f000 faf4 	bl	8000d44 <MX_TIM3_Init>
  MX_TIM4_Init();
 800075c:	f000 fb68 	bl	8000e30 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000760:	f000 fbd6 	bl	8000f10 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 8000764:	f000 ffbc 	bl	80016e0 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8000768:	f000 fc4e 	bl	8001008 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  //moter
  PWM_Init();
 800076c:	f000 f8a2 	bl	80008b4 <PWM_Init>
  //ultra Sonic
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8000770:	2100      	movs	r1, #0
 8000772:	480c      	ldr	r0, [pc, #48]	@ (80007a4 <main+0x5c>)
 8000774:	f002 fac6 	bl	8002d04 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 8000778:	2104      	movs	r1, #4
 800077a:	480a      	ldr	r0, [pc, #40]	@ (80007a4 <main+0x5c>)
 800077c:	f002 fac2 	bl	8002d04 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 8000780:	210c      	movs	r1, #12
 8000782:	4809      	ldr	r0, [pc, #36]	@ (80007a8 <main+0x60>)
 8000784:	f002 fabe 	bl	8002d04 <HAL_TIM_IC_Start_IT>
  //Bluetooth
  HAL_UART_Receive_IT(&huart6, rxData, sizeof(rxData));
 8000788:	2201      	movs	r2, #1
 800078a:	4908      	ldr	r1, [pc, #32]	@ (80007ac <main+0x64>)
 800078c:	4808      	ldr	r0, [pc, #32]	@ (80007b0 <main+0x68>)
 800078e:	f003 fc13 	bl	8003fb8 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000792:	f004 fb79 	bl	8004e88 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000796:	f7ff fe9b 	bl	80004d0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800079a:	f004 fb99 	bl	8004ed0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800079e:	bf00      	nop
 80007a0:	e7fd      	b.n	800079e <main+0x56>
 80007a2:	bf00      	nop
 80007a4:	2000016c 	.word	0x2000016c
 80007a8:	20000124 	.word	0x20000124
 80007ac:	20000090 	.word	0x20000090
 80007b0:	20000214 	.word	0x20000214

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b094      	sub	sp, #80	@ 0x50
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	2230      	movs	r2, #48	@ 0x30
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f007 f910 	bl	80079e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	4b27      	ldr	r3, [pc, #156]	@ (800087c <SystemClock_Config+0xc8>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e0:	4a26      	ldr	r2, [pc, #152]	@ (800087c <SystemClock_Config+0xc8>)
 80007e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007e8:	4b24      	ldr	r3, [pc, #144]	@ (800087c <SystemClock_Config+0xc8>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	4b21      	ldr	r3, [pc, #132]	@ (8000880 <SystemClock_Config+0xcc>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a20      	ldr	r2, [pc, #128]	@ (8000880 <SystemClock_Config+0xcc>)
 80007fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000802:	6013      	str	r3, [r2, #0]
 8000804:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <SystemClock_Config+0xcc>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000810:	2301      	movs	r3, #1
 8000812:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000814:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000822:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000824:	2304      	movs	r3, #4
 8000826:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000828:	2364      	movs	r3, #100	@ 0x64
 800082a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082c:	2302      	movs	r3, #2
 800082e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000830:	2304      	movs	r3, #4
 8000832:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000834:	f107 0320 	add.w	r3, r7, #32
 8000838:	4618      	mov	r0, r3
 800083a:	f001 fb8d 	bl	8001f58 <HAL_RCC_OscConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000844:	f000 f830 	bl	80008a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000848:	230f      	movs	r3, #15
 800084a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084c:	2302      	movs	r3, #2
 800084e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000854:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000858:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	2103      	movs	r1, #3
 8000864:	4618      	mov	r0, r3
 8000866:	f001 fdef 	bl	8002448 <HAL_RCC_ClockConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000870:	f000 f81a 	bl	80008a8 <Error_Handler>
  }
}
 8000874:	bf00      	nop
 8000876:	3750      	adds	r7, #80	@ 0x50
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40023800 	.word	0x40023800
 8000880:	40007000 	.word	0x40007000

08000884 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a04      	ldr	r2, [pc, #16]	@ (80008a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d101      	bne.n	800089a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000896:	f001 f809 	bl	80018ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40014800 	.word	0x40014800

080008a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
}
 80008ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <Error_Handler+0x8>

080008b4 <PWM_Init>:
extern uint8_t u_distance_r;
extern uint8_t u_distance_l;


void PWM_Init()
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80008b8:	2100      	movs	r1, #0
 80008ba:	4804      	ldr	r0, [pc, #16]	@ (80008cc <PWM_Init+0x18>)
 80008bc:	f002 f918 	bl	8002af0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80008c0:	2104      	movs	r1, #4
 80008c2:	4802      	ldr	r0, [pc, #8]	@ (80008cc <PWM_Init+0x18>)
 80008c4:	f002 f914 	bl	8002af0 <HAL_TIM_PWM_Start>
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200000dc 	.word	0x200000dc

080008d0 <FORWARD>:

void FORWARD()
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	//pa8 pb10 /  pb4 pb5

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008da:	480e      	ldr	r0, [pc, #56]	@ (8000914 <FORWARD+0x44>)
 80008dc:	f001 fb22 	bl	8001f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80008e0:	2201      	movs	r2, #1
 80008e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008e6:	480c      	ldr	r0, [pc, #48]	@ (8000918 <FORWARD+0x48>)
 80008e8:	f001 fb1c 	bl	8001f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2110      	movs	r1, #16
 80008f0:	4809      	ldr	r0, [pc, #36]	@ (8000918 <FORWARD+0x48>)
 80008f2:	f001 fb17 	bl	8001f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80008f6:	2201      	movs	r2, #1
 80008f8:	2120      	movs	r1, #32
 80008fa:	4807      	ldr	r0, [pc, #28]	@ (8000918 <FORWARD+0x48>)
 80008fc:	f001 fb12 	bl	8001f24 <HAL_GPIO_WritePin>

//	TIM3->CCR1 = 500;
//	TIM3->CCR2 = 500;

	TIM3->CCR1 = 2000;
 8000900:	4b06      	ldr	r3, [pc, #24]	@ (800091c <FORWARD+0x4c>)
 8000902:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000906:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = 2000;
 8000908:	4b04      	ldr	r3, [pc, #16]	@ (800091c <FORWARD+0x4c>)
 800090a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800090e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40020000 	.word	0x40020000
 8000918:	40020400 	.word	0x40020400
 800091c:	40000400 	.word	0x40000400

08000920 <RIGHTTURN>:
	TIM3->CCR1 = 2000;
	TIM3->CCR2 = 2000;
}

void RIGHTTURN()
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	//pa8 pb10 /  pb4 pb5

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800092a:	480e      	ldr	r0, [pc, #56]	@ (8000964 <RIGHTTURN+0x44>)
 800092c:	f001 fafa 	bl	8001f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000930:	2201      	movs	r2, #1
 8000932:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000936:	480c      	ldr	r0, [pc, #48]	@ (8000968 <RIGHTTURN+0x48>)
 8000938:	f001 faf4 	bl	8001f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 800093c:	2201      	movs	r2, #1
 800093e:	2110      	movs	r1, #16
 8000940:	4809      	ldr	r0, [pc, #36]	@ (8000968 <RIGHTTURN+0x48>)
 8000942:	f001 faef 	bl	8001f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2120      	movs	r1, #32
 800094a:	4807      	ldr	r0, [pc, #28]	@ (8000968 <RIGHTTURN+0x48>)
 800094c:	f001 faea 	bl	8001f24 <HAL_GPIO_WritePin>

//	TIM3->CCR1 = 500;
//	TIM3->CCR2 = 500;

	TIM3->CCR1 = 2000;
 8000950:	4b06      	ldr	r3, [pc, #24]	@ (800096c <RIGHTTURN+0x4c>)
 8000952:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000956:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = 2000;
 8000958:	4b04      	ldr	r3, [pc, #16]	@ (800096c <RIGHTTURN+0x4c>)
 800095a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800095e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40020000 	.word	0x40020000
 8000968:	40020400 	.word	0x40020400
 800096c:	40000400 	.word	0x40000400

08000970 <LEFTTURN>:

void LEFTTURN()
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	//pa8 pb10 /  pb4 pb5

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000974:	2201      	movs	r2, #1
 8000976:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800097a:	480e      	ldr	r0, [pc, #56]	@ (80009b4 <LEFTTURN+0x44>)
 800097c:	f001 fad2 	bl	8001f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000986:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <LEFTTURN+0x48>)
 8000988:	f001 facc 	bl	8001f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	2110      	movs	r1, #16
 8000990:	4809      	ldr	r0, [pc, #36]	@ (80009b8 <LEFTTURN+0x48>)
 8000992:	f001 fac7 	bl	8001f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000996:	2201      	movs	r2, #1
 8000998:	2120      	movs	r1, #32
 800099a:	4807      	ldr	r0, [pc, #28]	@ (80009b8 <LEFTTURN+0x48>)
 800099c:	f001 fac2 	bl	8001f24 <HAL_GPIO_WritePin>

//	TIM3->CCR1 = 500;
//	TIM3->CCR2 = 500;

	TIM3->CCR1 = 2000;
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <LEFTTURN+0x4c>)
 80009a2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80009a6:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = 2000;
 80009a8:	4b04      	ldr	r3, [pc, #16]	@ (80009bc <LEFTTURN+0x4c>)
 80009aa:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80009ae:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40020000 	.word	0x40020000
 80009b8:	40020400 	.word	0x40020400
 80009bc:	40000400 	.word	0x40000400

080009c0 <START_while>:
}

uint8_t coner_f;

void START_while()
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0


	uint8_t con_dis = 15;
 80009c6:	230f      	movs	r3, #15
 80009c8:	71fb      	strb	r3, [r7, #7]

	uint8_t coner_dis = 5;
 80009ca:	2305      	movs	r3, #5
 80009cc:	71bb      	strb	r3, [r7, #6]

	if (l_Distance < coner_dis && c_Distance < coner_dis && r_Distance < coner_dis){
 80009ce:	4b57      	ldr	r3, [pc, #348]	@ (8000b2c <START_while+0x16c>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	79ba      	ldrb	r2, [r7, #6]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d90d      	bls.n	80009f4 <START_while+0x34>
 80009d8:	4b55      	ldr	r3, [pc, #340]	@ (8000b30 <START_while+0x170>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	79ba      	ldrb	r2, [r7, #6]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d908      	bls.n	80009f4 <START_while+0x34>
 80009e2:	4b54      	ldr	r3, [pc, #336]	@ (8000b34 <START_while+0x174>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	79ba      	ldrb	r2, [r7, #6]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d903      	bls.n	80009f4 <START_while+0x34>
		coner_f = 1;
 80009ec:	4b52      	ldr	r3, [pc, #328]	@ (8000b38 <START_while+0x178>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
 80009f2:	e002      	b.n	80009fa <START_while+0x3a>
	}
	else {
		coner_f = 0;
 80009f4:	4b50      	ldr	r3, [pc, #320]	@ (8000b38 <START_while+0x178>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	701a      	strb	r2, [r3, #0]
	}


	u_distance_c = c_Distance;
 80009fa:	4b4d      	ldr	r3, [pc, #308]	@ (8000b30 <START_while+0x170>)
 80009fc:	781a      	ldrb	r2, [r3, #0]
 80009fe:	4b4f      	ldr	r3, [pc, #316]	@ (8000b3c <START_while+0x17c>)
 8000a00:	701a      	strb	r2, [r3, #0]
	u_distance_r = r_Distance;
 8000a02:	4b4c      	ldr	r3, [pc, #304]	@ (8000b34 <START_while+0x174>)
 8000a04:	781a      	ldrb	r2, [r3, #0]
 8000a06:	4b4e      	ldr	r3, [pc, #312]	@ (8000b40 <START_while+0x180>)
 8000a08:	701a      	strb	r2, [r3, #0]
	u_distance_l = l_Distance;
 8000a0a:	4b48      	ldr	r3, [pc, #288]	@ (8000b2c <START_while+0x16c>)
 8000a0c:	781a      	ldrb	r2, [r3, #0]
 8000a0e:	4b4d      	ldr	r3, [pc, #308]	@ (8000b44 <START_while+0x184>)
 8000a10:	701a      	strb	r2, [r3, #0]


	if ( (c_Distance < con_dis) || (l_Distance < con_dis) || r_Distance < con_dis ){
 8000a12:	4b47      	ldr	r3, [pc, #284]	@ (8000b30 <START_while+0x170>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	79fa      	ldrb	r2, [r7, #7]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d832      	bhi.n	8000a82 <START_while+0xc2>
 8000a1c:	4b43      	ldr	r3, [pc, #268]	@ (8000b2c <START_while+0x16c>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	79fa      	ldrb	r2, [r7, #7]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d82d      	bhi.n	8000a82 <START_while+0xc2>
 8000a26:	4b43      	ldr	r3, [pc, #268]	@ (8000b34 <START_while+0x174>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	79fa      	ldrb	r2, [r7, #7]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d973      	bls.n	8000b18 <START_while+0x158>
		while (l_Distance > r_Distance){
 8000a30:	e027      	b.n	8000a82 <START_while+0xc2>
			if (coner_f == 0){
 8000a32:	4b41      	ldr	r3, [pc, #260]	@ (8000b38 <START_while+0x178>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d102      	bne.n	8000a40 <START_while+0x80>
				LEFTTURN();
 8000a3a:	f7ff ff99 	bl	8000970 <LEFTTURN>
 8000a3e:	e020      	b.n	8000a82 <START_while+0xc2>
			}
			else if (coner_f == 1){
 8000a40:	4b3d      	ldr	r3, [pc, #244]	@ (8000b38 <START_while+0x178>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d116      	bne.n	8000a76 <START_while+0xb6>
				while (coner_f){
 8000a48:	e010      	b.n	8000a6c <START_while+0xac>
					LEFTTURN();
 8000a4a:	f7ff ff91 	bl	8000970 <LEFTTURN>
					if (l_Distance > coner_dis || c_Distance > coner_dis || r_Distance > coner_dis){
 8000a4e:	4b37      	ldr	r3, [pc, #220]	@ (8000b2c <START_while+0x16c>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	79ba      	ldrb	r2, [r7, #6]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d314      	bcc.n	8000a82 <START_while+0xc2>
 8000a58:	4b35      	ldr	r3, [pc, #212]	@ (8000b30 <START_while+0x170>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	79ba      	ldrb	r2, [r7, #6]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d30f      	bcc.n	8000a82 <START_while+0xc2>
 8000a62:	4b34      	ldr	r3, [pc, #208]	@ (8000b34 <START_while+0x174>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	79ba      	ldrb	r2, [r7, #6]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d30a      	bcc.n	8000a82 <START_while+0xc2>
				while (coner_f){
 8000a6c:	4b32      	ldr	r3, [pc, #200]	@ (8000b38 <START_while+0x178>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d1ea      	bne.n	8000a4a <START_while+0x8a>
 8000a74:	e005      	b.n	8000a82 <START_while+0xc2>
						break;
					}
				}
			}
			else if (r_Distance > u_distance_r){
 8000a76:	4b2f      	ldr	r3, [pc, #188]	@ (8000b34 <START_while+0x174>)
 8000a78:	781a      	ldrb	r2, [r3, #0]
 8000a7a:	4b31      	ldr	r3, [pc, #196]	@ (8000b40 <START_while+0x180>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d806      	bhi.n	8000a90 <START_while+0xd0>
		while (l_Distance > r_Distance){
 8000a82:	4b2a      	ldr	r3, [pc, #168]	@ (8000b2c <START_while+0x16c>)
 8000a84:	781a      	ldrb	r2, [r3, #0]
 8000a86:	4b2b      	ldr	r3, [pc, #172]	@ (8000b34 <START_while+0x174>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d8d1      	bhi.n	8000a32 <START_while+0x72>
 8000a8e:	e029      	b.n	8000ae4 <START_while+0x124>
				break;
 8000a90:	bf00      	nop
			}


		}

		while (r_Distance > l_Distance) {
 8000a92:	e027      	b.n	8000ae4 <START_while+0x124>
			if (coner_f == 0){
 8000a94:	4b28      	ldr	r3, [pc, #160]	@ (8000b38 <START_while+0x178>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d102      	bne.n	8000aa2 <START_while+0xe2>
				RIGHTTURN();
 8000a9c:	f7ff ff40 	bl	8000920 <RIGHTTURN>
 8000aa0:	e020      	b.n	8000ae4 <START_while+0x124>
			}
			else if (coner_f == 1){
 8000aa2:	4b25      	ldr	r3, [pc, #148]	@ (8000b38 <START_while+0x178>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d116      	bne.n	8000ad8 <START_while+0x118>
				while (coner_f){
 8000aaa:	e010      	b.n	8000ace <START_while+0x10e>
					RIGHTTURN();
 8000aac:	f7ff ff38 	bl	8000920 <RIGHTTURN>
					if (l_Distance > coner_dis || c_Distance > coner_dis || r_Distance > coner_dis){
 8000ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b2c <START_while+0x16c>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	79ba      	ldrb	r2, [r7, #6]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d314      	bcc.n	8000ae4 <START_while+0x124>
 8000aba:	4b1d      	ldr	r3, [pc, #116]	@ (8000b30 <START_while+0x170>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	79ba      	ldrb	r2, [r7, #6]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d30f      	bcc.n	8000ae4 <START_while+0x124>
 8000ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b34 <START_while+0x174>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	79ba      	ldrb	r2, [r7, #6]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d30a      	bcc.n	8000ae4 <START_while+0x124>
				while (coner_f){
 8000ace:	4b1a      	ldr	r3, [pc, #104]	@ (8000b38 <START_while+0x178>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d1ea      	bne.n	8000aac <START_while+0xec>
 8000ad6:	e005      	b.n	8000ae4 <START_while+0x124>
						break;
					}
				}
			}
			else if (l_Distance > u_distance_l){
 8000ad8:	4b14      	ldr	r3, [pc, #80]	@ (8000b2c <START_while+0x16c>)
 8000ada:	781a      	ldrb	r2, [r3, #0]
 8000adc:	4b19      	ldr	r3, [pc, #100]	@ (8000b44 <START_while+0x184>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d806      	bhi.n	8000af2 <START_while+0x132>
		while (r_Distance > l_Distance) {
 8000ae4:	4b13      	ldr	r3, [pc, #76]	@ (8000b34 <START_while+0x174>)
 8000ae6:	781a      	ldrb	r2, [r3, #0]
 8000ae8:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <START_while+0x16c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d8d1      	bhi.n	8000a94 <START_while+0xd4>
	if ( (c_Distance < con_dis) || (l_Distance < con_dis) || r_Distance < con_dis ){
 8000af0:	e018      	b.n	8000b24 <START_while+0x164>
				break;
 8000af2:	bf00      	nop
	if ( (c_Distance < con_dis) || (l_Distance < con_dis) || r_Distance < con_dis ){
 8000af4:	e016      	b.n	8000b24 <START_while+0x164>


	}
	else {
		while (c_Distance >= con_dis){
			FORWARD();
 8000af6:	f7ff feeb 	bl	80008d0 <FORWARD>
			if (c_Distance < con_dis || r_Distance < con_dis || l_Distance < con_dis){
 8000afa:	4b0d      	ldr	r3, [pc, #52]	@ (8000b30 <START_while+0x170>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	79fa      	ldrb	r2, [r7, #7]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d80f      	bhi.n	8000b24 <START_while+0x164>
 8000b04:	4b0b      	ldr	r3, [pc, #44]	@ (8000b34 <START_while+0x174>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	79fa      	ldrb	r2, [r7, #7]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d80a      	bhi.n	8000b24 <START_while+0x164>
 8000b0e:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <START_while+0x16c>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	79fa      	ldrb	r2, [r7, #7]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d805      	bhi.n	8000b24 <START_while+0x164>
		while (c_Distance >= con_dis){
 8000b18:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <START_while+0x170>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	79fa      	ldrb	r2, [r7, #7]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d9e9      	bls.n	8000af6 <START_while+0x136>





}
 8000b22:	e7ff      	b.n	8000b24 <START_while+0x164>
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000213 	.word	0x20000213
 8000b30:	20000211 	.word	0x20000211
 8000b34:	20000212 	.word	0x20000212
 8000b38:	20000092 	.word	0x20000092
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	20000001 	.word	0x20000001
 8000b44:	20000002 	.word	0x20000002

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <HAL_MspInit+0x54>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b56:	4a11      	ldr	r2, [pc, #68]	@ (8000b9c <HAL_MspInit+0x54>)
 8000b58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b9c <HAL_MspInit+0x54>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	603b      	str	r3, [r7, #0]
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b9c <HAL_MspInit+0x54>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b72:	4a0a      	ldr	r2, [pc, #40]	@ (8000b9c <HAL_MspInit+0x54>)
 8000b74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b7a:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <HAL_MspInit+0x54>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	210f      	movs	r1, #15
 8000b8a:	f06f 0001 	mvn.w	r0, #1
 8000b8e:	f000 ff89 	bl	8001aa4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08c      	sub	sp, #48	@ 0x30
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	4b2e      	ldr	r3, [pc, #184]	@ (8000c70 <HAL_InitTick+0xd0>)
 8000bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb8:	4a2d      	ldr	r2, [pc, #180]	@ (8000c70 <HAL_InitTick+0xd0>)
 8000bba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bbe:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bc0:	4b2b      	ldr	r3, [pc, #172]	@ (8000c70 <HAL_InitTick+0xd0>)
 8000bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bcc:	f107 020c 	add.w	r2, r7, #12
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f001 fe56 	bl	8002888 <HAL_RCC_GetClockConfig>
  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000bdc:	f001 fe40 	bl	8002860 <HAL_RCC_GetPCLK2Freq>
 8000be0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000be4:	4a23      	ldr	r2, [pc, #140]	@ (8000c74 <HAL_InitTick+0xd4>)
 8000be6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bea:	0c9b      	lsrs	r3, r3, #18
 8000bec:	3b01      	subs	r3, #1
 8000bee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000bf0:	4b21      	ldr	r3, [pc, #132]	@ (8000c78 <HAL_InitTick+0xd8>)
 8000bf2:	4a22      	ldr	r2, [pc, #136]	@ (8000c7c <HAL_InitTick+0xdc>)
 8000bf4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000bf6:	4b20      	ldr	r3, [pc, #128]	@ (8000c78 <HAL_InitTick+0xd8>)
 8000bf8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bfc:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8000c78 <HAL_InitTick+0xd8>)
 8000c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c02:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000c04:	4b1c      	ldr	r3, [pc, #112]	@ (8000c78 <HAL_InitTick+0xd8>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c78 <HAL_InitTick+0xd8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c10:	4b19      	ldr	r3, [pc, #100]	@ (8000c78 <HAL_InitTick+0xd8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000c16:	4818      	ldr	r0, [pc, #96]	@ (8000c78 <HAL_InitTick+0xd8>)
 8000c18:	f001 fe68 	bl	80028ec <HAL_TIM_Base_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000c22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d11b      	bne.n	8000c62 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000c2a:	4813      	ldr	r0, [pc, #76]	@ (8000c78 <HAL_InitTick+0xd8>)
 8000c2c:	f001 feae 	bl	800298c <HAL_TIM_Base_Start_IT>
 8000c30:	4603      	mov	r3, r0
 8000c32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000c36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d111      	bne.n	8000c62 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000c3e:	201a      	movs	r0, #26
 8000c40:	f000 ff4c 	bl	8001adc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b0f      	cmp	r3, #15
 8000c48:	d808      	bhi.n	8000c5c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	6879      	ldr	r1, [r7, #4]
 8000c4e:	201a      	movs	r0, #26
 8000c50:	f000 ff28 	bl	8001aa4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c54:	4a0a      	ldr	r2, [pc, #40]	@ (8000c80 <HAL_InitTick+0xe0>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	e002      	b.n	8000c62 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3730      	adds	r7, #48	@ 0x30
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800
 8000c74:	431bde83 	.word	0x431bde83
 8000c78:	20000094 	.word	0x20000094
 8000c7c:	40014800 	.word	0x40014800
 8000c80:	20000008 	.word	0x20000008

08000c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <NMI_Handler+0x4>

08000c8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <HardFault_Handler+0x4>

08000c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <MemManage_Handler+0x4>

08000c9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000cac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
	...

08000cbc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000cc0:	4802      	ldr	r0, [pc, #8]	@ (8000ccc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000cc2:	f002 f939 	bl	8002f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000094 	.word	0x20000094

08000cd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000cd4:	4802      	ldr	r0, [pc, #8]	@ (8000ce0 <TIM3_IRQHandler+0x10>)
 8000cd6:	f002 f92f 	bl	8002f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200000dc 	.word	0x200000dc

08000ce4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ce8:	4802      	ldr	r0, [pc, #8]	@ (8000cf4 <TIM4_IRQHandler+0x10>)
 8000cea:	f002 f925 	bl	8002f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000124 	.word	0x20000124

08000cf8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000cfc:	4802      	ldr	r0, [pc, #8]	@ (8000d08 <TIM5_IRQHandler+0x10>)
 8000cfe:	f002 f91b 	bl	8002f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	2000016c 	.word	0x2000016c

08000d0c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000d10:	4802      	ldr	r0, [pc, #8]	@ (8000d1c <USART6_IRQHandler+0x10>)
 8000d12:	f003 f977 	bl	8004004 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000214 	.word	0x20000214

08000d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d24:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <SystemInit+0x20>)
 8000d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d2a:	4a05      	ldr	r2, [pc, #20]	@ (8000d40 <SystemInit+0x20>)
 8000d2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	@ 0x28
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d4a:	f107 0320 	add.w	r3, r7, #32
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]
 8000d62:	615a      	str	r2, [r3, #20]
 8000d64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d66:	4b30      	ldr	r3, [pc, #192]	@ (8000e28 <MX_TIM3_Init+0xe4>)
 8000d68:	4a30      	ldr	r2, [pc, #192]	@ (8000e2c <MX_TIM3_Init+0xe8>)
 8000d6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8000d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8000e28 <MX_TIM3_Init+0xe4>)
 8000d6e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d74:	4b2c      	ldr	r3, [pc, #176]	@ (8000e28 <MX_TIM3_Init+0xe4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8000d7a:	4b2b      	ldr	r3, [pc, #172]	@ (8000e28 <MX_TIM3_Init+0xe4>)
 8000d7c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000d80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d82:	4b29      	ldr	r3, [pc, #164]	@ (8000e28 <MX_TIM3_Init+0xe4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d88:	4b27      	ldr	r3, [pc, #156]	@ (8000e28 <MX_TIM3_Init+0xe4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d8e:	4826      	ldr	r0, [pc, #152]	@ (8000e28 <MX_TIM3_Init+0xe4>)
 8000d90:	f001 fe5e 	bl	8002a50 <HAL_TIM_PWM_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000d9a:	f7ff fd85 	bl	80008a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000da6:	f107 0320 	add.w	r3, r7, #32
 8000daa:	4619      	mov	r1, r3
 8000dac:	481e      	ldr	r0, [pc, #120]	@ (8000e28 <MX_TIM3_Init+0xe4>)
 8000dae:	f003 f831 	bl	8003e14 <HAL_TIMEx_MasterConfigSynchronization>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000db8:	f7ff fd76 	bl	80008a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dbc:	2360      	movs	r3, #96	@ 0x60
 8000dbe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000dc8:	2304      	movs	r3, #4
 8000dca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2200      	movs	r2, #0
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4815      	ldr	r0, [pc, #84]	@ (8000e28 <MX_TIM3_Init+0xe4>)
 8000dd4:	f002 fa3c 	bl	8003250 <HAL_TIM_PWM_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000dde:	f7ff fd63 	bl	80008a8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8000de2:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <MX_TIM3_Init+0xe4>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	699a      	ldr	r2, [r3, #24]
 8000de8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e28 <MX_TIM3_Init+0xe4>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f022 0208 	bic.w	r2, r2, #8
 8000df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2204      	movs	r2, #4
 8000df6:	4619      	mov	r1, r3
 8000df8:	480b      	ldr	r0, [pc, #44]	@ (8000e28 <MX_TIM3_Init+0xe4>)
 8000dfa:	f002 fa29 	bl	8003250 <HAL_TIM_PWM_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM3_Init+0xc4>
  {
    Error_Handler();
 8000e04:	f7ff fd50 	bl	80008a8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_2);
 8000e08:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <MX_TIM3_Init+0xe4>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	699a      	ldr	r2, [r3, #24]
 8000e0e:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <MX_TIM3_Init+0xe4>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000e16:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e18:	4803      	ldr	r0, [pc, #12]	@ (8000e28 <MX_TIM3_Init+0xe4>)
 8000e1a:	f000 f9e5 	bl	80011e8 <HAL_TIM_MspPostInit>

}
 8000e1e:	bf00      	nop
 8000e20:	3728      	adds	r7, #40	@ 0x28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200000dc 	.word	0x200000dc
 8000e2c:	40000400 	.word	0x40000400

08000e30 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	@ 0x28
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e36:	f107 0318 	add.w	r3, r7, #24
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e4e:	463b      	mov	r3, r7
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e5a:	4b2b      	ldr	r3, [pc, #172]	@ (8000f08 <MX_TIM4_Init+0xd8>)
 8000e5c:	4a2b      	ldr	r2, [pc, #172]	@ (8000f0c <MX_TIM4_Init+0xdc>)
 8000e5e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8000e60:	4b29      	ldr	r3, [pc, #164]	@ (8000f08 <MX_TIM4_Init+0xd8>)
 8000e62:	2263      	movs	r2, #99	@ 0x63
 8000e64:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e66:	4b28      	ldr	r3, [pc, #160]	@ (8000f08 <MX_TIM4_Init+0xd8>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000e6c:	4b26      	ldr	r3, [pc, #152]	@ (8000f08 <MX_TIM4_Init+0xd8>)
 8000e6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e72:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e74:	4b24      	ldr	r3, [pc, #144]	@ (8000f08 <MX_TIM4_Init+0xd8>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7a:	4b23      	ldr	r3, [pc, #140]	@ (8000f08 <MX_TIM4_Init+0xd8>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e80:	4821      	ldr	r0, [pc, #132]	@ (8000f08 <MX_TIM4_Init+0xd8>)
 8000e82:	f001 fd33 	bl	80028ec <HAL_TIM_Base_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8000e8c:	f7ff fd0c 	bl	80008a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e94:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e96:	f107 0318 	add.w	r3, r7, #24
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	481a      	ldr	r0, [pc, #104]	@ (8000f08 <MX_TIM4_Init+0xd8>)
 8000e9e:	f002 fa99 	bl	80033d4 <HAL_TIM_ConfigClockSource>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000ea8:	f7ff fcfe 	bl	80008a8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000eac:	4816      	ldr	r0, [pc, #88]	@ (8000f08 <MX_TIM4_Init+0xd8>)
 8000eae:	f001 fecf 	bl	8002c50 <HAL_TIM_IC_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000eb8:	f7ff fcf6 	bl	80008a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480f      	ldr	r0, [pc, #60]	@ (8000f08 <MX_TIM4_Init+0xd8>)
 8000ecc:	f002 ffa2 	bl	8003e14 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8000ed6:	f7ff fce7 	bl	80008a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000eda:	2300      	movs	r3, #0
 8000edc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 10;
 8000ee6:	230a      	movs	r3, #10
 8000ee8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000eea:	463b      	mov	r3, r7
 8000eec:	220c      	movs	r2, #12
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <MX_TIM4_Init+0xd8>)
 8000ef2:	f002 f911 	bl	8003118 <HAL_TIM_IC_ConfigChannel>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8000efc:	f7ff fcd4 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f00:	bf00      	nop
 8000f02:	3728      	adds	r7, #40	@ 0x28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000124 	.word	0x20000124
 8000f0c:	40000800 	.word	0x40000800

08000f10 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	@ 0x28
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f16:	f107 0318 	add.w	r3, r7, #24
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f2e:	463b      	mov	r3, r7
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f3a:	4b31      	ldr	r3, [pc, #196]	@ (8001000 <MX_TIM5_Init+0xf0>)
 8000f3c:	4a31      	ldr	r2, [pc, #196]	@ (8001004 <MX_TIM5_Init+0xf4>)
 8000f3e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 8000f40:	4b2f      	ldr	r3, [pc, #188]	@ (8001000 <MX_TIM5_Init+0xf0>)
 8000f42:	2263      	movs	r2, #99	@ 0x63
 8000f44:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f46:	4b2e      	ldr	r3, [pc, #184]	@ (8001000 <MX_TIM5_Init+0xf0>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f4c:	4b2c      	ldr	r3, [pc, #176]	@ (8001000 <MX_TIM5_Init+0xf0>)
 8000f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f52:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f54:	4b2a      	ldr	r3, [pc, #168]	@ (8001000 <MX_TIM5_Init+0xf0>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5a:	4b29      	ldr	r3, [pc, #164]	@ (8001000 <MX_TIM5_Init+0xf0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f60:	4827      	ldr	r0, [pc, #156]	@ (8001000 <MX_TIM5_Init+0xf0>)
 8000f62:	f001 fcc3 	bl	80028ec <HAL_TIM_Base_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8000f6c:	f7ff fc9c 	bl	80008a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f74:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f76:	f107 0318 	add.w	r3, r7, #24
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4820      	ldr	r0, [pc, #128]	@ (8001000 <MX_TIM5_Init+0xf0>)
 8000f7e:	f002 fa29 	bl	80033d4 <HAL_TIM_ConfigClockSource>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000f88:	f7ff fc8e 	bl	80008a8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000f8c:	481c      	ldr	r0, [pc, #112]	@ (8001000 <MX_TIM5_Init+0xf0>)
 8000f8e:	f001 fe5f 	bl	8002c50 <HAL_TIM_IC_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000f98:	f7ff fc86 	bl	80008a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4815      	ldr	r0, [pc, #84]	@ (8001000 <MX_TIM5_Init+0xf0>)
 8000fac:	f002 ff32 	bl	8003e14 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8000fb6:	f7ff fc77 	bl	80008a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 10;
 8000fc6:	230a      	movs	r3, #10
 8000fc8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fca:	463b      	mov	r3, r7
 8000fcc:	2200      	movs	r2, #0
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480b      	ldr	r0, [pc, #44]	@ (8001000 <MX_TIM5_Init+0xf0>)
 8000fd2:	f002 f8a1 	bl	8003118 <HAL_TIM_IC_ConfigChannel>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8000fdc:	f7ff fc64 	bl	80008a8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	2204      	movs	r2, #4
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4806      	ldr	r0, [pc, #24]	@ (8001000 <MX_TIM5_Init+0xf0>)
 8000fe8:	f002 f896 	bl	8003118 <HAL_TIM_IC_ConfigChannel>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM5_Init+0xe6>
  {
    Error_Handler();
 8000ff2:	f7ff fc59 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	@ 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	2000016c 	.word	0x2000016c
 8001004:	40000c00 	.word	0x40000c00

08001008 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800100c:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <MX_TIM10_Init+0x40>)
 800100e:	4a0f      	ldr	r2, [pc, #60]	@ (800104c <MX_TIM10_Init+0x44>)
 8001010:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001012:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <MX_TIM10_Init+0x40>)
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001018:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <MX_TIM10_Init+0x40>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800101e:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <MX_TIM10_Init+0x40>)
 8001020:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001024:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001026:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <MX_TIM10_Init+0x40>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102c:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <MX_TIM10_Init+0x40>)
 800102e:	2200      	movs	r2, #0
 8001030:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	@ (8001048 <MX_TIM10_Init+0x40>)
 8001034:	f001 fc5a 	bl	80028ec <HAL_TIM_Base_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800103e:	f7ff fc33 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200001b4 	.word	0x200001b4
 800104c:	40014400 	.word	0x40014400

08001050 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0e      	ldr	r2, [pc, #56]	@ (8001098 <HAL_TIM_PWM_MspInit+0x48>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d115      	bne.n	800108e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b0d      	ldr	r3, [pc, #52]	@ (800109c <HAL_TIM_PWM_MspInit+0x4c>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106a:	4a0c      	ldr	r2, [pc, #48]	@ (800109c <HAL_TIM_PWM_MspInit+0x4c>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	6413      	str	r3, [r2, #64]	@ 0x40
 8001072:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <HAL_TIM_PWM_MspInit+0x4c>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2105      	movs	r1, #5
 8001082:	201d      	movs	r0, #29
 8001084:	f000 fd0e 	bl	8001aa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001088:	201d      	movs	r0, #29
 800108a:	f000 fd27 	bl	8001adc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40000400 	.word	0x40000400
 800109c:	40023800 	.word	0x40023800

080010a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08c      	sub	sp, #48	@ 0x30
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM4)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a44      	ldr	r2, [pc, #272]	@ (80011d0 <HAL_TIM_Base_MspInit+0x130>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d135      	bne.n	800112e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
 80010c6:	4b43      	ldr	r3, [pc, #268]	@ (80011d4 <HAL_TIM_Base_MspInit+0x134>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ca:	4a42      	ldr	r2, [pc, #264]	@ (80011d4 <HAL_TIM_Base_MspInit+0x134>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d2:	4b40      	ldr	r3, [pc, #256]	@ (80011d4 <HAL_TIM_Base_MspInit+0x134>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	4b3c      	ldr	r3, [pc, #240]	@ (80011d4 <HAL_TIM_Base_MspInit+0x134>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	4a3b      	ldr	r2, [pc, #236]	@ (80011d4 <HAL_TIM_Base_MspInit+0x134>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ee:	4b39      	ldr	r3, [pc, #228]	@ (80011d4 <HAL_TIM_Base_MspInit+0x134>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2300      	movs	r3, #0
 800110a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800110c:	2302      	movs	r3, #2
 800110e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	4619      	mov	r1, r3
 8001116:	4830      	ldr	r0, [pc, #192]	@ (80011d8 <HAL_TIM_Base_MspInit+0x138>)
 8001118:	f000 fd80 	bl	8001c1c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800111c:	2200      	movs	r2, #0
 800111e:	2105      	movs	r1, #5
 8001120:	201e      	movs	r0, #30
 8001122:	f000 fcbf 	bl	8001aa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001126:	201e      	movs	r0, #30
 8001128:	f000 fcd8 	bl	8001adc <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800112c:	e04c      	b.n	80011c8 <HAL_TIM_Base_MspInit+0x128>
  else if(tim_baseHandle->Instance==TIM5)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a2a      	ldr	r2, [pc, #168]	@ (80011dc <HAL_TIM_Base_MspInit+0x13c>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d134      	bne.n	80011a2 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	4b25      	ldr	r3, [pc, #148]	@ (80011d4 <HAL_TIM_Base_MspInit+0x134>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001140:	4a24      	ldr	r2, [pc, #144]	@ (80011d4 <HAL_TIM_Base_MspInit+0x134>)
 8001142:	f043 0308 	orr.w	r3, r3, #8
 8001146:	6413      	str	r3, [r2, #64]	@ 0x40
 8001148:	4b22      	ldr	r3, [pc, #136]	@ (80011d4 <HAL_TIM_Base_MspInit+0x134>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114c:	f003 0308 	and.w	r3, r3, #8
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	4b1e      	ldr	r3, [pc, #120]	@ (80011d4 <HAL_TIM_Base_MspInit+0x134>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115c:	4a1d      	ldr	r2, [pc, #116]	@ (80011d4 <HAL_TIM_Base_MspInit+0x134>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	6313      	str	r3, [r2, #48]	@ 0x30
 8001164:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <HAL_TIM_Base_MspInit+0x134>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001170:	2303      	movs	r3, #3
 8001172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001180:	2302      	movs	r3, #2
 8001182:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	4619      	mov	r1, r3
 800118a:	4815      	ldr	r0, [pc, #84]	@ (80011e0 <HAL_TIM_Base_MspInit+0x140>)
 800118c:	f000 fd46 	bl	8001c1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001190:	2200      	movs	r2, #0
 8001192:	2105      	movs	r1, #5
 8001194:	2032      	movs	r0, #50	@ 0x32
 8001196:	f000 fc85 	bl	8001aa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800119a:	2032      	movs	r0, #50	@ 0x32
 800119c:	f000 fc9e 	bl	8001adc <HAL_NVIC_EnableIRQ>
}
 80011a0:	e012      	b.n	80011c8 <HAL_TIM_Base_MspInit+0x128>
  else if(tim_baseHandle->Instance==TIM10)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a0f      	ldr	r2, [pc, #60]	@ (80011e4 <HAL_TIM_Base_MspInit+0x144>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d10d      	bne.n	80011c8 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <HAL_TIM_Base_MspInit+0x134>)
 80011b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b4:	4a07      	ldr	r2, [pc, #28]	@ (80011d4 <HAL_TIM_Base_MspInit+0x134>)
 80011b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80011bc:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <HAL_TIM_Base_MspInit+0x134>)
 80011be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
}
 80011c8:	bf00      	nop
 80011ca:	3730      	adds	r7, #48	@ 0x30
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40000800 	.word	0x40000800
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020400 	.word	0x40020400
 80011dc:	40000c00 	.word	0x40000c00
 80011e0:	40020000 	.word	0x40020000
 80011e4:	40014400 	.word	0x40014400

080011e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	@ 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a21      	ldr	r2, [pc, #132]	@ (800128c <HAL_TIM_MspPostInit+0xa4>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d13b      	bne.n	8001282 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	4b20      	ldr	r3, [pc, #128]	@ (8001290 <HAL_TIM_MspPostInit+0xa8>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a1f      	ldr	r2, [pc, #124]	@ (8001290 <HAL_TIM_MspPostInit+0xa8>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b1d      	ldr	r3, [pc, #116]	@ (8001290 <HAL_TIM_MspPostInit+0xa8>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	4b19      	ldr	r3, [pc, #100]	@ (8001290 <HAL_TIM_MspPostInit+0xa8>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	4a18      	ldr	r2, [pc, #96]	@ (8001290 <HAL_TIM_MspPostInit+0xa8>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	6313      	str	r3, [r2, #48]	@ 0x30
 8001236:	4b16      	ldr	r3, [pc, #88]	@ (8001290 <HAL_TIM_MspPostInit+0xa8>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001242:	2380      	movs	r3, #128	@ 0x80
 8001244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001252:	2302      	movs	r3, #2
 8001254:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	480d      	ldr	r0, [pc, #52]	@ (8001294 <HAL_TIM_MspPostInit+0xac>)
 800125e:	f000 fcdd 	bl	8001c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001262:	2340      	movs	r3, #64	@ 0x40
 8001264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001272:	2302      	movs	r3, #2
 8001274:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	4806      	ldr	r0, [pc, #24]	@ (8001298 <HAL_TIM_MspPostInit+0xb0>)
 800127e:	f000 fccd 	bl	8001c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	@ 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40000400 	.word	0x40000400
 8001290:	40023800 	.word	0x40023800
 8001294:	40020000 	.word	0x40020000
 8001298:	40020800 	.word	0x40020800

0800129c <HAL_TIM_IC_CaptureCallback>:
uint8_t r_Distance = 0;
uint8_t l_Distance = 0;

//center = tim5_ch1(PA0)		right = tim5_ch2(PA1)		left = tim5_ch3(PA2)
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]

	if((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) && (htim -> Instance == TIM5))
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	7f1b      	ldrb	r3, [r3, #28]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d179      	bne.n	80013a0 <HAL_TIM_IC_CaptureCallback+0x104>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a90      	ldr	r2, [pc, #576]	@ (80014f4 <HAL_TIM_IC_CaptureCallback+0x258>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d174      	bne.n	80013a0 <HAL_TIM_IC_CaptureCallback+0x104>
	{
		if(centerFlag == 0)
 80012b6:	4b90      	ldr	r3, [pc, #576]	@ (80014f8 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d11b      	bne.n	80012f6 <HAL_TIM_IC_CaptureCallback+0x5a>
		{
			center_VALUE1 = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);
 80012be:	2100      	movs	r1, #0
 80012c0:	488e      	ldr	r0, [pc, #568]	@ (80014fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80012c2:	f002 f94f 	bl	8003564 <HAL_TIM_ReadCapturedValue>
 80012c6:	4603      	mov	r3, r0
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	4b8d      	ldr	r3, [pc, #564]	@ (8001500 <HAL_TIM_IC_CaptureCallback+0x264>)
 80012cc:	801a      	strh	r2, [r3, #0]
			centerFlag = 1;
 80012ce:	4b8a      	ldr	r3, [pc, #552]	@ (80014f8 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80012d4:	4b89      	ldr	r3, [pc, #548]	@ (80014fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6a1a      	ldr	r2, [r3, #32]
 80012da:	4b88      	ldr	r3, [pc, #544]	@ (80014fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 020a 	bic.w	r2, r2, #10
 80012e2:	621a      	str	r2, [r3, #32]
 80012e4:	4b85      	ldr	r3, [pc, #532]	@ (80014fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6a1a      	ldr	r2, [r3, #32]
 80012ea:	4b84      	ldr	r3, [pc, #528]	@ (80014fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f042 0202 	orr.w	r2, r2, #2
 80012f2:	621a      	str	r2, [r3, #32]
 80012f4:	e054      	b.n	80013a0 <HAL_TIM_IC_CaptureCallback+0x104>
		}
		else if(centerFlag == 1)
 80012f6:	4b80      	ldr	r3, [pc, #512]	@ (80014f8 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d150      	bne.n	80013a0 <HAL_TIM_IC_CaptureCallback+0x104>
		{
			center_VALUE2 = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);
 80012fe:	2100      	movs	r1, #0
 8001300:	487e      	ldr	r0, [pc, #504]	@ (80014fc <HAL_TIM_IC_CaptureCallback+0x260>)
 8001302:	f002 f92f 	bl	8003564 <HAL_TIM_ReadCapturedValue>
 8001306:	4603      	mov	r3, r0
 8001308:	b29a      	uxth	r2, r3
 800130a:	4b7e      	ldr	r3, [pc, #504]	@ (8001504 <HAL_TIM_IC_CaptureCallback+0x268>)
 800130c:	801a      	strh	r2, [r3, #0]

			if(center_VALUE2 > center_VALUE1)
 800130e:	4b7d      	ldr	r3, [pc, #500]	@ (8001504 <HAL_TIM_IC_CaptureCallback+0x268>)
 8001310:	881a      	ldrh	r2, [r3, #0]
 8001312:	4b7b      	ldr	r3, [pc, #492]	@ (8001500 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	429a      	cmp	r2, r3
 8001318:	d908      	bls.n	800132c <HAL_TIM_IC_CaptureCallback+0x90>
			{
				centerEcho = center_VALUE2 - center_VALUE1;
 800131a:	4b7a      	ldr	r3, [pc, #488]	@ (8001504 <HAL_TIM_IC_CaptureCallback+0x268>)
 800131c:	881a      	ldrh	r2, [r3, #0]
 800131e:	4b78      	ldr	r3, [pc, #480]	@ (8001500 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	b29a      	uxth	r2, r3
 8001326:	4b78      	ldr	r3, [pc, #480]	@ (8001508 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001328:	801a      	strh	r2, [r3, #0]
 800132a:	e00f      	b.n	800134c <HAL_TIM_IC_CaptureCallback+0xb0>
			}
			else if(center_VALUE1 > center_VALUE2)	//overflow
 800132c:	4b74      	ldr	r3, [pc, #464]	@ (8001500 <HAL_TIM_IC_CaptureCallback+0x264>)
 800132e:	881a      	ldrh	r2, [r3, #0]
 8001330:	4b74      	ldr	r3, [pc, #464]	@ (8001504 <HAL_TIM_IC_CaptureCallback+0x268>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	429a      	cmp	r2, r3
 8001336:	d909      	bls.n	800134c <HAL_TIM_IC_CaptureCallback+0xb0>
			{
				centerEcho = (0xffff - center_VALUE1) + center_VALUE2;
 8001338:	4b72      	ldr	r3, [pc, #456]	@ (8001504 <HAL_TIM_IC_CaptureCallback+0x268>)
 800133a:	881a      	ldrh	r2, [r3, #0]
 800133c:	4b70      	ldr	r3, [pc, #448]	@ (8001500 <HAL_TIM_IC_CaptureCallback+0x264>)
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b29b      	uxth	r3, r3
 8001344:	3b01      	subs	r3, #1
 8001346:	b29a      	uxth	r2, r3
 8001348:	4b6f      	ldr	r3, [pc, #444]	@ (8001508 <HAL_TIM_IC_CaptureCallback+0x26c>)
 800134a:	801a      	strh	r2, [r3, #0]
			}
			c_Distance = centerEcho/58;
 800134c:	4b6e      	ldr	r3, [pc, #440]	@ (8001508 <HAL_TIM_IC_CaptureCallback+0x26c>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	4a6e      	ldr	r2, [pc, #440]	@ (800150c <HAL_TIM_IC_CaptureCallback+0x270>)
 8001352:	fba2 2303 	umull	r2, r3, r2, r3
 8001356:	095b      	lsrs	r3, r3, #5
 8001358:	b29b      	uxth	r3, r3
 800135a:	b2da      	uxtb	r2, r3
 800135c:	4b6c      	ldr	r3, [pc, #432]	@ (8001510 <HAL_TIM_IC_CaptureCallback+0x274>)
 800135e:	701a      	strb	r2, [r3, #0]
			centerFlag = 0;
 8001360:	4b65      	ldr	r3, [pc, #404]	@ (80014f8 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
			if(c_Distance >= 50)
 8001366:	4b6a      	ldr	r3, [pc, #424]	@ (8001510 <HAL_TIM_IC_CaptureCallback+0x274>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b31      	cmp	r3, #49	@ 0x31
 800136c:	d902      	bls.n	8001374 <HAL_TIM_IC_CaptureCallback+0xd8>
			{
				c_Distance = 50;
 800136e:	4b68      	ldr	r3, [pc, #416]	@ (8001510 <HAL_TIM_IC_CaptureCallback+0x274>)
 8001370:	2232      	movs	r2, #50	@ 0x32
 8001372:	701a      	strb	r2, [r3, #0]
			}
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001374:	4b61      	ldr	r3, [pc, #388]	@ (80014fc <HAL_TIM_IC_CaptureCallback+0x260>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6a1a      	ldr	r2, [r3, #32]
 800137a:	4b60      	ldr	r3, [pc, #384]	@ (80014fc <HAL_TIM_IC_CaptureCallback+0x260>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 020a 	bic.w	r2, r2, #10
 8001382:	621a      	str	r2, [r3, #32]
 8001384:	4b5d      	ldr	r3, [pc, #372]	@ (80014fc <HAL_TIM_IC_CaptureCallback+0x260>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b5c      	ldr	r3, [pc, #368]	@ (80014fc <HAL_TIM_IC_CaptureCallback+0x260>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6a12      	ldr	r2, [r2, #32]
 800138e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC1);
 8001390:	4b5a      	ldr	r3, [pc, #360]	@ (80014fc <HAL_TIM_IC_CaptureCallback+0x260>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68da      	ldr	r2, [r3, #12]
 8001396:	4b59      	ldr	r3, [pc, #356]	@ (80014fc <HAL_TIM_IC_CaptureCallback+0x260>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0202 	bic.w	r2, r2, #2
 800139e:	60da      	str	r2, [r3, #12]
		}
	}

	if((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) && (htim -> Instance == TIM5))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	7f1b      	ldrb	r3, [r3, #28]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d179      	bne.n	800149c <HAL_TIM_IC_CaptureCallback+0x200>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a51      	ldr	r2, [pc, #324]	@ (80014f4 <HAL_TIM_IC_CaptureCallback+0x258>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d174      	bne.n	800149c <HAL_TIM_IC_CaptureCallback+0x200>
	{
			if(rightFlag == 0)
 80013b2:	4b58      	ldr	r3, [pc, #352]	@ (8001514 <HAL_TIM_IC_CaptureCallback+0x278>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d11b      	bne.n	80013f2 <HAL_TIM_IC_CaptureCallback+0x156>
			{
				right_VALUE1 = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_2);
 80013ba:	2104      	movs	r1, #4
 80013bc:	484f      	ldr	r0, [pc, #316]	@ (80014fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80013be:	f002 f8d1 	bl	8003564 <HAL_TIM_ReadCapturedValue>
 80013c2:	4603      	mov	r3, r0
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	4b54      	ldr	r3, [pc, #336]	@ (8001518 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80013c8:	801a      	strh	r2, [r3, #0]
				rightFlag = 1;
 80013ca:	4b52      	ldr	r3, [pc, #328]	@ (8001514 <HAL_TIM_IC_CaptureCallback+0x278>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 80013d0:	4b4a      	ldr	r3, [pc, #296]	@ (80014fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6a1a      	ldr	r2, [r3, #32]
 80013d6:	4b49      	ldr	r3, [pc, #292]	@ (80014fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80013de:	621a      	str	r2, [r3, #32]
 80013e0:	4b46      	ldr	r3, [pc, #280]	@ (80014fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6a1a      	ldr	r2, [r3, #32]
 80013e6:	4b45      	ldr	r3, [pc, #276]	@ (80014fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f042 0220 	orr.w	r2, r2, #32
 80013ee:	621a      	str	r2, [r3, #32]
 80013f0:	e054      	b.n	800149c <HAL_TIM_IC_CaptureCallback+0x200>
			}
			else if(rightFlag == 1)
 80013f2:	4b48      	ldr	r3, [pc, #288]	@ (8001514 <HAL_TIM_IC_CaptureCallback+0x278>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d150      	bne.n	800149c <HAL_TIM_IC_CaptureCallback+0x200>
			{
				right_VALUE2 = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_2);
 80013fa:	2104      	movs	r1, #4
 80013fc:	483f      	ldr	r0, [pc, #252]	@ (80014fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80013fe:	f002 f8b1 	bl	8003564 <HAL_TIM_ReadCapturedValue>
 8001402:	4603      	mov	r3, r0
 8001404:	b29a      	uxth	r2, r3
 8001406:	4b45      	ldr	r3, [pc, #276]	@ (800151c <HAL_TIM_IC_CaptureCallback+0x280>)
 8001408:	801a      	strh	r2, [r3, #0]
				// __HAL_TIM_SET_COUNTER(&htim5, 0);

				if(right_VALUE2 > right_VALUE1)
 800140a:	4b44      	ldr	r3, [pc, #272]	@ (800151c <HAL_TIM_IC_CaptureCallback+0x280>)
 800140c:	881a      	ldrh	r2, [r3, #0]
 800140e:	4b42      	ldr	r3, [pc, #264]	@ (8001518 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	429a      	cmp	r2, r3
 8001414:	d908      	bls.n	8001428 <HAL_TIM_IC_CaptureCallback+0x18c>
				{
					rightEcho = right_VALUE2 - right_VALUE1;
 8001416:	4b41      	ldr	r3, [pc, #260]	@ (800151c <HAL_TIM_IC_CaptureCallback+0x280>)
 8001418:	881a      	ldrh	r2, [r3, #0]
 800141a:	4b3f      	ldr	r3, [pc, #252]	@ (8001518 <HAL_TIM_IC_CaptureCallback+0x27c>)
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	b29a      	uxth	r2, r3
 8001422:	4b3f      	ldr	r3, [pc, #252]	@ (8001520 <HAL_TIM_IC_CaptureCallback+0x284>)
 8001424:	801a      	strh	r2, [r3, #0]
 8001426:	e00f      	b.n	8001448 <HAL_TIM_IC_CaptureCallback+0x1ac>
				}
				else if(right_VALUE1 > right_VALUE2)	//overflow
 8001428:	4b3b      	ldr	r3, [pc, #236]	@ (8001518 <HAL_TIM_IC_CaptureCallback+0x27c>)
 800142a:	881a      	ldrh	r2, [r3, #0]
 800142c:	4b3b      	ldr	r3, [pc, #236]	@ (800151c <HAL_TIM_IC_CaptureCallback+0x280>)
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	429a      	cmp	r2, r3
 8001432:	d909      	bls.n	8001448 <HAL_TIM_IC_CaptureCallback+0x1ac>
				{
					rightEcho = (0xffff - right_VALUE1) + right_VALUE2;
 8001434:	4b39      	ldr	r3, [pc, #228]	@ (800151c <HAL_TIM_IC_CaptureCallback+0x280>)
 8001436:	881a      	ldrh	r2, [r3, #0]
 8001438:	4b37      	ldr	r3, [pc, #220]	@ (8001518 <HAL_TIM_IC_CaptureCallback+0x27c>)
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	b29b      	uxth	r3, r3
 8001440:	3b01      	subs	r3, #1
 8001442:	b29a      	uxth	r2, r3
 8001444:	4b36      	ldr	r3, [pc, #216]	@ (8001520 <HAL_TIM_IC_CaptureCallback+0x284>)
 8001446:	801a      	strh	r2, [r3, #0]
				}
				r_Distance = rightEcho/58;
 8001448:	4b35      	ldr	r3, [pc, #212]	@ (8001520 <HAL_TIM_IC_CaptureCallback+0x284>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	4a2f      	ldr	r2, [pc, #188]	@ (800150c <HAL_TIM_IC_CaptureCallback+0x270>)
 800144e:	fba2 2303 	umull	r2, r3, r2, r3
 8001452:	095b      	lsrs	r3, r3, #5
 8001454:	b29b      	uxth	r3, r3
 8001456:	b2da      	uxtb	r2, r3
 8001458:	4b32      	ldr	r3, [pc, #200]	@ (8001524 <HAL_TIM_IC_CaptureCallback+0x288>)
 800145a:	701a      	strb	r2, [r3, #0]
				rightFlag = 0;
 800145c:	4b2d      	ldr	r3, [pc, #180]	@ (8001514 <HAL_TIM_IC_CaptureCallback+0x278>)
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
				if(r_Distance >= 50)
 8001462:	4b30      	ldr	r3, [pc, #192]	@ (8001524 <HAL_TIM_IC_CaptureCallback+0x288>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b31      	cmp	r3, #49	@ 0x31
 8001468:	d902      	bls.n	8001470 <HAL_TIM_IC_CaptureCallback+0x1d4>
				{
					r_Distance = 50;
 800146a:	4b2e      	ldr	r3, [pc, #184]	@ (8001524 <HAL_TIM_IC_CaptureCallback+0x288>)
 800146c:	2232      	movs	r2, #50	@ 0x32
 800146e:	701a      	strb	r2, [r3, #0]
				}
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8001470:	4b22      	ldr	r3, [pc, #136]	@ (80014fc <HAL_TIM_IC_CaptureCallback+0x260>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6a1a      	ldr	r2, [r3, #32]
 8001476:	4b21      	ldr	r3, [pc, #132]	@ (80014fc <HAL_TIM_IC_CaptureCallback+0x260>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800147e:	621a      	str	r2, [r3, #32]
 8001480:	4b1e      	ldr	r3, [pc, #120]	@ (80014fc <HAL_TIM_IC_CaptureCallback+0x260>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b1d      	ldr	r3, [pc, #116]	@ (80014fc <HAL_TIM_IC_CaptureCallback+0x260>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6a12      	ldr	r2, [r2, #32]
 800148a:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC2);
 800148c:	4b1b      	ldr	r3, [pc, #108]	@ (80014fc <HAL_TIM_IC_CaptureCallback+0x260>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	68da      	ldr	r2, [r3, #12]
 8001492:	4b1a      	ldr	r3, [pc, #104]	@ (80014fc <HAL_TIM_IC_CaptureCallback+0x260>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0204 	bic.w	r2, r2, #4
 800149a:	60da      	str	r2, [r3, #12]
			}
		}


	if((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) && (htim -> Instance == TIM4))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	7f1b      	ldrb	r3, [r3, #28]
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	f040 809e 	bne.w	80015e2 <HAL_TIM_IC_CaptureCallback+0x346>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001528 <HAL_TIM_IC_CaptureCallback+0x28c>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	f040 8098 	bne.w	80015e2 <HAL_TIM_IC_CaptureCallback+0x346>
	{
			if(leftFlag == 0)
 80014b2:	4b1e      	ldr	r3, [pc, #120]	@ (800152c <HAL_TIM_IC_CaptureCallback+0x290>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d13e      	bne.n	8001538 <HAL_TIM_IC_CaptureCallback+0x29c>
			{
				left_VALUE1 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 80014ba:	210c      	movs	r1, #12
 80014bc:	481c      	ldr	r0, [pc, #112]	@ (8001530 <HAL_TIM_IC_CaptureCallback+0x294>)
 80014be:	f002 f851 	bl	8003564 <HAL_TIM_ReadCapturedValue>
 80014c2:	4603      	mov	r3, r0
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001534 <HAL_TIM_IC_CaptureCallback+0x298>)
 80014c8:	801a      	strh	r2, [r3, #0]
				leftFlag = 1;
 80014ca:	4b18      	ldr	r3, [pc, #96]	@ (800152c <HAL_TIM_IC_CaptureCallback+0x290>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 80014d0:	4b17      	ldr	r3, [pc, #92]	@ (8001530 <HAL_TIM_IC_CaptureCallback+0x294>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6a1a      	ldr	r2, [r3, #32]
 80014d6:	4b16      	ldr	r3, [pc, #88]	@ (8001530 <HAL_TIM_IC_CaptureCallback+0x294>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 80014de:	621a      	str	r2, [r3, #32]
 80014e0:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <HAL_TIM_IC_CaptureCallback+0x294>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6a1a      	ldr	r2, [r3, #32]
 80014e6:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <HAL_TIM_IC_CaptureCallback+0x294>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80014ee:	621a      	str	r2, [r3, #32]
				}
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC4);
			}
		}
}
 80014f0:	e077      	b.n	80015e2 <HAL_TIM_IC_CaptureCallback+0x346>
 80014f2:	bf00      	nop
 80014f4:	40000c00 	.word	0x40000c00
 80014f8:	2000020e 	.word	0x2000020e
 80014fc:	2000016c 	.word	0x2000016c
 8001500:	200001fc 	.word	0x200001fc
 8001504:	200001fe 	.word	0x200001fe
 8001508:	20000208 	.word	0x20000208
 800150c:	8d3dcb09 	.word	0x8d3dcb09
 8001510:	20000211 	.word	0x20000211
 8001514:	2000020f 	.word	0x2000020f
 8001518:	20000200 	.word	0x20000200
 800151c:	20000202 	.word	0x20000202
 8001520:	2000020a 	.word	0x2000020a
 8001524:	20000212 	.word	0x20000212
 8001528:	40000800 	.word	0x40000800
 800152c:	20000210 	.word	0x20000210
 8001530:	20000124 	.word	0x20000124
 8001534:	20000204 	.word	0x20000204
			else if(leftFlag == 1)
 8001538:	4b2c      	ldr	r3, [pc, #176]	@ (80015ec <HAL_TIM_IC_CaptureCallback+0x350>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d150      	bne.n	80015e2 <HAL_TIM_IC_CaptureCallback+0x346>
				left_VALUE2 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 8001540:	210c      	movs	r1, #12
 8001542:	482b      	ldr	r0, [pc, #172]	@ (80015f0 <HAL_TIM_IC_CaptureCallback+0x354>)
 8001544:	f002 f80e 	bl	8003564 <HAL_TIM_ReadCapturedValue>
 8001548:	4603      	mov	r3, r0
 800154a:	b29a      	uxth	r2, r3
 800154c:	4b29      	ldr	r3, [pc, #164]	@ (80015f4 <HAL_TIM_IC_CaptureCallback+0x358>)
 800154e:	801a      	strh	r2, [r3, #0]
				if(left_VALUE2 > left_VALUE1)
 8001550:	4b28      	ldr	r3, [pc, #160]	@ (80015f4 <HAL_TIM_IC_CaptureCallback+0x358>)
 8001552:	881a      	ldrh	r2, [r3, #0]
 8001554:	4b28      	ldr	r3, [pc, #160]	@ (80015f8 <HAL_TIM_IC_CaptureCallback+0x35c>)
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	d908      	bls.n	800156e <HAL_TIM_IC_CaptureCallback+0x2d2>
					leftEcho = left_VALUE2 - left_VALUE1;
 800155c:	4b25      	ldr	r3, [pc, #148]	@ (80015f4 <HAL_TIM_IC_CaptureCallback+0x358>)
 800155e:	881a      	ldrh	r2, [r3, #0]
 8001560:	4b25      	ldr	r3, [pc, #148]	@ (80015f8 <HAL_TIM_IC_CaptureCallback+0x35c>)
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	b29a      	uxth	r2, r3
 8001568:	4b24      	ldr	r3, [pc, #144]	@ (80015fc <HAL_TIM_IC_CaptureCallback+0x360>)
 800156a:	801a      	strh	r2, [r3, #0]
 800156c:	e00f      	b.n	800158e <HAL_TIM_IC_CaptureCallback+0x2f2>
				else if(left_VALUE1 > left_VALUE2)	//overflow
 800156e:	4b22      	ldr	r3, [pc, #136]	@ (80015f8 <HAL_TIM_IC_CaptureCallback+0x35c>)
 8001570:	881a      	ldrh	r2, [r3, #0]
 8001572:	4b20      	ldr	r3, [pc, #128]	@ (80015f4 <HAL_TIM_IC_CaptureCallback+0x358>)
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d909      	bls.n	800158e <HAL_TIM_IC_CaptureCallback+0x2f2>
					leftEcho = (0xffff - left_VALUE1) + left_VALUE2;
 800157a:	4b1e      	ldr	r3, [pc, #120]	@ (80015f4 <HAL_TIM_IC_CaptureCallback+0x358>)
 800157c:	881a      	ldrh	r2, [r3, #0]
 800157e:	4b1e      	ldr	r3, [pc, #120]	@ (80015f8 <HAL_TIM_IC_CaptureCallback+0x35c>)
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	b29b      	uxth	r3, r3
 8001586:	3b01      	subs	r3, #1
 8001588:	b29a      	uxth	r2, r3
 800158a:	4b1c      	ldr	r3, [pc, #112]	@ (80015fc <HAL_TIM_IC_CaptureCallback+0x360>)
 800158c:	801a      	strh	r2, [r3, #0]
				l_Distance = leftEcho/58;
 800158e:	4b1b      	ldr	r3, [pc, #108]	@ (80015fc <HAL_TIM_IC_CaptureCallback+0x360>)
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	4a1b      	ldr	r2, [pc, #108]	@ (8001600 <HAL_TIM_IC_CaptureCallback+0x364>)
 8001594:	fba2 2303 	umull	r2, r3, r2, r3
 8001598:	095b      	lsrs	r3, r3, #5
 800159a:	b29b      	uxth	r3, r3
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <HAL_TIM_IC_CaptureCallback+0x368>)
 80015a0:	701a      	strb	r2, [r3, #0]
				leftFlag = 0;
 80015a2:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <HAL_TIM_IC_CaptureCallback+0x350>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
				if(l_Distance >= 50)
 80015a8:	4b16      	ldr	r3, [pc, #88]	@ (8001604 <HAL_TIM_IC_CaptureCallback+0x368>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b31      	cmp	r3, #49	@ 0x31
 80015ae:	d902      	bls.n	80015b6 <HAL_TIM_IC_CaptureCallback+0x31a>
					l_Distance = 50;
 80015b0:	4b14      	ldr	r3, [pc, #80]	@ (8001604 <HAL_TIM_IC_CaptureCallback+0x368>)
 80015b2:	2232      	movs	r2, #50	@ 0x32
 80015b4:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 80015b6:	4b0e      	ldr	r3, [pc, #56]	@ (80015f0 <HAL_TIM_IC_CaptureCallback+0x354>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6a1a      	ldr	r2, [r3, #32]
 80015bc:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <HAL_TIM_IC_CaptureCallback+0x354>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 80015c4:	621a      	str	r2, [r3, #32]
 80015c6:	4b0a      	ldr	r3, [pc, #40]	@ (80015f0 <HAL_TIM_IC_CaptureCallback+0x354>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b09      	ldr	r3, [pc, #36]	@ (80015f0 <HAL_TIM_IC_CaptureCallback+0x354>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6a12      	ldr	r2, [r2, #32]
 80015d0:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC4);
 80015d2:	4b07      	ldr	r3, [pc, #28]	@ (80015f0 <HAL_TIM_IC_CaptureCallback+0x354>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	4b05      	ldr	r3, [pc, #20]	@ (80015f0 <HAL_TIM_IC_CaptureCallback+0x354>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0210 	bic.w	r2, r2, #16
 80015e0:	60da      	str	r2, [r3, #12]
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000210 	.word	0x20000210
 80015f0:	20000124 	.word	0x20000124
 80015f4:	20000206 	.word	0x20000206
 80015f8:	20000204 	.word	0x20000204
 80015fc:	2000020c 	.word	0x2000020c
 8001600:	8d3dcb09 	.word	0x8d3dcb09
 8001604:	20000213 	.word	0x20000213

08001608 <HCSR04_read_ch1>:

void HCSR04_read_ch1()
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800160c:	2201      	movs	r2, #1
 800160e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001612:	480d      	ldr	r0, [pc, #52]	@ (8001648 <HCSR04_read_ch1+0x40>)
 8001614:	f000 fc86 	bl	8001f24 <HAL_GPIO_WritePin>
    HAL_Delay(10);  //10
 8001618:	200a      	movs	r0, #10
 800161a:	f000 f967 	bl	80018ec <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001624:	4808      	ldr	r0, [pc, #32]	@ (8001648 <HCSR04_read_ch1+0x40>)
 8001626:	f000 fc7d 	bl	8001f24 <HAL_GPIO_WritePin>

    __HAL_TIM_SET_COUNTER(&htim5, 0);
 800162a:	4b08      	ldr	r3, [pc, #32]	@ (800164c <HCSR04_read_ch1+0x44>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2200      	movs	r2, #0
 8001630:	625a      	str	r2, [r3, #36]	@ 0x24
    // 타이머 채널에 대한 인터럽트 활성화
    __HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC1);
 8001632:	4b06      	ldr	r3, [pc, #24]	@ (800164c <HCSR04_read_ch1+0x44>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	4b04      	ldr	r3, [pc, #16]	@ (800164c <HCSR04_read_ch1+0x44>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f042 0202 	orr.w	r2, r2, #2
 8001640:	60da      	str	r2, [r3, #12]
//    __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);
//    __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC3);
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40020800 	.word	0x40020800
 800164c:	2000016c 	.word	0x2000016c

08001650 <HCSR04_read_ch2>:

void HCSR04_read_ch2()
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001654:	2201      	movs	r2, #1
 8001656:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800165a:	480d      	ldr	r0, [pc, #52]	@ (8001690 <HCSR04_read_ch2+0x40>)
 800165c:	f000 fc62 	bl	8001f24 <HAL_GPIO_WritePin>
    HAL_Delay(10);  //10
 8001660:	200a      	movs	r0, #10
 8001662:	f000 f943 	bl	80018ec <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800166c:	4808      	ldr	r0, [pc, #32]	@ (8001690 <HCSR04_read_ch2+0x40>)
 800166e:	f000 fc59 	bl	8001f24 <HAL_GPIO_WritePin>

    __HAL_TIM_SET_COUNTER(&htim5, 0);
 8001672:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <HCSR04_read_ch2+0x44>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2200      	movs	r2, #0
 8001678:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC2);
 800167a:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <HCSR04_read_ch2+0x44>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	4b04      	ldr	r3, [pc, #16]	@ (8001694 <HCSR04_read_ch2+0x44>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f042 0204 	orr.w	r2, r2, #4
 8001688:	60da      	str	r2, [r3, #12]

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40020800 	.word	0x40020800
 8001694:	2000016c 	.word	0x2000016c

08001698 <HCSR04_read_ch3>:

void HCSR04_read_ch3()
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800169c:	2201      	movs	r2, #1
 800169e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016a2:	480d      	ldr	r0, [pc, #52]	@ (80016d8 <HCSR04_read_ch3+0x40>)
 80016a4:	f000 fc3e 	bl	8001f24 <HAL_GPIO_WritePin>
    HAL_Delay(10);  //10
 80016a8:	200a      	movs	r0, #10
 80016aa:	f000 f91f 	bl	80018ec <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016b4:	4808      	ldr	r0, [pc, #32]	@ (80016d8 <HCSR04_read_ch3+0x40>)
 80016b6:	f000 fc35 	bl	8001f24 <HAL_GPIO_WritePin>

    __HAL_TIM_SET_COUNTER(&htim4, 0);
 80016ba:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <HCSR04_read_ch3+0x44>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC4);
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HCSR04_read_ch3+0x44>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68da      	ldr	r2, [r3, #12]
 80016c8:	4b04      	ldr	r3, [pc, #16]	@ (80016dc <HCSR04_read_ch3+0x44>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f042 0210 	orr.w	r2, r2, #16
 80016d0:	60da      	str	r2, [r3, #12]
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40020400 	.word	0x40020400
 80016dc:	20000124 	.word	0x20000124

080016e0 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80016e4:	4b11      	ldr	r3, [pc, #68]	@ (800172c <MX_USART6_UART_Init+0x4c>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	@ (8001730 <MX_USART6_UART_Init+0x50>)
 80016e8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80016ea:	4b10      	ldr	r3, [pc, #64]	@ (800172c <MX_USART6_UART_Init+0x4c>)
 80016ec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80016f0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	@ (800172c <MX_USART6_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <MX_USART6_UART_Init+0x4c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80016fe:	4b0b      	ldr	r3, [pc, #44]	@ (800172c <MX_USART6_UART_Init+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001704:	4b09      	ldr	r3, [pc, #36]	@ (800172c <MX_USART6_UART_Init+0x4c>)
 8001706:	220c      	movs	r2, #12
 8001708:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170a:	4b08      	ldr	r3, [pc, #32]	@ (800172c <MX_USART6_UART_Init+0x4c>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001710:	4b06      	ldr	r3, [pc, #24]	@ (800172c <MX_USART6_UART_Init+0x4c>)
 8001712:	2200      	movs	r2, #0
 8001714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001716:	4805      	ldr	r0, [pc, #20]	@ (800172c <MX_USART6_UART_Init+0x4c>)
 8001718:	f002 fbfe 	bl	8003f18 <HAL_UART_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001722:	f7ff f8c1 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000214 	.word	0x20000214
 8001730:	40011400 	.word	0x40011400

08001734 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	@ 0x28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a2c      	ldr	r2, [pc, #176]	@ (8001804 <HAL_UART_MspInit+0xd0>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d152      	bne.n	80017fc <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	4b2b      	ldr	r3, [pc, #172]	@ (8001808 <HAL_UART_MspInit+0xd4>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175e:	4a2a      	ldr	r2, [pc, #168]	@ (8001808 <HAL_UART_MspInit+0xd4>)
 8001760:	f043 0320 	orr.w	r3, r3, #32
 8001764:	6453      	str	r3, [r2, #68]	@ 0x44
 8001766:	4b28      	ldr	r3, [pc, #160]	@ (8001808 <HAL_UART_MspInit+0xd4>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176a:	f003 0320 	and.w	r3, r3, #32
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	4b24      	ldr	r3, [pc, #144]	@ (8001808 <HAL_UART_MspInit+0xd4>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	4a23      	ldr	r2, [pc, #140]	@ (8001808 <HAL_UART_MspInit+0xd4>)
 800177c:	f043 0304 	orr.w	r3, r3, #4
 8001780:	6313      	str	r3, [r2, #48]	@ 0x30
 8001782:	4b21      	ldr	r3, [pc, #132]	@ (8001808 <HAL_UART_MspInit+0xd4>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	4b1d      	ldr	r3, [pc, #116]	@ (8001808 <HAL_UART_MspInit+0xd4>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	4a1c      	ldr	r2, [pc, #112]	@ (8001808 <HAL_UART_MspInit+0xd4>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6313      	str	r3, [r2, #48]	@ 0x30
 800179e:	4b1a      	ldr	r3, [pc, #104]	@ (8001808 <HAL_UART_MspInit+0xd4>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PA11     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017aa:	2380      	movs	r3, #128	@ 0x80
 80017ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b6:	2303      	movs	r3, #3
 80017b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80017ba:	2308      	movs	r3, #8
 80017bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	4811      	ldr	r0, [pc, #68]	@ (800180c <HAL_UART_MspInit+0xd8>)
 80017c6:	f000 fa29 	bl	8001c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80017ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80017ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d8:	2303      	movs	r3, #3
 80017da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80017dc:	2308      	movs	r3, #8
 80017de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	4619      	mov	r1, r3
 80017e6:	480a      	ldr	r0, [pc, #40]	@ (8001810 <HAL_UART_MspInit+0xdc>)
 80017e8:	f000 fa18 	bl	8001c1c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2105      	movs	r1, #5
 80017f0:	2047      	movs	r0, #71	@ 0x47
 80017f2:	f000 f957 	bl	8001aa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80017f6:	2047      	movs	r0, #71	@ 0x47
 80017f8:	f000 f970 	bl	8001adc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80017fc:	bf00      	nop
 80017fe:	3728      	adds	r7, #40	@ 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40011400 	.word	0x40011400
 8001808:	40023800 	.word	0x40023800
 800180c:	40020800 	.word	0x40020800
 8001810:	40020000 	.word	0x40020000

08001814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001814:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800184c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001818:	f7ff fa82 	bl	8000d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800181c:	480c      	ldr	r0, [pc, #48]	@ (8001850 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800181e:	490d      	ldr	r1, [pc, #52]	@ (8001854 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001820:	4a0d      	ldr	r2, [pc, #52]	@ (8001858 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001824:	e002      	b.n	800182c <LoopCopyDataInit>

08001826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182a:	3304      	adds	r3, #4

0800182c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800182c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001830:	d3f9      	bcc.n	8001826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001832:	4a0a      	ldr	r2, [pc, #40]	@ (800185c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001834:	4c0a      	ldr	r4, [pc, #40]	@ (8001860 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001838:	e001      	b.n	800183e <LoopFillZerobss>

0800183a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800183c:	3204      	adds	r2, #4

0800183e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001840:	d3fb      	bcc.n	800183a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001842:	f006 f92f 	bl	8007aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001846:	f7fe ff7f 	bl	8000748 <main>
  bx  lr    
 800184a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800184c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001854:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001858:	08007cd0 	.word	0x08007cd0
  ldr r2, =_sbss
 800185c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001860:	20004d88 	.word	0x20004d88

08001864 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001864:	e7fe      	b.n	8001864 <ADC_IRQHandler>
	...

08001868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800186c:	4b0e      	ldr	r3, [pc, #56]	@ (80018a8 <HAL_Init+0x40>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a0d      	ldr	r2, [pc, #52]	@ (80018a8 <HAL_Init+0x40>)
 8001872:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001876:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001878:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <HAL_Init+0x40>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0a      	ldr	r2, [pc, #40]	@ (80018a8 <HAL_Init+0x40>)
 800187e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001882:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001884:	4b08      	ldr	r3, [pc, #32]	@ (80018a8 <HAL_Init+0x40>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a07      	ldr	r2, [pc, #28]	@ (80018a8 <HAL_Init+0x40>)
 800188a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800188e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001890:	2003      	movs	r0, #3
 8001892:	f000 f8fc 	bl	8001a8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001896:	200f      	movs	r0, #15
 8001898:	f7ff f982 	bl	8000ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800189c:	f7ff f954 	bl	8000b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023c00 	.word	0x40023c00

080018ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b0:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <HAL_IncTick+0x20>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	461a      	mov	r2, r3
 80018b6:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <HAL_IncTick+0x24>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	4a04      	ldr	r2, [pc, #16]	@ (80018d0 <HAL_IncTick+0x24>)
 80018be:	6013      	str	r3, [r2, #0]
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	2000000c 	.word	0x2000000c
 80018d0:	2000025c 	.word	0x2000025c

080018d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return uwTick;
 80018d8:	4b03      	ldr	r3, [pc, #12]	@ (80018e8 <HAL_GetTick+0x14>)
 80018da:	681b      	ldr	r3, [r3, #0]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	2000025c 	.word	0x2000025c

080018ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f4:	f7ff ffee 	bl	80018d4 <HAL_GetTick>
 80018f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001904:	d005      	beq.n	8001912 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001906:	4b0a      	ldr	r3, [pc, #40]	@ (8001930 <HAL_Delay+0x44>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4413      	add	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001912:	bf00      	nop
 8001914:	f7ff ffde 	bl	80018d4 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	429a      	cmp	r2, r3
 8001922:	d8f7      	bhi.n	8001914 <HAL_Delay+0x28>
  {
  }
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	2000000c 	.word	0x2000000c

08001934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001944:	4b0c      	ldr	r3, [pc, #48]	@ (8001978 <__NVIC_SetPriorityGrouping+0x44>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001950:	4013      	ands	r3, r2
 8001952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800195c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001960:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001966:	4a04      	ldr	r2, [pc, #16]	@ (8001978 <__NVIC_SetPriorityGrouping+0x44>)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	60d3      	str	r3, [r2, #12]
}
 800196c:	bf00      	nop
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001980:	4b04      	ldr	r3, [pc, #16]	@ (8001994 <__NVIC_GetPriorityGrouping+0x18>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	0a1b      	lsrs	r3, r3, #8
 8001986:	f003 0307 	and.w	r3, r3, #7
}
 800198a:	4618      	mov	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	db0b      	blt.n	80019c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	f003 021f 	and.w	r2, r3, #31
 80019b0:	4907      	ldr	r1, [pc, #28]	@ (80019d0 <__NVIC_EnableIRQ+0x38>)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	095b      	lsrs	r3, r3, #5
 80019b8:	2001      	movs	r0, #1
 80019ba:	fa00 f202 	lsl.w	r2, r0, r2
 80019be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000e100 	.word	0xe000e100

080019d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	6039      	str	r1, [r7, #0]
 80019de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	db0a      	blt.n	80019fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	490c      	ldr	r1, [pc, #48]	@ (8001a20 <__NVIC_SetPriority+0x4c>)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	0112      	lsls	r2, r2, #4
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	440b      	add	r3, r1
 80019f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019fc:	e00a      	b.n	8001a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4908      	ldr	r1, [pc, #32]	@ (8001a24 <__NVIC_SetPriority+0x50>)
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	3b04      	subs	r3, #4
 8001a0c:	0112      	lsls	r2, r2, #4
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	440b      	add	r3, r1
 8001a12:	761a      	strb	r2, [r3, #24]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000e100 	.word	0xe000e100
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	@ 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f1c3 0307 	rsb	r3, r3, #7
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	bf28      	it	cs
 8001a46:	2304      	movcs	r3, #4
 8001a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	2b06      	cmp	r3, #6
 8001a50:	d902      	bls.n	8001a58 <NVIC_EncodePriority+0x30>
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3b03      	subs	r3, #3
 8001a56:	e000      	b.n	8001a5a <NVIC_EncodePriority+0x32>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43da      	mvns	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a70:	f04f 31ff 	mov.w	r1, #4294967295
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7a:	43d9      	mvns	r1, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	4313      	orrs	r3, r2
         );
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3724      	adds	r7, #36	@ 0x24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff ff4c 	bl	8001934 <__NVIC_SetPriorityGrouping>
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
 8001ab0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab6:	f7ff ff61 	bl	800197c <__NVIC_GetPriorityGrouping>
 8001aba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	68b9      	ldr	r1, [r7, #8]
 8001ac0:	6978      	ldr	r0, [r7, #20]
 8001ac2:	f7ff ffb1 	bl	8001a28 <NVIC_EncodePriority>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001acc:	4611      	mov	r1, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff ff80 	bl	80019d4 <__NVIC_SetPriority>
}
 8001ad4:	bf00      	nop
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff ff54 	bl	8001998 <__NVIC_EnableIRQ>
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b06:	f7ff fee5 	bl	80018d4 <HAL_GetTick>
 8001b0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d008      	beq.n	8001b2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2280      	movs	r2, #128	@ 0x80
 8001b1c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e052      	b.n	8001bd0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0216 	bic.w	r2, r2, #22
 8001b38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	695a      	ldr	r2, [r3, #20]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d103      	bne.n	8001b5a <HAL_DMA_Abort+0x62>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d007      	beq.n	8001b6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 0208 	bic.w	r2, r2, #8
 8001b68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0201 	bic.w	r2, r2, #1
 8001b78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b7a:	e013      	b.n	8001ba4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b7c:	f7ff feaa 	bl	80018d4 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b05      	cmp	r3, #5
 8001b88:	d90c      	bls.n	8001ba4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2203      	movs	r2, #3
 8001b94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e015      	b.n	8001bd0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1e4      	bne.n	8001b7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb6:	223f      	movs	r2, #63	@ 0x3f
 8001bb8:	409a      	lsls	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d004      	beq.n	8001bf6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2280      	movs	r2, #128	@ 0x80
 8001bf0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e00c      	b.n	8001c10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2205      	movs	r2, #5
 8001bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0201 	bic.w	r2, r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	@ 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	e159      	b.n	8001eec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c38:	2201      	movs	r2, #1
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	f040 8148 	bne.w	8001ee6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d005      	beq.n	8001c6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d130      	bne.n	8001cd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2203      	movs	r2, #3
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	f003 0201 	and.w	r2, r3, #1
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d017      	beq.n	8001d0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d123      	bne.n	8001d60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	08da      	lsrs	r2, r3, #3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3208      	adds	r2, #8
 8001d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	220f      	movs	r2, #15
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	08da      	lsrs	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3208      	adds	r2, #8
 8001d5a:	69b9      	ldr	r1, [r7, #24]
 8001d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0203 	and.w	r2, r3, #3
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80a2 	beq.w	8001ee6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b57      	ldr	r3, [pc, #348]	@ (8001f04 <HAL_GPIO_Init+0x2e8>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001daa:	4a56      	ldr	r2, [pc, #344]	@ (8001f04 <HAL_GPIO_Init+0x2e8>)
 8001dac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001db0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001db2:	4b54      	ldr	r3, [pc, #336]	@ (8001f04 <HAL_GPIO_Init+0x2e8>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dbe:	4a52      	ldr	r2, [pc, #328]	@ (8001f08 <HAL_GPIO_Init+0x2ec>)
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a49      	ldr	r2, [pc, #292]	@ (8001f0c <HAL_GPIO_Init+0x2f0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d019      	beq.n	8001e1e <HAL_GPIO_Init+0x202>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a48      	ldr	r2, [pc, #288]	@ (8001f10 <HAL_GPIO_Init+0x2f4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d013      	beq.n	8001e1a <HAL_GPIO_Init+0x1fe>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a47      	ldr	r2, [pc, #284]	@ (8001f14 <HAL_GPIO_Init+0x2f8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00d      	beq.n	8001e16 <HAL_GPIO_Init+0x1fa>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a46      	ldr	r2, [pc, #280]	@ (8001f18 <HAL_GPIO_Init+0x2fc>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d007      	beq.n	8001e12 <HAL_GPIO_Init+0x1f6>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a45      	ldr	r2, [pc, #276]	@ (8001f1c <HAL_GPIO_Init+0x300>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d101      	bne.n	8001e0e <HAL_GPIO_Init+0x1f2>
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	e008      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e0e:	2307      	movs	r3, #7
 8001e10:	e006      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e12:	2303      	movs	r3, #3
 8001e14:	e004      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e002      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	f002 0203 	and.w	r2, r2, #3
 8001e26:	0092      	lsls	r2, r2, #2
 8001e28:	4093      	lsls	r3, r2
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e30:	4935      	ldr	r1, [pc, #212]	@ (8001f08 <HAL_GPIO_Init+0x2ec>)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	089b      	lsrs	r3, r3, #2
 8001e36:	3302      	adds	r3, #2
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e3e:	4b38      	ldr	r3, [pc, #224]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e62:	4a2f      	ldr	r2, [pc, #188]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e68:	4b2d      	ldr	r3, [pc, #180]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e8c:	4a24      	ldr	r2, [pc, #144]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e92:	4b23      	ldr	r3, [pc, #140]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb6:	4a1a      	ldr	r2, [pc, #104]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ebc:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ee0:	4a0f      	ldr	r2, [pc, #60]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	61fb      	str	r3, [r7, #28]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	2b0f      	cmp	r3, #15
 8001ef0:	f67f aea2 	bls.w	8001c38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3724      	adds	r7, #36	@ 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40013800 	.word	0x40013800
 8001f0c:	40020000 	.word	0x40020000
 8001f10:	40020400 	.word	0x40020400
 8001f14:	40020800 	.word	0x40020800
 8001f18:	40020c00 	.word	0x40020c00
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40013c00 	.word	0x40013c00

08001f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	807b      	strh	r3, [r7, #2]
 8001f30:	4613      	mov	r3, r2
 8001f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f34:	787b      	ldrb	r3, [r7, #1]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f3a:	887a      	ldrh	r2, [r7, #2]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f40:	e003      	b.n	8001f4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f42:	887b      	ldrh	r3, [r7, #2]
 8001f44:	041a      	lsls	r2, r3, #16
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	619a      	str	r2, [r3, #24]
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e267      	b.n	800243a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d075      	beq.n	8002062 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f76:	4b88      	ldr	r3, [pc, #544]	@ (8002198 <HAL_RCC_OscConfig+0x240>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d00c      	beq.n	8001f9c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f82:	4b85      	ldr	r3, [pc, #532]	@ (8002198 <HAL_RCC_OscConfig+0x240>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d112      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f8e:	4b82      	ldr	r3, [pc, #520]	@ (8002198 <HAL_RCC_OscConfig+0x240>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f9a:	d10b      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f9c:	4b7e      	ldr	r3, [pc, #504]	@ (8002198 <HAL_RCC_OscConfig+0x240>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d05b      	beq.n	8002060 <HAL_RCC_OscConfig+0x108>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d157      	bne.n	8002060 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e242      	b.n	800243a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fbc:	d106      	bne.n	8001fcc <HAL_RCC_OscConfig+0x74>
 8001fbe:	4b76      	ldr	r3, [pc, #472]	@ (8002198 <HAL_RCC_OscConfig+0x240>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a75      	ldr	r2, [pc, #468]	@ (8002198 <HAL_RCC_OscConfig+0x240>)
 8001fc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	e01d      	b.n	8002008 <HAL_RCC_OscConfig+0xb0>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fd4:	d10c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x98>
 8001fd6:	4b70      	ldr	r3, [pc, #448]	@ (8002198 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a6f      	ldr	r2, [pc, #444]	@ (8002198 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	4b6d      	ldr	r3, [pc, #436]	@ (8002198 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a6c      	ldr	r2, [pc, #432]	@ (8002198 <HAL_RCC_OscConfig+0x240>)
 8001fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	e00b      	b.n	8002008 <HAL_RCC_OscConfig+0xb0>
 8001ff0:	4b69      	ldr	r3, [pc, #420]	@ (8002198 <HAL_RCC_OscConfig+0x240>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a68      	ldr	r2, [pc, #416]	@ (8002198 <HAL_RCC_OscConfig+0x240>)
 8001ff6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	4b66      	ldr	r3, [pc, #408]	@ (8002198 <HAL_RCC_OscConfig+0x240>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a65      	ldr	r2, [pc, #404]	@ (8002198 <HAL_RCC_OscConfig+0x240>)
 8002002:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002006:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d013      	beq.n	8002038 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002010:	f7ff fc60 	bl	80018d4 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002018:	f7ff fc5c 	bl	80018d4 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b64      	cmp	r3, #100	@ 0x64
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e207      	b.n	800243a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202a:	4b5b      	ldr	r3, [pc, #364]	@ (8002198 <HAL_RCC_OscConfig+0x240>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0xc0>
 8002036:	e014      	b.n	8002062 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002038:	f7ff fc4c 	bl	80018d4 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002040:	f7ff fc48 	bl	80018d4 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b64      	cmp	r3, #100	@ 0x64
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e1f3      	b.n	800243a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002052:	4b51      	ldr	r3, [pc, #324]	@ (8002198 <HAL_RCC_OscConfig+0x240>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0xe8>
 800205e:	e000      	b.n	8002062 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d063      	beq.n	8002136 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800206e:	4b4a      	ldr	r3, [pc, #296]	@ (8002198 <HAL_RCC_OscConfig+0x240>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00b      	beq.n	8002092 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800207a:	4b47      	ldr	r3, [pc, #284]	@ (8002198 <HAL_RCC_OscConfig+0x240>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002082:	2b08      	cmp	r3, #8
 8002084:	d11c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002086:	4b44      	ldr	r3, [pc, #272]	@ (8002198 <HAL_RCC_OscConfig+0x240>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d116      	bne.n	80020c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002092:	4b41      	ldr	r3, [pc, #260]	@ (8002198 <HAL_RCC_OscConfig+0x240>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d005      	beq.n	80020aa <HAL_RCC_OscConfig+0x152>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d001      	beq.n	80020aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e1c7      	b.n	800243a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002198 <HAL_RCC_OscConfig+0x240>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4937      	ldr	r1, [pc, #220]	@ (8002198 <HAL_RCC_OscConfig+0x240>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020be:	e03a      	b.n	8002136 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d020      	beq.n	800210a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c8:	4b34      	ldr	r3, [pc, #208]	@ (800219c <HAL_RCC_OscConfig+0x244>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ce:	f7ff fc01 	bl	80018d4 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d6:	f7ff fbfd 	bl	80018d4 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e1a8      	b.n	800243a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002198 <HAL_RCC_OscConfig+0x240>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f4:	4b28      	ldr	r3, [pc, #160]	@ (8002198 <HAL_RCC_OscConfig+0x240>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	4925      	ldr	r1, [pc, #148]	@ (8002198 <HAL_RCC_OscConfig+0x240>)
 8002104:	4313      	orrs	r3, r2
 8002106:	600b      	str	r3, [r1, #0]
 8002108:	e015      	b.n	8002136 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800210a:	4b24      	ldr	r3, [pc, #144]	@ (800219c <HAL_RCC_OscConfig+0x244>)
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002110:	f7ff fbe0 	bl	80018d4 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002118:	f7ff fbdc 	bl	80018d4 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e187      	b.n	800243a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800212a:	4b1b      	ldr	r3, [pc, #108]	@ (8002198 <HAL_RCC_OscConfig+0x240>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d036      	beq.n	80021b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d016      	beq.n	8002178 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800214a:	4b15      	ldr	r3, [pc, #84]	@ (80021a0 <HAL_RCC_OscConfig+0x248>)
 800214c:	2201      	movs	r2, #1
 800214e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002150:	f7ff fbc0 	bl	80018d4 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002158:	f7ff fbbc 	bl	80018d4 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e167      	b.n	800243a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800216a:	4b0b      	ldr	r3, [pc, #44]	@ (8002198 <HAL_RCC_OscConfig+0x240>)
 800216c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0x200>
 8002176:	e01b      	b.n	80021b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002178:	4b09      	ldr	r3, [pc, #36]	@ (80021a0 <HAL_RCC_OscConfig+0x248>)
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217e:	f7ff fba9 	bl	80018d4 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002184:	e00e      	b.n	80021a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002186:	f7ff fba5 	bl	80018d4 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d907      	bls.n	80021a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e150      	b.n	800243a <HAL_RCC_OscConfig+0x4e2>
 8002198:	40023800 	.word	0x40023800
 800219c:	42470000 	.word	0x42470000
 80021a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a4:	4b88      	ldr	r3, [pc, #544]	@ (80023c8 <HAL_RCC_OscConfig+0x470>)
 80021a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1ea      	bne.n	8002186 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 8097 	beq.w	80022ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c2:	4b81      	ldr	r3, [pc, #516]	@ (80023c8 <HAL_RCC_OscConfig+0x470>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10f      	bne.n	80021ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	4b7d      	ldr	r3, [pc, #500]	@ (80023c8 <HAL_RCC_OscConfig+0x470>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	4a7c      	ldr	r2, [pc, #496]	@ (80023c8 <HAL_RCC_OscConfig+0x470>)
 80021d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80021de:	4b7a      	ldr	r3, [pc, #488]	@ (80023c8 <HAL_RCC_OscConfig+0x470>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ea:	2301      	movs	r3, #1
 80021ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ee:	4b77      	ldr	r3, [pc, #476]	@ (80023cc <HAL_RCC_OscConfig+0x474>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d118      	bne.n	800222c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021fa:	4b74      	ldr	r3, [pc, #464]	@ (80023cc <HAL_RCC_OscConfig+0x474>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a73      	ldr	r2, [pc, #460]	@ (80023cc <HAL_RCC_OscConfig+0x474>)
 8002200:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002206:	f7ff fb65 	bl	80018d4 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800220e:	f7ff fb61 	bl	80018d4 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e10c      	b.n	800243a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002220:	4b6a      	ldr	r3, [pc, #424]	@ (80023cc <HAL_RCC_OscConfig+0x474>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0f0      	beq.n	800220e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d106      	bne.n	8002242 <HAL_RCC_OscConfig+0x2ea>
 8002234:	4b64      	ldr	r3, [pc, #400]	@ (80023c8 <HAL_RCC_OscConfig+0x470>)
 8002236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002238:	4a63      	ldr	r2, [pc, #396]	@ (80023c8 <HAL_RCC_OscConfig+0x470>)
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002240:	e01c      	b.n	800227c <HAL_RCC_OscConfig+0x324>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b05      	cmp	r3, #5
 8002248:	d10c      	bne.n	8002264 <HAL_RCC_OscConfig+0x30c>
 800224a:	4b5f      	ldr	r3, [pc, #380]	@ (80023c8 <HAL_RCC_OscConfig+0x470>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800224e:	4a5e      	ldr	r2, [pc, #376]	@ (80023c8 <HAL_RCC_OscConfig+0x470>)
 8002250:	f043 0304 	orr.w	r3, r3, #4
 8002254:	6713      	str	r3, [r2, #112]	@ 0x70
 8002256:	4b5c      	ldr	r3, [pc, #368]	@ (80023c8 <HAL_RCC_OscConfig+0x470>)
 8002258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800225a:	4a5b      	ldr	r2, [pc, #364]	@ (80023c8 <HAL_RCC_OscConfig+0x470>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	6713      	str	r3, [r2, #112]	@ 0x70
 8002262:	e00b      	b.n	800227c <HAL_RCC_OscConfig+0x324>
 8002264:	4b58      	ldr	r3, [pc, #352]	@ (80023c8 <HAL_RCC_OscConfig+0x470>)
 8002266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002268:	4a57      	ldr	r2, [pc, #348]	@ (80023c8 <HAL_RCC_OscConfig+0x470>)
 800226a:	f023 0301 	bic.w	r3, r3, #1
 800226e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002270:	4b55      	ldr	r3, [pc, #340]	@ (80023c8 <HAL_RCC_OscConfig+0x470>)
 8002272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002274:	4a54      	ldr	r2, [pc, #336]	@ (80023c8 <HAL_RCC_OscConfig+0x470>)
 8002276:	f023 0304 	bic.w	r3, r3, #4
 800227a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d015      	beq.n	80022b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002284:	f7ff fb26 	bl	80018d4 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228a:	e00a      	b.n	80022a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228c:	f7ff fb22 	bl	80018d4 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e0cb      	b.n	800243a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a2:	4b49      	ldr	r3, [pc, #292]	@ (80023c8 <HAL_RCC_OscConfig+0x470>)
 80022a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0ee      	beq.n	800228c <HAL_RCC_OscConfig+0x334>
 80022ae:	e014      	b.n	80022da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b0:	f7ff fb10 	bl	80018d4 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b6:	e00a      	b.n	80022ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b8:	f7ff fb0c 	bl	80018d4 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e0b5      	b.n	800243a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ce:	4b3e      	ldr	r3, [pc, #248]	@ (80023c8 <HAL_RCC_OscConfig+0x470>)
 80022d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1ee      	bne.n	80022b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022da:	7dfb      	ldrb	r3, [r7, #23]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d105      	bne.n	80022ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e0:	4b39      	ldr	r3, [pc, #228]	@ (80023c8 <HAL_RCC_OscConfig+0x470>)
 80022e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e4:	4a38      	ldr	r2, [pc, #224]	@ (80023c8 <HAL_RCC_OscConfig+0x470>)
 80022e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 80a1 	beq.w	8002438 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022f6:	4b34      	ldr	r3, [pc, #208]	@ (80023c8 <HAL_RCC_OscConfig+0x470>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	2b08      	cmp	r3, #8
 8002300:	d05c      	beq.n	80023bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d141      	bne.n	800238e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230a:	4b31      	ldr	r3, [pc, #196]	@ (80023d0 <HAL_RCC_OscConfig+0x478>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7ff fae0 	bl	80018d4 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002318:	f7ff fadc 	bl	80018d4 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e087      	b.n	800243a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232a:	4b27      	ldr	r3, [pc, #156]	@ (80023c8 <HAL_RCC_OscConfig+0x470>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69da      	ldr	r2, [r3, #28]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002344:	019b      	lsls	r3, r3, #6
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234c:	085b      	lsrs	r3, r3, #1
 800234e:	3b01      	subs	r3, #1
 8002350:	041b      	lsls	r3, r3, #16
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002358:	061b      	lsls	r3, r3, #24
 800235a:	491b      	ldr	r1, [pc, #108]	@ (80023c8 <HAL_RCC_OscConfig+0x470>)
 800235c:	4313      	orrs	r3, r2
 800235e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002360:	4b1b      	ldr	r3, [pc, #108]	@ (80023d0 <HAL_RCC_OscConfig+0x478>)
 8002362:	2201      	movs	r2, #1
 8002364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002366:	f7ff fab5 	bl	80018d4 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236e:	f7ff fab1 	bl	80018d4 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e05c      	b.n	800243a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002380:	4b11      	ldr	r3, [pc, #68]	@ (80023c8 <HAL_RCC_OscConfig+0x470>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f0      	beq.n	800236e <HAL_RCC_OscConfig+0x416>
 800238c:	e054      	b.n	8002438 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238e:	4b10      	ldr	r3, [pc, #64]	@ (80023d0 <HAL_RCC_OscConfig+0x478>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002394:	f7ff fa9e 	bl	80018d4 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239c:	f7ff fa9a 	bl	80018d4 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e045      	b.n	800243a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ae:	4b06      	ldr	r3, [pc, #24]	@ (80023c8 <HAL_RCC_OscConfig+0x470>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x444>
 80023ba:	e03d      	b.n	8002438 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d107      	bne.n	80023d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e038      	b.n	800243a <HAL_RCC_OscConfig+0x4e2>
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40007000 	.word	0x40007000
 80023d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002444 <HAL_RCC_OscConfig+0x4ec>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d028      	beq.n	8002434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d121      	bne.n	8002434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d11a      	bne.n	8002434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002404:	4013      	ands	r3, r2
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800240a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800240c:	4293      	cmp	r3, r2
 800240e:	d111      	bne.n	8002434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241a:	085b      	lsrs	r3, r3, #1
 800241c:	3b01      	subs	r3, #1
 800241e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002420:	429a      	cmp	r2, r3
 8002422:	d107      	bne.n	8002434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40023800 	.word	0x40023800

08002448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e0cc      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800245c:	4b68      	ldr	r3, [pc, #416]	@ (8002600 <HAL_RCC_ClockConfig+0x1b8>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d90c      	bls.n	8002484 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246a:	4b65      	ldr	r3, [pc, #404]	@ (8002600 <HAL_RCC_ClockConfig+0x1b8>)
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002472:	4b63      	ldr	r3, [pc, #396]	@ (8002600 <HAL_RCC_ClockConfig+0x1b8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d001      	beq.n	8002484 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e0b8      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d020      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800249c:	4b59      	ldr	r3, [pc, #356]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	4a58      	ldr	r2, [pc, #352]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024b4:	4b53      	ldr	r3, [pc, #332]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	4a52      	ldr	r2, [pc, #328]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c0:	4b50      	ldr	r3, [pc, #320]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	494d      	ldr	r1, [pc, #308]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d044      	beq.n	8002568 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d107      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	4b47      	ldr	r3, [pc, #284]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d119      	bne.n	8002526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e07f      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d003      	beq.n	8002506 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002502:	2b03      	cmp	r3, #3
 8002504:	d107      	bne.n	8002516 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002506:	4b3f      	ldr	r3, [pc, #252]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d109      	bne.n	8002526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e06f      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002516:	4b3b      	ldr	r3, [pc, #236]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e067      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002526:	4b37      	ldr	r3, [pc, #220]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f023 0203 	bic.w	r2, r3, #3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	4934      	ldr	r1, [pc, #208]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	4313      	orrs	r3, r2
 8002536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002538:	f7ff f9cc 	bl	80018d4 <HAL_GetTick>
 800253c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253e:	e00a      	b.n	8002556 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002540:	f7ff f9c8 	bl	80018d4 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800254e:	4293      	cmp	r3, r2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e04f      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002556:	4b2b      	ldr	r3, [pc, #172]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 020c 	and.w	r2, r3, #12
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	429a      	cmp	r2, r3
 8002566:	d1eb      	bne.n	8002540 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002568:	4b25      	ldr	r3, [pc, #148]	@ (8002600 <HAL_RCC_ClockConfig+0x1b8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d20c      	bcs.n	8002590 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002576:	4b22      	ldr	r3, [pc, #136]	@ (8002600 <HAL_RCC_ClockConfig+0x1b8>)
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800257e:	4b20      	ldr	r3, [pc, #128]	@ (8002600 <HAL_RCC_ClockConfig+0x1b8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e032      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800259c:	4b19      	ldr	r3, [pc, #100]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	4916      	ldr	r1, [pc, #88]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d009      	beq.n	80025ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ba:	4b12      	ldr	r3, [pc, #72]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	490e      	ldr	r1, [pc, #56]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ce:	f000 f821 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 80025d2:	4602      	mov	r2, r0
 80025d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	490a      	ldr	r1, [pc, #40]	@ (8002608 <HAL_RCC_ClockConfig+0x1c0>)
 80025e0:	5ccb      	ldrb	r3, [r1, r3]
 80025e2:	fa22 f303 	lsr.w	r3, r2, r3
 80025e6:	4a09      	ldr	r2, [pc, #36]	@ (800260c <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80025ea:	4b09      	ldr	r3, [pc, #36]	@ (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe fad6 	bl	8000ba0 <HAL_InitTick>

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40023c00 	.word	0x40023c00
 8002604:	40023800 	.word	0x40023800
 8002608:	08007ca8 	.word	0x08007ca8
 800260c:	20000004 	.word	0x20000004
 8002610:	20000008 	.word	0x20000008

08002614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002618:	b094      	sub	sp, #80	@ 0x50
 800261a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800262c:	4b79      	ldr	r3, [pc, #484]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x200>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 030c 	and.w	r3, r3, #12
 8002634:	2b08      	cmp	r3, #8
 8002636:	d00d      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x40>
 8002638:	2b08      	cmp	r3, #8
 800263a:	f200 80e1 	bhi.w	8002800 <HAL_RCC_GetSysClockFreq+0x1ec>
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <HAL_RCC_GetSysClockFreq+0x34>
 8002642:	2b04      	cmp	r3, #4
 8002644:	d003      	beq.n	800264e <HAL_RCC_GetSysClockFreq+0x3a>
 8002646:	e0db      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002648:	4b73      	ldr	r3, [pc, #460]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x204>)
 800264a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800264c:	e0db      	b.n	8002806 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800264e:	4b73      	ldr	r3, [pc, #460]	@ (800281c <HAL_RCC_GetSysClockFreq+0x208>)
 8002650:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002652:	e0d8      	b.n	8002806 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002654:	4b6f      	ldr	r3, [pc, #444]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x200>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800265c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800265e:	4b6d      	ldr	r3, [pc, #436]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x200>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d063      	beq.n	8002732 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800266a:	4b6a      	ldr	r3, [pc, #424]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x200>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	099b      	lsrs	r3, r3, #6
 8002670:	2200      	movs	r2, #0
 8002672:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002674:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800267c:	633b      	str	r3, [r7, #48]	@ 0x30
 800267e:	2300      	movs	r3, #0
 8002680:	637b      	str	r3, [r7, #52]	@ 0x34
 8002682:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002686:	4622      	mov	r2, r4
 8002688:	462b      	mov	r3, r5
 800268a:	f04f 0000 	mov.w	r0, #0
 800268e:	f04f 0100 	mov.w	r1, #0
 8002692:	0159      	lsls	r1, r3, #5
 8002694:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002698:	0150      	lsls	r0, r2, #5
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	4621      	mov	r1, r4
 80026a0:	1a51      	subs	r1, r2, r1
 80026a2:	6139      	str	r1, [r7, #16]
 80026a4:	4629      	mov	r1, r5
 80026a6:	eb63 0301 	sbc.w	r3, r3, r1
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026b8:	4659      	mov	r1, fp
 80026ba:	018b      	lsls	r3, r1, #6
 80026bc:	4651      	mov	r1, sl
 80026be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026c2:	4651      	mov	r1, sl
 80026c4:	018a      	lsls	r2, r1, #6
 80026c6:	4651      	mov	r1, sl
 80026c8:	ebb2 0801 	subs.w	r8, r2, r1
 80026cc:	4659      	mov	r1, fp
 80026ce:	eb63 0901 	sbc.w	r9, r3, r1
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026e6:	4690      	mov	r8, r2
 80026e8:	4699      	mov	r9, r3
 80026ea:	4623      	mov	r3, r4
 80026ec:	eb18 0303 	adds.w	r3, r8, r3
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	462b      	mov	r3, r5
 80026f4:	eb49 0303 	adc.w	r3, r9, r3
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	f04f 0300 	mov.w	r3, #0
 8002702:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002706:	4629      	mov	r1, r5
 8002708:	024b      	lsls	r3, r1, #9
 800270a:	4621      	mov	r1, r4
 800270c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002710:	4621      	mov	r1, r4
 8002712:	024a      	lsls	r2, r1, #9
 8002714:	4610      	mov	r0, r2
 8002716:	4619      	mov	r1, r3
 8002718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800271a:	2200      	movs	r2, #0
 800271c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800271e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002720:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002724:	f7fd fd5c 	bl	80001e0 <__aeabi_uldivmod>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	4613      	mov	r3, r2
 800272e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002730:	e058      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002732:	4b38      	ldr	r3, [pc, #224]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x200>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	099b      	lsrs	r3, r3, #6
 8002738:	2200      	movs	r2, #0
 800273a:	4618      	mov	r0, r3
 800273c:	4611      	mov	r1, r2
 800273e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002742:	623b      	str	r3, [r7, #32]
 8002744:	2300      	movs	r3, #0
 8002746:	627b      	str	r3, [r7, #36]	@ 0x24
 8002748:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800274c:	4642      	mov	r2, r8
 800274e:	464b      	mov	r3, r9
 8002750:	f04f 0000 	mov.w	r0, #0
 8002754:	f04f 0100 	mov.w	r1, #0
 8002758:	0159      	lsls	r1, r3, #5
 800275a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800275e:	0150      	lsls	r0, r2, #5
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4641      	mov	r1, r8
 8002766:	ebb2 0a01 	subs.w	sl, r2, r1
 800276a:	4649      	mov	r1, r9
 800276c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800277c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002780:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002784:	ebb2 040a 	subs.w	r4, r2, sl
 8002788:	eb63 050b 	sbc.w	r5, r3, fp
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	00eb      	lsls	r3, r5, #3
 8002796:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800279a:	00e2      	lsls	r2, r4, #3
 800279c:	4614      	mov	r4, r2
 800279e:	461d      	mov	r5, r3
 80027a0:	4643      	mov	r3, r8
 80027a2:	18e3      	adds	r3, r4, r3
 80027a4:	603b      	str	r3, [r7, #0]
 80027a6:	464b      	mov	r3, r9
 80027a8:	eb45 0303 	adc.w	r3, r5, r3
 80027ac:	607b      	str	r3, [r7, #4]
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027ba:	4629      	mov	r1, r5
 80027bc:	028b      	lsls	r3, r1, #10
 80027be:	4621      	mov	r1, r4
 80027c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027c4:	4621      	mov	r1, r4
 80027c6:	028a      	lsls	r2, r1, #10
 80027c8:	4610      	mov	r0, r2
 80027ca:	4619      	mov	r1, r3
 80027cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027ce:	2200      	movs	r2, #0
 80027d0:	61bb      	str	r3, [r7, #24]
 80027d2:	61fa      	str	r2, [r7, #28]
 80027d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027d8:	f7fd fd02 	bl	80001e0 <__aeabi_uldivmod>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4613      	mov	r3, r2
 80027e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80027e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x200>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	0c1b      	lsrs	r3, r3, #16
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	3301      	adds	r3, #1
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80027f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027fe:	e002      	b.n	8002806 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002800:	4b05      	ldr	r3, [pc, #20]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x204>)
 8002802:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002804:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002806:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002808:	4618      	mov	r0, r3
 800280a:	3750      	adds	r7, #80	@ 0x50
 800280c:	46bd      	mov	sp, r7
 800280e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800
 8002818:	00f42400 	.word	0x00f42400
 800281c:	007a1200 	.word	0x007a1200

08002820 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002824:	4b03      	ldr	r3, [pc, #12]	@ (8002834 <HAL_RCC_GetHCLKFreq+0x14>)
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	20000004 	.word	0x20000004

08002838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800283c:	f7ff fff0 	bl	8002820 <HAL_RCC_GetHCLKFreq>
 8002840:	4602      	mov	r2, r0
 8002842:	4b05      	ldr	r3, [pc, #20]	@ (8002858 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	0a9b      	lsrs	r3, r3, #10
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	4903      	ldr	r1, [pc, #12]	@ (800285c <HAL_RCC_GetPCLK1Freq+0x24>)
 800284e:	5ccb      	ldrb	r3, [r1, r3]
 8002850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002854:	4618      	mov	r0, r3
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40023800 	.word	0x40023800
 800285c:	08007cb8 	.word	0x08007cb8

08002860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002864:	f7ff ffdc 	bl	8002820 <HAL_RCC_GetHCLKFreq>
 8002868:	4602      	mov	r2, r0
 800286a:	4b05      	ldr	r3, [pc, #20]	@ (8002880 <HAL_RCC_GetPCLK2Freq+0x20>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	0b5b      	lsrs	r3, r3, #13
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	4903      	ldr	r1, [pc, #12]	@ (8002884 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002876:	5ccb      	ldrb	r3, [r1, r3]
 8002878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800287c:	4618      	mov	r0, r3
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40023800 	.word	0x40023800
 8002884:	08007cb8 	.word	0x08007cb8

08002888 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	220f      	movs	r2, #15
 8002896:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002898:	4b12      	ldr	r3, [pc, #72]	@ (80028e4 <HAL_RCC_GetClockConfig+0x5c>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 0203 	and.w	r2, r3, #3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80028a4:	4b0f      	ldr	r3, [pc, #60]	@ (80028e4 <HAL_RCC_GetClockConfig+0x5c>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80028b0:	4b0c      	ldr	r3, [pc, #48]	@ (80028e4 <HAL_RCC_GetClockConfig+0x5c>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80028bc:	4b09      	ldr	r3, [pc, #36]	@ (80028e4 <HAL_RCC_GetClockConfig+0x5c>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	08db      	lsrs	r3, r3, #3
 80028c2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028ca:	4b07      	ldr	r3, [pc, #28]	@ (80028e8 <HAL_RCC_GetClockConfig+0x60>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0207 	and.w	r2, r3, #7
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	601a      	str	r2, [r3, #0]
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40023c00 	.word	0x40023c00

080028ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e041      	b.n	8002982 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d106      	bne.n	8002918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7fe fbc4 	bl	80010a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3304      	adds	r3, #4
 8002928:	4619      	mov	r1, r3
 800292a:	4610      	mov	r0, r2
 800292c:	f000 fe7c 	bl	8003628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b01      	cmp	r3, #1
 800299e:	d001      	beq.n	80029a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e044      	b.n	8002a2e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a1e      	ldr	r2, [pc, #120]	@ (8002a3c <HAL_TIM_Base_Start_IT+0xb0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d018      	beq.n	80029f8 <HAL_TIM_Base_Start_IT+0x6c>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029ce:	d013      	beq.n	80029f8 <HAL_TIM_Base_Start_IT+0x6c>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002a40 <HAL_TIM_Base_Start_IT+0xb4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00e      	beq.n	80029f8 <HAL_TIM_Base_Start_IT+0x6c>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a19      	ldr	r2, [pc, #100]	@ (8002a44 <HAL_TIM_Base_Start_IT+0xb8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d009      	beq.n	80029f8 <HAL_TIM_Base_Start_IT+0x6c>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a17      	ldr	r2, [pc, #92]	@ (8002a48 <HAL_TIM_Base_Start_IT+0xbc>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d004      	beq.n	80029f8 <HAL_TIM_Base_Start_IT+0x6c>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a16      	ldr	r2, [pc, #88]	@ (8002a4c <HAL_TIM_Base_Start_IT+0xc0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d111      	bne.n	8002a1c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b06      	cmp	r3, #6
 8002a08:	d010      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 0201 	orr.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a1a:	e007      	b.n	8002a2c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0201 	orr.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3714      	adds	r7, #20
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40010000 	.word	0x40010000
 8002a40:	40000400 	.word	0x40000400
 8002a44:	40000800 	.word	0x40000800
 8002a48:	40000c00 	.word	0x40000c00
 8002a4c:	40014000 	.word	0x40014000

08002a50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e041      	b.n	8002ae6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d106      	bne.n	8002a7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7fe faea 	bl	8001050 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4610      	mov	r0, r2
 8002a90:	f000 fdca 	bl	8003628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d109      	bne.n	8002b14 <HAL_TIM_PWM_Start+0x24>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	bf14      	ite	ne
 8002b0c:	2301      	movne	r3, #1
 8002b0e:	2300      	moveq	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	e022      	b.n	8002b5a <HAL_TIM_PWM_Start+0x6a>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d109      	bne.n	8002b2e <HAL_TIM_PWM_Start+0x3e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	bf14      	ite	ne
 8002b26:	2301      	movne	r3, #1
 8002b28:	2300      	moveq	r3, #0
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	e015      	b.n	8002b5a <HAL_TIM_PWM_Start+0x6a>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d109      	bne.n	8002b48 <HAL_TIM_PWM_Start+0x58>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	bf14      	ite	ne
 8002b40:	2301      	movne	r3, #1
 8002b42:	2300      	moveq	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	e008      	b.n	8002b5a <HAL_TIM_PWM_Start+0x6a>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	bf14      	ite	ne
 8002b54:	2301      	movne	r3, #1
 8002b56:	2300      	moveq	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e068      	b.n	8002c34 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d104      	bne.n	8002b72 <HAL_TIM_PWM_Start+0x82>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b70:	e013      	b.n	8002b9a <HAL_TIM_PWM_Start+0xaa>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d104      	bne.n	8002b82 <HAL_TIM_PWM_Start+0x92>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b80:	e00b      	b.n	8002b9a <HAL_TIM_PWM_Start+0xaa>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d104      	bne.n	8002b92 <HAL_TIM_PWM_Start+0xa2>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b90:	e003      	b.n	8002b9a <HAL_TIM_PWM_Start+0xaa>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2202      	movs	r2, #2
 8002b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	6839      	ldr	r1, [r7, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f001 f910 	bl	8003dc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a23      	ldr	r2, [pc, #140]	@ (8002c3c <HAL_TIM_PWM_Start+0x14c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d107      	bne.n	8002bc2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bc0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a1d      	ldr	r2, [pc, #116]	@ (8002c3c <HAL_TIM_PWM_Start+0x14c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d018      	beq.n	8002bfe <HAL_TIM_PWM_Start+0x10e>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bd4:	d013      	beq.n	8002bfe <HAL_TIM_PWM_Start+0x10e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a19      	ldr	r2, [pc, #100]	@ (8002c40 <HAL_TIM_PWM_Start+0x150>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d00e      	beq.n	8002bfe <HAL_TIM_PWM_Start+0x10e>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a17      	ldr	r2, [pc, #92]	@ (8002c44 <HAL_TIM_PWM_Start+0x154>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d009      	beq.n	8002bfe <HAL_TIM_PWM_Start+0x10e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a16      	ldr	r2, [pc, #88]	@ (8002c48 <HAL_TIM_PWM_Start+0x158>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d004      	beq.n	8002bfe <HAL_TIM_PWM_Start+0x10e>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a14      	ldr	r2, [pc, #80]	@ (8002c4c <HAL_TIM_PWM_Start+0x15c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d111      	bne.n	8002c22 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2b06      	cmp	r3, #6
 8002c0e:	d010      	beq.n	8002c32 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0201 	orr.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c20:	e007      	b.n	8002c32 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f042 0201 	orr.w	r2, r2, #1
 8002c30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40010000 	.word	0x40010000
 8002c40:	40000400 	.word	0x40000400
 8002c44:	40000800 	.word	0x40000800
 8002c48:	40000c00 	.word	0x40000c00
 8002c4c:	40014000 	.word	0x40014000

08002c50 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e041      	b.n	8002ce6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d106      	bne.n	8002c7c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f839 	bl	8002cee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4610      	mov	r0, r2
 8002c90:	f000 fcca 	bl	8003628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
	...

08002d04 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d104      	bne.n	8002d22 <HAL_TIM_IC_Start_IT+0x1e>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	e013      	b.n	8002d4a <HAL_TIM_IC_Start_IT+0x46>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d104      	bne.n	8002d32 <HAL_TIM_IC_Start_IT+0x2e>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	e00b      	b.n	8002d4a <HAL_TIM_IC_Start_IT+0x46>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d104      	bne.n	8002d42 <HAL_TIM_IC_Start_IT+0x3e>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	e003      	b.n	8002d4a <HAL_TIM_IC_Start_IT+0x46>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d104      	bne.n	8002d5c <HAL_TIM_IC_Start_IT+0x58>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	e013      	b.n	8002d84 <HAL_TIM_IC_Start_IT+0x80>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d104      	bne.n	8002d6c <HAL_TIM_IC_Start_IT+0x68>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	e00b      	b.n	8002d84 <HAL_TIM_IC_Start_IT+0x80>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d104      	bne.n	8002d7c <HAL_TIM_IC_Start_IT+0x78>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	e003      	b.n	8002d84 <HAL_TIM_IC_Start_IT+0x80>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d86:	7bbb      	ldrb	r3, [r7, #14]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d102      	bne.n	8002d92 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d8c:	7b7b      	ldrb	r3, [r7, #13]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d001      	beq.n	8002d96 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e0c2      	b.n	8002f1c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d104      	bne.n	8002da6 <HAL_TIM_IC_Start_IT+0xa2>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002da4:	e013      	b.n	8002dce <HAL_TIM_IC_Start_IT+0xca>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b04      	cmp	r3, #4
 8002daa:	d104      	bne.n	8002db6 <HAL_TIM_IC_Start_IT+0xb2>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002db4:	e00b      	b.n	8002dce <HAL_TIM_IC_Start_IT+0xca>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d104      	bne.n	8002dc6 <HAL_TIM_IC_Start_IT+0xc2>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002dc4:	e003      	b.n	8002dce <HAL_TIM_IC_Start_IT+0xca>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d104      	bne.n	8002dde <HAL_TIM_IC_Start_IT+0xda>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ddc:	e013      	b.n	8002e06 <HAL_TIM_IC_Start_IT+0x102>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b04      	cmp	r3, #4
 8002de2:	d104      	bne.n	8002dee <HAL_TIM_IC_Start_IT+0xea>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002dec:	e00b      	b.n	8002e06 <HAL_TIM_IC_Start_IT+0x102>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d104      	bne.n	8002dfe <HAL_TIM_IC_Start_IT+0xfa>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002dfc:	e003      	b.n	8002e06 <HAL_TIM_IC_Start_IT+0x102>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2202      	movs	r2, #2
 8002e02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b0c      	cmp	r3, #12
 8002e0a:	d841      	bhi.n	8002e90 <HAL_TIM_IC_Start_IT+0x18c>
 8002e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e14 <HAL_TIM_IC_Start_IT+0x110>)
 8002e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e12:	bf00      	nop
 8002e14:	08002e49 	.word	0x08002e49
 8002e18:	08002e91 	.word	0x08002e91
 8002e1c:	08002e91 	.word	0x08002e91
 8002e20:	08002e91 	.word	0x08002e91
 8002e24:	08002e5b 	.word	0x08002e5b
 8002e28:	08002e91 	.word	0x08002e91
 8002e2c:	08002e91 	.word	0x08002e91
 8002e30:	08002e91 	.word	0x08002e91
 8002e34:	08002e6d 	.word	0x08002e6d
 8002e38:	08002e91 	.word	0x08002e91
 8002e3c:	08002e91 	.word	0x08002e91
 8002e40:	08002e91 	.word	0x08002e91
 8002e44:	08002e7f 	.word	0x08002e7f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0202 	orr.w	r2, r2, #2
 8002e56:	60da      	str	r2, [r3, #12]
      break;
 8002e58:	e01d      	b.n	8002e96 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f042 0204 	orr.w	r2, r2, #4
 8002e68:	60da      	str	r2, [r3, #12]
      break;
 8002e6a:	e014      	b.n	8002e96 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0208 	orr.w	r2, r2, #8
 8002e7a:	60da      	str	r2, [r3, #12]
      break;
 8002e7c:	e00b      	b.n	8002e96 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0210 	orr.w	r2, r2, #16
 8002e8c:	60da      	str	r2, [r3, #12]
      break;
 8002e8e:	e002      	b.n	8002e96 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]
      break;
 8002e94:	bf00      	nop
  }

  if (status == HAL_OK)
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d13e      	bne.n	8002f1a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	6839      	ldr	r1, [r7, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 ff8f 	bl	8003dc8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a1d      	ldr	r2, [pc, #116]	@ (8002f24 <HAL_TIM_IC_Start_IT+0x220>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d018      	beq.n	8002ee6 <HAL_TIM_IC_Start_IT+0x1e2>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ebc:	d013      	beq.n	8002ee6 <HAL_TIM_IC_Start_IT+0x1e2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a19      	ldr	r2, [pc, #100]	@ (8002f28 <HAL_TIM_IC_Start_IT+0x224>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00e      	beq.n	8002ee6 <HAL_TIM_IC_Start_IT+0x1e2>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a17      	ldr	r2, [pc, #92]	@ (8002f2c <HAL_TIM_IC_Start_IT+0x228>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d009      	beq.n	8002ee6 <HAL_TIM_IC_Start_IT+0x1e2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a16      	ldr	r2, [pc, #88]	@ (8002f30 <HAL_TIM_IC_Start_IT+0x22c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d004      	beq.n	8002ee6 <HAL_TIM_IC_Start_IT+0x1e2>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a14      	ldr	r2, [pc, #80]	@ (8002f34 <HAL_TIM_IC_Start_IT+0x230>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d111      	bne.n	8002f0a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b06      	cmp	r3, #6
 8002ef6:	d010      	beq.n	8002f1a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f08:	e007      	b.n	8002f1a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f042 0201 	orr.w	r2, r2, #1
 8002f18:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40010000 	.word	0x40010000
 8002f28:	40000400 	.word	0x40000400
 8002f2c:	40000800 	.word	0x40000800
 8002f30:	40000c00 	.word	0x40000c00
 8002f34:	40014000 	.word	0x40014000

08002f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d020      	beq.n	8002f9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d01b      	beq.n	8002f9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0202 	mvn.w	r2, #2
 8002f6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7fe f98a 	bl	800129c <HAL_TIM_IC_CaptureCallback>
 8002f88:	e005      	b.n	8002f96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fb2e 	bl	80035ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fb35 	bl	8003600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d020      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01b      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0204 	mvn.w	r2, #4
 8002fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7fe f964 	bl	800129c <HAL_TIM_IC_CaptureCallback>
 8002fd4:	e005      	b.n	8002fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fb08 	bl	80035ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fb0f 	bl	8003600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d020      	beq.n	8003034 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d01b      	beq.n	8003034 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f06f 0208 	mvn.w	r2, #8
 8003004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2204      	movs	r2, #4
 800300a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7fe f93e 	bl	800129c <HAL_TIM_IC_CaptureCallback>
 8003020:	e005      	b.n	800302e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fae2 	bl	80035ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 fae9 	bl	8003600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f003 0310 	and.w	r3, r3, #16
 800303a:	2b00      	cmp	r3, #0
 800303c:	d020      	beq.n	8003080 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	2b00      	cmp	r3, #0
 8003046:	d01b      	beq.n	8003080 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f06f 0210 	mvn.w	r2, #16
 8003050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2208      	movs	r2, #8
 8003056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7fe f918 	bl	800129c <HAL_TIM_IC_CaptureCallback>
 800306c:	e005      	b.n	800307a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fabc 	bl	80035ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 fac3 	bl	8003600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00c      	beq.n	80030a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d007      	beq.n	80030a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f06f 0201 	mvn.w	r2, #1
 800309c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fd fbf0 	bl	8000884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00c      	beq.n	80030c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d007      	beq.n	80030c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80030c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 ff1e 	bl	8003f04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00c      	beq.n	80030ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d007      	beq.n	80030ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 fa94 	bl	8003614 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f003 0320 	and.w	r3, r3, #32
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00c      	beq.n	8003110 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f003 0320 	and.w	r3, r3, #32
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d007      	beq.n	8003110 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0220 	mvn.w	r2, #32
 8003108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fef0 	bl	8003ef0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003110:	bf00      	nop
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003132:	2302      	movs	r3, #2
 8003134:	e088      	b.n	8003248 <HAL_TIM_IC_ConfigChannel+0x130>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d11b      	bne.n	800317c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003154:	f000 fc80 	bl	8003a58 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 020c 	bic.w	r2, r2, #12
 8003166:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6999      	ldr	r1, [r3, #24]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	619a      	str	r2, [r3, #24]
 800317a:	e060      	b.n	800323e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b04      	cmp	r3, #4
 8003180:	d11c      	bne.n	80031bc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003192:	f000 fcf8 	bl	8003b86 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699a      	ldr	r2, [r3, #24]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80031a4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6999      	ldr	r1, [r3, #24]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	021a      	lsls	r2, r3, #8
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	619a      	str	r2, [r3, #24]
 80031ba:	e040      	b.n	800323e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d11b      	bne.n	80031fa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80031d2:	f000 fd45 	bl	8003c60 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	69da      	ldr	r2, [r3, #28]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 020c 	bic.w	r2, r2, #12
 80031e4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	69d9      	ldr	r1, [r3, #28]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	61da      	str	r2, [r3, #28]
 80031f8:	e021      	b.n	800323e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b0c      	cmp	r3, #12
 80031fe:	d11c      	bne.n	800323a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003210:	f000 fd62 	bl	8003cd8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	69da      	ldr	r2, [r3, #28]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003222:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	69d9      	ldr	r1, [r3, #28]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	021a      	lsls	r2, r3, #8
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	61da      	str	r2, [r3, #28]
 8003238:	e001      	b.n	800323e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003246:	7dfb      	ldrb	r3, [r7, #23]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800326a:	2302      	movs	r3, #2
 800326c:	e0ae      	b.n	80033cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b0c      	cmp	r3, #12
 800327a:	f200 809f 	bhi.w	80033bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800327e:	a201      	add	r2, pc, #4	@ (adr r2, 8003284 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003284:	080032b9 	.word	0x080032b9
 8003288:	080033bd 	.word	0x080033bd
 800328c:	080033bd 	.word	0x080033bd
 8003290:	080033bd 	.word	0x080033bd
 8003294:	080032f9 	.word	0x080032f9
 8003298:	080033bd 	.word	0x080033bd
 800329c:	080033bd 	.word	0x080033bd
 80032a0:	080033bd 	.word	0x080033bd
 80032a4:	0800333b 	.word	0x0800333b
 80032a8:	080033bd 	.word	0x080033bd
 80032ac:	080033bd 	.word	0x080033bd
 80032b0:	080033bd 	.word	0x080033bd
 80032b4:	0800337b 	.word	0x0800337b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68b9      	ldr	r1, [r7, #8]
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fa3e 	bl	8003740 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699a      	ldr	r2, [r3, #24]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0208 	orr.w	r2, r2, #8
 80032d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699a      	ldr	r2, [r3, #24]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0204 	bic.w	r2, r2, #4
 80032e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6999      	ldr	r1, [r3, #24]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	619a      	str	r2, [r3, #24]
      break;
 80032f6:	e064      	b.n	80033c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68b9      	ldr	r1, [r7, #8]
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fa84 	bl	800380c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699a      	ldr	r2, [r3, #24]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6999      	ldr	r1, [r3, #24]
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	021a      	lsls	r2, r3, #8
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	619a      	str	r2, [r3, #24]
      break;
 8003338:	e043      	b.n	80033c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68b9      	ldr	r1, [r7, #8]
 8003340:	4618      	mov	r0, r3
 8003342:	f000 facf 	bl	80038e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69da      	ldr	r2, [r3, #28]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 0208 	orr.w	r2, r2, #8
 8003354:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69da      	ldr	r2, [r3, #28]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0204 	bic.w	r2, r2, #4
 8003364:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69d9      	ldr	r1, [r3, #28]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	61da      	str	r2, [r3, #28]
      break;
 8003378:	e023      	b.n	80033c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68b9      	ldr	r1, [r7, #8]
 8003380:	4618      	mov	r0, r3
 8003382:	f000 fb19 	bl	80039b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69da      	ldr	r2, [r3, #28]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69da      	ldr	r2, [r3, #28]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69d9      	ldr	r1, [r3, #28]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	021a      	lsls	r2, r3, #8
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	61da      	str	r2, [r3, #28]
      break;
 80033ba:	e002      	b.n	80033c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	75fb      	strb	r3, [r7, #23]
      break;
 80033c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <HAL_TIM_ConfigClockSource+0x1c>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e0b4      	b.n	800355a <HAL_TIM_ConfigClockSource+0x186>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800340e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003416:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003428:	d03e      	beq.n	80034a8 <HAL_TIM_ConfigClockSource+0xd4>
 800342a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800342e:	f200 8087 	bhi.w	8003540 <HAL_TIM_ConfigClockSource+0x16c>
 8003432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003436:	f000 8086 	beq.w	8003546 <HAL_TIM_ConfigClockSource+0x172>
 800343a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800343e:	d87f      	bhi.n	8003540 <HAL_TIM_ConfigClockSource+0x16c>
 8003440:	2b70      	cmp	r3, #112	@ 0x70
 8003442:	d01a      	beq.n	800347a <HAL_TIM_ConfigClockSource+0xa6>
 8003444:	2b70      	cmp	r3, #112	@ 0x70
 8003446:	d87b      	bhi.n	8003540 <HAL_TIM_ConfigClockSource+0x16c>
 8003448:	2b60      	cmp	r3, #96	@ 0x60
 800344a:	d050      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0x11a>
 800344c:	2b60      	cmp	r3, #96	@ 0x60
 800344e:	d877      	bhi.n	8003540 <HAL_TIM_ConfigClockSource+0x16c>
 8003450:	2b50      	cmp	r3, #80	@ 0x50
 8003452:	d03c      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0xfa>
 8003454:	2b50      	cmp	r3, #80	@ 0x50
 8003456:	d873      	bhi.n	8003540 <HAL_TIM_ConfigClockSource+0x16c>
 8003458:	2b40      	cmp	r3, #64	@ 0x40
 800345a:	d058      	beq.n	800350e <HAL_TIM_ConfigClockSource+0x13a>
 800345c:	2b40      	cmp	r3, #64	@ 0x40
 800345e:	d86f      	bhi.n	8003540 <HAL_TIM_ConfigClockSource+0x16c>
 8003460:	2b30      	cmp	r3, #48	@ 0x30
 8003462:	d064      	beq.n	800352e <HAL_TIM_ConfigClockSource+0x15a>
 8003464:	2b30      	cmp	r3, #48	@ 0x30
 8003466:	d86b      	bhi.n	8003540 <HAL_TIM_ConfigClockSource+0x16c>
 8003468:	2b20      	cmp	r3, #32
 800346a:	d060      	beq.n	800352e <HAL_TIM_ConfigClockSource+0x15a>
 800346c:	2b20      	cmp	r3, #32
 800346e:	d867      	bhi.n	8003540 <HAL_TIM_ConfigClockSource+0x16c>
 8003470:	2b00      	cmp	r3, #0
 8003472:	d05c      	beq.n	800352e <HAL_TIM_ConfigClockSource+0x15a>
 8003474:	2b10      	cmp	r3, #16
 8003476:	d05a      	beq.n	800352e <HAL_TIM_ConfigClockSource+0x15a>
 8003478:	e062      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800348a:	f000 fc7d 	bl	8003d88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800349c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	609a      	str	r2, [r3, #8]
      break;
 80034a6:	e04f      	b.n	8003548 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034b8:	f000 fc66 	bl	8003d88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034ca:	609a      	str	r2, [r3, #8]
      break;
 80034cc:	e03c      	b.n	8003548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034da:	461a      	mov	r2, r3
 80034dc:	f000 fb24 	bl	8003b28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2150      	movs	r1, #80	@ 0x50
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fc33 	bl	8003d52 <TIM_ITRx_SetConfig>
      break;
 80034ec:	e02c      	b.n	8003548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034fa:	461a      	mov	r2, r3
 80034fc:	f000 fb80 	bl	8003c00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2160      	movs	r1, #96	@ 0x60
 8003506:	4618      	mov	r0, r3
 8003508:	f000 fc23 	bl	8003d52 <TIM_ITRx_SetConfig>
      break;
 800350c:	e01c      	b.n	8003548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800351a:	461a      	mov	r2, r3
 800351c:	f000 fb04 	bl	8003b28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2140      	movs	r1, #64	@ 0x40
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fc13 	bl	8003d52 <TIM_ITRx_SetConfig>
      break;
 800352c:	e00c      	b.n	8003548 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4619      	mov	r1, r3
 8003538:	4610      	mov	r0, r2
 800353a:	f000 fc0a 	bl	8003d52 <TIM_ITRx_SetConfig>
      break;
 800353e:	e003      	b.n	8003548 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	73fb      	strb	r3, [r7, #15]
      break;
 8003544:	e000      	b.n	8003548 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003546:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003558:	7bfb      	ldrb	r3, [r7, #15]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800356e:	2300      	movs	r3, #0
 8003570:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b0c      	cmp	r3, #12
 8003576:	d831      	bhi.n	80035dc <HAL_TIM_ReadCapturedValue+0x78>
 8003578:	a201      	add	r2, pc, #4	@ (adr r2, 8003580 <HAL_TIM_ReadCapturedValue+0x1c>)
 800357a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357e:	bf00      	nop
 8003580:	080035b5 	.word	0x080035b5
 8003584:	080035dd 	.word	0x080035dd
 8003588:	080035dd 	.word	0x080035dd
 800358c:	080035dd 	.word	0x080035dd
 8003590:	080035bf 	.word	0x080035bf
 8003594:	080035dd 	.word	0x080035dd
 8003598:	080035dd 	.word	0x080035dd
 800359c:	080035dd 	.word	0x080035dd
 80035a0:	080035c9 	.word	0x080035c9
 80035a4:	080035dd 	.word	0x080035dd
 80035a8:	080035dd 	.word	0x080035dd
 80035ac:	080035dd 	.word	0x080035dd
 80035b0:	080035d3 	.word	0x080035d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ba:	60fb      	str	r3, [r7, #12]

      break;
 80035bc:	e00f      	b.n	80035de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c4:	60fb      	str	r3, [r7, #12]

      break;
 80035c6:	e00a      	b.n	80035de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ce:	60fb      	str	r3, [r7, #12]

      break;
 80035d0:	e005      	b.n	80035de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d8:	60fb      	str	r3, [r7, #12]

      break;
 80035da:	e000      	b.n	80035de <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80035dc:	bf00      	nop
  }

  return tmpreg;
 80035de:	68fb      	ldr	r3, [r7, #12]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a3a      	ldr	r2, [pc, #232]	@ (8003724 <TIM_Base_SetConfig+0xfc>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d00f      	beq.n	8003660 <TIM_Base_SetConfig+0x38>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003646:	d00b      	beq.n	8003660 <TIM_Base_SetConfig+0x38>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a37      	ldr	r2, [pc, #220]	@ (8003728 <TIM_Base_SetConfig+0x100>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d007      	beq.n	8003660 <TIM_Base_SetConfig+0x38>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a36      	ldr	r2, [pc, #216]	@ (800372c <TIM_Base_SetConfig+0x104>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d003      	beq.n	8003660 <TIM_Base_SetConfig+0x38>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a35      	ldr	r2, [pc, #212]	@ (8003730 <TIM_Base_SetConfig+0x108>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d108      	bne.n	8003672 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a2b      	ldr	r2, [pc, #172]	@ (8003724 <TIM_Base_SetConfig+0xfc>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d01b      	beq.n	80036b2 <TIM_Base_SetConfig+0x8a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003680:	d017      	beq.n	80036b2 <TIM_Base_SetConfig+0x8a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a28      	ldr	r2, [pc, #160]	@ (8003728 <TIM_Base_SetConfig+0x100>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d013      	beq.n	80036b2 <TIM_Base_SetConfig+0x8a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a27      	ldr	r2, [pc, #156]	@ (800372c <TIM_Base_SetConfig+0x104>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d00f      	beq.n	80036b2 <TIM_Base_SetConfig+0x8a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a26      	ldr	r2, [pc, #152]	@ (8003730 <TIM_Base_SetConfig+0x108>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d00b      	beq.n	80036b2 <TIM_Base_SetConfig+0x8a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a25      	ldr	r2, [pc, #148]	@ (8003734 <TIM_Base_SetConfig+0x10c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d007      	beq.n	80036b2 <TIM_Base_SetConfig+0x8a>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a24      	ldr	r2, [pc, #144]	@ (8003738 <TIM_Base_SetConfig+0x110>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d003      	beq.n	80036b2 <TIM_Base_SetConfig+0x8a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a23      	ldr	r2, [pc, #140]	@ (800373c <TIM_Base_SetConfig+0x114>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d108      	bne.n	80036c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a0e      	ldr	r2, [pc, #56]	@ (8003724 <TIM_Base_SetConfig+0xfc>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d103      	bne.n	80036f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	691a      	ldr	r2, [r3, #16]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b01      	cmp	r3, #1
 8003708:	d105      	bne.n	8003716 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f023 0201 	bic.w	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	611a      	str	r2, [r3, #16]
  }
}
 8003716:	bf00      	nop
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	40010000 	.word	0x40010000
 8003728:	40000400 	.word	0x40000400
 800372c:	40000800 	.word	0x40000800
 8003730:	40000c00 	.word	0x40000c00
 8003734:	40014000 	.word	0x40014000
 8003738:	40014400 	.word	0x40014400
 800373c:	40014800 	.word	0x40014800

08003740 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003740:	b480      	push	{r7}
 8003742:	b087      	sub	sp, #28
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	f023 0201 	bic.w	r2, r3, #1
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800376e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 0303 	bic.w	r3, r3, #3
 8003776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f023 0302 	bic.w	r3, r3, #2
 8003788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	4313      	orrs	r3, r2
 8003792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a1c      	ldr	r2, [pc, #112]	@ (8003808 <TIM_OC1_SetConfig+0xc8>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d10c      	bne.n	80037b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f023 0308 	bic.w	r3, r3, #8
 80037a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f023 0304 	bic.w	r3, r3, #4
 80037b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a13      	ldr	r2, [pc, #76]	@ (8003808 <TIM_OC1_SetConfig+0xc8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d111      	bne.n	80037e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80037cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4313      	orrs	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	621a      	str	r2, [r3, #32]
}
 80037fc:	bf00      	nop
 80037fe:	371c      	adds	r7, #28
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	40010000 	.word	0x40010000

0800380c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	f023 0210 	bic.w	r2, r3, #16
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800383a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	021b      	lsls	r3, r3, #8
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	4313      	orrs	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f023 0320 	bic.w	r3, r3, #32
 8003856:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	4313      	orrs	r3, r2
 8003862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a1e      	ldr	r2, [pc, #120]	@ (80038e0 <TIM_OC2_SetConfig+0xd4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d10d      	bne.n	8003888 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003872:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4313      	orrs	r3, r2
 800387e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003886:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a15      	ldr	r2, [pc, #84]	@ (80038e0 <TIM_OC2_SetConfig+0xd4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d113      	bne.n	80038b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003896:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800389e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	621a      	str	r2, [r3, #32]
}
 80038d2:	bf00      	nop
 80038d4:	371c      	adds	r7, #28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40010000 	.word	0x40010000

080038e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 0303 	bic.w	r3, r3, #3
 800391a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800392c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	021b      	lsls	r3, r3, #8
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	4313      	orrs	r3, r2
 8003938:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a1d      	ldr	r2, [pc, #116]	@ (80039b4 <TIM_OC3_SetConfig+0xd0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d10d      	bne.n	800395e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003948:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	021b      	lsls	r3, r3, #8
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	4313      	orrs	r3, r2
 8003954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800395c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a14      	ldr	r2, [pc, #80]	@ (80039b4 <TIM_OC3_SetConfig+0xd0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d113      	bne.n	800398e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800396c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	621a      	str	r2, [r3, #32]
}
 80039a8:	bf00      	nop
 80039aa:	371c      	adds	r7, #28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	40010000 	.word	0x40010000

080039b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	021b      	lsls	r3, r3, #8
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	031b      	lsls	r3, r3, #12
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a10      	ldr	r2, [pc, #64]	@ (8003a54 <TIM_OC4_SetConfig+0x9c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d109      	bne.n	8003a2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	019b      	lsls	r3, r3, #6
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	621a      	str	r2, [r3, #32]
}
 8003a46:	bf00      	nop
 8003a48:	371c      	adds	r7, #28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40010000 	.word	0x40010000

08003a58 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	f023 0201 	bic.w	r2, r3, #1
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	4a24      	ldr	r2, [pc, #144]	@ (8003b14 <TIM_TI1_SetConfig+0xbc>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d013      	beq.n	8003aae <TIM_TI1_SetConfig+0x56>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a8c:	d00f      	beq.n	8003aae <TIM_TI1_SetConfig+0x56>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4a21      	ldr	r2, [pc, #132]	@ (8003b18 <TIM_TI1_SetConfig+0xc0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00b      	beq.n	8003aae <TIM_TI1_SetConfig+0x56>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4a20      	ldr	r2, [pc, #128]	@ (8003b1c <TIM_TI1_SetConfig+0xc4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d007      	beq.n	8003aae <TIM_TI1_SetConfig+0x56>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4a1f      	ldr	r2, [pc, #124]	@ (8003b20 <TIM_TI1_SetConfig+0xc8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d003      	beq.n	8003aae <TIM_TI1_SetConfig+0x56>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4a1e      	ldr	r2, [pc, #120]	@ (8003b24 <TIM_TI1_SetConfig+0xcc>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d101      	bne.n	8003ab2 <TIM_TI1_SetConfig+0x5a>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <TIM_TI1_SetConfig+0x5c>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d008      	beq.n	8003aca <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f023 0303 	bic.w	r3, r3, #3
 8003abe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	e003      	b.n	8003ad2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ad8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f023 030a 	bic.w	r3, r3, #10
 8003aec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f003 030a 	and.w	r3, r3, #10
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	621a      	str	r2, [r3, #32]
}
 8003b06:	bf00      	nop
 8003b08:	371c      	adds	r7, #28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40010000 	.word	0x40010000
 8003b18:	40000400 	.word	0x40000400
 8003b1c:	40000800 	.word	0x40000800
 8003b20:	40000c00 	.word	0x40000c00
 8003b24:	40014000 	.word	0x40014000

08003b28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	f023 0201 	bic.w	r2, r3, #1
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	011b      	lsls	r3, r3, #4
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f023 030a 	bic.w	r3, r3, #10
 8003b64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	621a      	str	r2, [r3, #32]
}
 8003b7a:	bf00      	nop
 8003b7c:	371c      	adds	r7, #28
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b087      	sub	sp, #28
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	607a      	str	r2, [r7, #4]
 8003b92:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	f023 0210 	bic.w	r2, r3, #16
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	021b      	lsls	r3, r3, #8
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003bc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	031b      	lsls	r3, r3, #12
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003bd8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	621a      	str	r2, [r3, #32]
}
 8003bf4:	bf00      	nop
 8003bf6:	371c      	adds	r7, #28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	f023 0210 	bic.w	r2, r3, #16
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	031b      	lsls	r3, r3, #12
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c3c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	621a      	str	r2, [r3, #32]
}
 8003c54:	bf00      	nop
 8003c56:	371c      	adds	r7, #28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f023 0303 	bic.w	r3, r3, #3
 8003c8c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c9c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003cb0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	021b      	lsls	r3, r3, #8
 8003cb6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	621a      	str	r2, [r3, #32]
}
 8003ccc:	bf00      	nop
 8003cce:	371c      	adds	r7, #28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
 8003ce4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d04:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	021b      	lsls	r3, r3, #8
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d16:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	031b      	lsls	r3, r3, #12
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003d2a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	031b      	lsls	r3, r3, #12
 8003d30:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	621a      	str	r2, [r3, #32]
}
 8003d46:	bf00      	nop
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b085      	sub	sp, #20
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f043 0307 	orr.w	r3, r3, #7
 8003d74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	609a      	str	r2, [r3, #8]
}
 8003d7c:	bf00      	nop
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003da2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	021a      	lsls	r2, r3, #8
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	609a      	str	r2, [r3, #8]
}
 8003dbc:	bf00      	nop
 8003dbe:	371c      	adds	r7, #28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	2201      	movs	r2, #1
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a1a      	ldr	r2, [r3, #32]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	43db      	mvns	r3, r3
 8003dea:	401a      	ands	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a1a      	ldr	r2, [r3, #32]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003e00:	431a      	orrs	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	621a      	str	r2, [r3, #32]
}
 8003e06:	bf00      	nop
 8003e08:	371c      	adds	r7, #28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
	...

08003e14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e050      	b.n	8003ece <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a1c      	ldr	r2, [pc, #112]	@ (8003edc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d018      	beq.n	8003ea2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e78:	d013      	beq.n	8003ea2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a18      	ldr	r2, [pc, #96]	@ (8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d00e      	beq.n	8003ea2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a16      	ldr	r2, [pc, #88]	@ (8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d009      	beq.n	8003ea2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a15      	ldr	r2, [pc, #84]	@ (8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d004      	beq.n	8003ea2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a13      	ldr	r2, [pc, #76]	@ (8003eec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d10c      	bne.n	8003ebc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ea8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40010000 	.word	0x40010000
 8003ee0:	40000400 	.word	0x40000400
 8003ee4:	40000800 	.word	0x40000800
 8003ee8:	40000c00 	.word	0x40000c00
 8003eec:	40014000 	.word	0x40014000

08003ef0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e042      	b.n	8003fb0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d106      	bne.n	8003f44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fd fbf8 	bl	8001734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2224      	movs	r2, #36	@ 0x24
 8003f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 fcdb 	bl	8004918 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695a      	ldr	r2, [r3, #20]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	d112      	bne.n	8003ff8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <HAL_UART_Receive_IT+0x26>
 8003fd8:	88fb      	ldrh	r3, [r7, #6]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e00b      	b.n	8003ffa <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003fe8:	88fb      	ldrh	r3, [r7, #6]
 8003fea:	461a      	mov	r2, r3
 8003fec:	68b9      	ldr	r1, [r7, #8]
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 faba 	bl	8004568 <UART_Start_Receive_IT>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	e000      	b.n	8003ffa <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003ff8:	2302      	movs	r3, #2
  }
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b0ba      	sub	sp, #232	@ 0xe8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800402a:	2300      	movs	r3, #0
 800402c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004030:	2300      	movs	r3, #0
 8004032:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004042:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10f      	bne.n	800406a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800404a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	2b00      	cmp	r3, #0
 8004054:	d009      	beq.n	800406a <HAL_UART_IRQHandler+0x66>
 8004056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800405a:	f003 0320 	and.w	r3, r3, #32
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fb99 	bl	800479a <UART_Receive_IT>
      return;
 8004068:	e25b      	b.n	8004522 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800406a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 80de 	beq.w	8004230 <HAL_UART_IRQHandler+0x22c>
 8004074:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d106      	bne.n	800408e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004084:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 80d1 	beq.w	8004230 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800408e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00b      	beq.n	80040b2 <HAL_UART_IRQHandler+0xae>
 800409a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800409e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d005      	beq.n	80040b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040aa:	f043 0201 	orr.w	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00b      	beq.n	80040d6 <HAL_UART_IRQHandler+0xd2>
 80040be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ce:	f043 0202 	orr.w	r2, r3, #2
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00b      	beq.n	80040fa <HAL_UART_IRQHandler+0xf6>
 80040e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d005      	beq.n	80040fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f2:	f043 0204 	orr.w	r2, r3, #4
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040fe:	f003 0308 	and.w	r3, r3, #8
 8004102:	2b00      	cmp	r3, #0
 8004104:	d011      	beq.n	800412a <HAL_UART_IRQHandler+0x126>
 8004106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	2b00      	cmp	r3, #0
 8004110:	d105      	bne.n	800411e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d005      	beq.n	800412a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004122:	f043 0208 	orr.w	r2, r3, #8
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 81f2 	beq.w	8004518 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004138:	f003 0320 	and.w	r3, r3, #32
 800413c:	2b00      	cmp	r3, #0
 800413e:	d008      	beq.n	8004152 <HAL_UART_IRQHandler+0x14e>
 8004140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004144:	f003 0320 	and.w	r3, r3, #32
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 fb24 	bl	800479a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800415c:	2b40      	cmp	r3, #64	@ 0x40
 800415e:	bf0c      	ite	eq
 8004160:	2301      	moveq	r3, #1
 8004162:	2300      	movne	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b00      	cmp	r3, #0
 8004174:	d103      	bne.n	800417e <HAL_UART_IRQHandler+0x17a>
 8004176:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800417a:	2b00      	cmp	r3, #0
 800417c:	d04f      	beq.n	800421e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fa2c 	bl	80045dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800418e:	2b40      	cmp	r3, #64	@ 0x40
 8004190:	d141      	bne.n	8004216 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3314      	adds	r3, #20
 8004198:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80041a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3314      	adds	r3, #20
 80041ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80041be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80041c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80041ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80041ce:	e841 2300 	strex	r3, r2, [r1]
 80041d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80041d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1d9      	bne.n	8004192 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d013      	beq.n	800420e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ea:	4a7e      	ldr	r2, [pc, #504]	@ (80043e4 <HAL_UART_IRQHandler+0x3e0>)
 80041ec:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fd fcf0 	bl	8001bd8 <HAL_DMA_Abort_IT>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d016      	beq.n	800422c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004208:	4610      	mov	r0, r2
 800420a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800420c:	e00e      	b.n	800422c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f994 	bl	800453c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004214:	e00a      	b.n	800422c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f990 	bl	800453c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800421c:	e006      	b.n	800422c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f98c 	bl	800453c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800422a:	e175      	b.n	8004518 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800422c:	bf00      	nop
    return;
 800422e:	e173      	b.n	8004518 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004234:	2b01      	cmp	r3, #1
 8004236:	f040 814f 	bne.w	80044d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800423a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800423e:	f003 0310 	and.w	r3, r3, #16
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 8148 	beq.w	80044d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800424c:	f003 0310 	and.w	r3, r3, #16
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 8141 	beq.w	80044d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004256:	2300      	movs	r3, #0
 8004258:	60bb      	str	r3, [r7, #8]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60bb      	str	r3, [r7, #8]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	60bb      	str	r3, [r7, #8]
 800426a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004276:	2b40      	cmp	r3, #64	@ 0x40
 8004278:	f040 80b6 	bne.w	80043e8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004288:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 8145 	beq.w	800451c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004296:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800429a:	429a      	cmp	r2, r3
 800429c:	f080 813e 	bcs.w	800451c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042b2:	f000 8088 	beq.w	80043c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	330c      	adds	r3, #12
 80042bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042c4:	e853 3f00 	ldrex	r3, [r3]
 80042c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80042cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	330c      	adds	r3, #12
 80042de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80042e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80042ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80042fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1d9      	bne.n	80042b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3314      	adds	r3, #20
 8004308:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800430c:	e853 3f00 	ldrex	r3, [r3]
 8004310:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004312:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004314:	f023 0301 	bic.w	r3, r3, #1
 8004318:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3314      	adds	r3, #20
 8004322:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004326:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800432a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800432e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004332:	e841 2300 	strex	r3, r2, [r1]
 8004336:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004338:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1e1      	bne.n	8004302 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3314      	adds	r3, #20
 8004344:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004346:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004348:	e853 3f00 	ldrex	r3, [r3]
 800434c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800434e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004350:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004354:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	3314      	adds	r3, #20
 800435e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004362:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004364:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004366:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004368:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800436a:	e841 2300 	strex	r3, r2, [r1]
 800436e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004370:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1e3      	bne.n	800433e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2220      	movs	r2, #32
 800437a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	330c      	adds	r3, #12
 800438a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800438e:	e853 3f00 	ldrex	r3, [r3]
 8004392:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004394:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004396:	f023 0310 	bic.w	r3, r3, #16
 800439a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	330c      	adds	r3, #12
 80043a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80043a8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80043aa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043b0:	e841 2300 	strex	r3, r2, [r1]
 80043b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80043b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1e3      	bne.n	8004384 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7fd fb99 	bl	8001af8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2202      	movs	r2, #2
 80043ca:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	b29b      	uxth	r3, r3
 80043da:	4619      	mov	r1, r3
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f8b7 	bl	8004550 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043e2:	e09b      	b.n	800451c <HAL_UART_IRQHandler+0x518>
 80043e4:	080046a3 	.word	0x080046a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 808e 	beq.w	8004520 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004404:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8089 	beq.w	8004520 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	330c      	adds	r3, #12
 8004414:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004418:	e853 3f00 	ldrex	r3, [r3]
 800441c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800441e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004420:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004424:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	330c      	adds	r3, #12
 800442e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004432:	647a      	str	r2, [r7, #68]	@ 0x44
 8004434:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004436:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004438:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800443a:	e841 2300 	strex	r3, r2, [r1]
 800443e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1e3      	bne.n	800440e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	3314      	adds	r3, #20
 800444c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004450:	e853 3f00 	ldrex	r3, [r3]
 8004454:	623b      	str	r3, [r7, #32]
   return(result);
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	f023 0301 	bic.w	r3, r3, #1
 800445c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	3314      	adds	r3, #20
 8004466:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800446a:	633a      	str	r2, [r7, #48]	@ 0x30
 800446c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004470:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004472:	e841 2300 	strex	r3, r2, [r1]
 8004476:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1e3      	bne.n	8004446 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	330c      	adds	r3, #12
 8004492:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	e853 3f00 	ldrex	r3, [r3]
 800449a:	60fb      	str	r3, [r7, #12]
   return(result);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0310 	bic.w	r3, r3, #16
 80044a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	330c      	adds	r3, #12
 80044ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80044b0:	61fa      	str	r2, [r7, #28]
 80044b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	69b9      	ldr	r1, [r7, #24]
 80044b6:	69fa      	ldr	r2, [r7, #28]
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	617b      	str	r3, [r7, #20]
   return(result);
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e3      	bne.n	800448c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044ce:	4619      	mov	r1, r3
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f83d 	bl	8004550 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044d6:	e023      	b.n	8004520 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d009      	beq.n	80044f8 <HAL_UART_IRQHandler+0x4f4>
 80044e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f8ea 	bl	80046ca <UART_Transmit_IT>
    return;
 80044f6:	e014      	b.n	8004522 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00e      	beq.n	8004522 <HAL_UART_IRQHandler+0x51e>
 8004504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800450c:	2b00      	cmp	r3, #0
 800450e:	d008      	beq.n	8004522 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f92a 	bl	800476a <UART_EndTransmit_IT>
    return;
 8004516:	e004      	b.n	8004522 <HAL_UART_IRQHandler+0x51e>
    return;
 8004518:	bf00      	nop
 800451a:	e002      	b.n	8004522 <HAL_UART_IRQHandler+0x51e>
      return;
 800451c:	bf00      	nop
 800451e:	e000      	b.n	8004522 <HAL_UART_IRQHandler+0x51e>
      return;
 8004520:	bf00      	nop
  }
}
 8004522:	37e8      	adds	r7, #232	@ 0xe8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	460b      	mov	r3, r1
 800455a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	4613      	mov	r3, r2
 8004574:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	88fa      	ldrh	r2, [r7, #6]
 8004580:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	88fa      	ldrh	r2, [r7, #6]
 8004586:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2222      	movs	r2, #34	@ 0x22
 8004592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d007      	beq.n	80045ae <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045ac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695a      	ldr	r2, [r3, #20]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f042 0201 	orr.w	r2, r2, #1
 80045bc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f042 0220 	orr.w	r2, r2, #32
 80045cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045dc:	b480      	push	{r7}
 80045de:	b095      	sub	sp, #84	@ 0x54
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	330c      	adds	r3, #12
 80045ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ee:	e853 3f00 	ldrex	r3, [r3]
 80045f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	330c      	adds	r3, #12
 8004602:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004604:	643a      	str	r2, [r7, #64]	@ 0x40
 8004606:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004608:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800460a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800460c:	e841 2300 	strex	r3, r2, [r1]
 8004610:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1e5      	bne.n	80045e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3314      	adds	r3, #20
 800461e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	e853 3f00 	ldrex	r3, [r3]
 8004626:	61fb      	str	r3, [r7, #28]
   return(result);
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f023 0301 	bic.w	r3, r3, #1
 800462e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3314      	adds	r3, #20
 8004636:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004638:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800463a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800463e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004640:	e841 2300 	strex	r3, r2, [r1]
 8004644:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1e5      	bne.n	8004618 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004650:	2b01      	cmp	r3, #1
 8004652:	d119      	bne.n	8004688 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	330c      	adds	r3, #12
 800465a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	e853 3f00 	ldrex	r3, [r3]
 8004662:	60bb      	str	r3, [r7, #8]
   return(result);
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f023 0310 	bic.w	r3, r3, #16
 800466a:	647b      	str	r3, [r7, #68]	@ 0x44
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	330c      	adds	r3, #12
 8004672:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004674:	61ba      	str	r2, [r7, #24]
 8004676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004678:	6979      	ldr	r1, [r7, #20]
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	e841 2300 	strex	r3, r2, [r1]
 8004680:	613b      	str	r3, [r7, #16]
   return(result);
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1e5      	bne.n	8004654 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004696:	bf00      	nop
 8004698:	3754      	adds	r7, #84	@ 0x54
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b084      	sub	sp, #16
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f7ff ff3d 	bl	800453c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046c2:	bf00      	nop
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b085      	sub	sp, #20
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b21      	cmp	r3, #33	@ 0x21
 80046dc:	d13e      	bne.n	800475c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046e6:	d114      	bne.n	8004712 <UART_Transmit_IT+0x48>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d110      	bne.n	8004712 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	461a      	mov	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004704:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	1c9a      	adds	r2, r3, #2
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	621a      	str	r2, [r3, #32]
 8004710:	e008      	b.n	8004724 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	1c59      	adds	r1, r3, #1
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6211      	str	r1, [r2, #32]
 800471c:	781a      	ldrb	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004728:	b29b      	uxth	r3, r3
 800472a:	3b01      	subs	r3, #1
 800472c:	b29b      	uxth	r3, r3
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	4619      	mov	r1, r3
 8004732:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10f      	bne.n	8004758 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004746:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004756:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	e000      	b.n	800475e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800475c:	2302      	movs	r3, #2
  }
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b082      	sub	sp, #8
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004780:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2220      	movs	r2, #32
 8004786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff fecc 	bl	8004528 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b08c      	sub	sp, #48	@ 0x30
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b22      	cmp	r3, #34	@ 0x22
 80047ac:	f040 80ae 	bne.w	800490c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047b8:	d117      	bne.n	80047ea <UART_Receive_IT+0x50>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d113      	bne.n	80047ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d8:	b29a      	uxth	r2, r3
 80047da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e2:	1c9a      	adds	r2, r3, #2
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80047e8:	e026      	b.n	8004838 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80047f0:	2300      	movs	r3, #0
 80047f2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047fc:	d007      	beq.n	800480e <UART_Receive_IT+0x74>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10a      	bne.n	800481c <UART_Receive_IT+0x82>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d106      	bne.n	800481c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	b2da      	uxtb	r2, r3
 8004816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004818:	701a      	strb	r2, [r3, #0]
 800481a:	e008      	b.n	800482e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	b2db      	uxtb	r3, r3
 8004824:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004828:	b2da      	uxtb	r2, r3
 800482a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800482c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800483c:	b29b      	uxth	r3, r3
 800483e:	3b01      	subs	r3, #1
 8004840:	b29b      	uxth	r3, r3
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	4619      	mov	r1, r3
 8004846:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004848:	2b00      	cmp	r3, #0
 800484a:	d15d      	bne.n	8004908 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0220 	bic.w	r2, r2, #32
 800485a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800486a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	695a      	ldr	r2, [r3, #20]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0201 	bic.w	r2, r2, #1
 800487a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2220      	movs	r2, #32
 8004880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800488e:	2b01      	cmp	r3, #1
 8004890:	d135      	bne.n	80048fe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	330c      	adds	r3, #12
 800489e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	e853 3f00 	ldrex	r3, [r3]
 80048a6:	613b      	str	r3, [r7, #16]
   return(result);
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f023 0310 	bic.w	r3, r3, #16
 80048ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	330c      	adds	r3, #12
 80048b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048b8:	623a      	str	r2, [r7, #32]
 80048ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048bc:	69f9      	ldr	r1, [r7, #28]
 80048be:	6a3a      	ldr	r2, [r7, #32]
 80048c0:	e841 2300 	strex	r3, r2, [r1]
 80048c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1e5      	bne.n	8004898 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0310 	and.w	r3, r3, #16
 80048d6:	2b10      	cmp	r3, #16
 80048d8:	d10a      	bne.n	80048f0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048f4:	4619      	mov	r1, r3
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7ff fe2a 	bl	8004550 <HAL_UARTEx_RxEventCallback>
 80048fc:	e002      	b.n	8004904 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7fb ff00 	bl	8000704 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004904:	2300      	movs	r3, #0
 8004906:	e002      	b.n	800490e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	e000      	b.n	800490e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800490c:	2302      	movs	r3, #2
  }
}
 800490e:	4618      	mov	r0, r3
 8004910:	3730      	adds	r7, #48	@ 0x30
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800491c:	b0c0      	sub	sp, #256	@ 0x100
 800491e:	af00      	add	r7, sp, #0
 8004920:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004934:	68d9      	ldr	r1, [r3, #12]
 8004936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	ea40 0301 	orr.w	r3, r0, r1
 8004940:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	431a      	orrs	r2, r3
 8004950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	431a      	orrs	r2, r3
 8004958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004970:	f021 010c 	bic.w	r1, r1, #12
 8004974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800497e:	430b      	orrs	r3, r1
 8004980:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800498e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004992:	6999      	ldr	r1, [r3, #24]
 8004994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	ea40 0301 	orr.w	r3, r0, r1
 800499e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	4b8f      	ldr	r3, [pc, #572]	@ (8004be4 <UART_SetConfig+0x2cc>)
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d005      	beq.n	80049b8 <UART_SetConfig+0xa0>
 80049ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	4b8d      	ldr	r3, [pc, #564]	@ (8004be8 <UART_SetConfig+0x2d0>)
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d104      	bne.n	80049c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049b8:	f7fd ff52 	bl	8002860 <HAL_RCC_GetPCLK2Freq>
 80049bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80049c0:	e003      	b.n	80049ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049c2:	f7fd ff39 	bl	8002838 <HAL_RCC_GetPCLK1Freq>
 80049c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ce:	69db      	ldr	r3, [r3, #28]
 80049d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049d4:	f040 810c 	bne.w	8004bf0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049dc:	2200      	movs	r2, #0
 80049de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80049e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80049e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80049ea:	4622      	mov	r2, r4
 80049ec:	462b      	mov	r3, r5
 80049ee:	1891      	adds	r1, r2, r2
 80049f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80049f2:	415b      	adcs	r3, r3
 80049f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80049fa:	4621      	mov	r1, r4
 80049fc:	eb12 0801 	adds.w	r8, r2, r1
 8004a00:	4629      	mov	r1, r5
 8004a02:	eb43 0901 	adc.w	r9, r3, r1
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	f04f 0300 	mov.w	r3, #0
 8004a0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a1a:	4690      	mov	r8, r2
 8004a1c:	4699      	mov	r9, r3
 8004a1e:	4623      	mov	r3, r4
 8004a20:	eb18 0303 	adds.w	r3, r8, r3
 8004a24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a28:	462b      	mov	r3, r5
 8004a2a:	eb49 0303 	adc.w	r3, r9, r3
 8004a2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004a42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a46:	460b      	mov	r3, r1
 8004a48:	18db      	adds	r3, r3, r3
 8004a4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	eb42 0303 	adc.w	r3, r2, r3
 8004a52:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004a58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004a5c:	f7fb fbc0 	bl	80001e0 <__aeabi_uldivmod>
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	4b61      	ldr	r3, [pc, #388]	@ (8004bec <UART_SetConfig+0x2d4>)
 8004a66:	fba3 2302 	umull	r2, r3, r3, r2
 8004a6a:	095b      	lsrs	r3, r3, #5
 8004a6c:	011c      	lsls	r4, r3, #4
 8004a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a72:	2200      	movs	r2, #0
 8004a74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a78:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004a7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004a80:	4642      	mov	r2, r8
 8004a82:	464b      	mov	r3, r9
 8004a84:	1891      	adds	r1, r2, r2
 8004a86:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004a88:	415b      	adcs	r3, r3
 8004a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a90:	4641      	mov	r1, r8
 8004a92:	eb12 0a01 	adds.w	sl, r2, r1
 8004a96:	4649      	mov	r1, r9
 8004a98:	eb43 0b01 	adc.w	fp, r3, r1
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	f04f 0300 	mov.w	r3, #0
 8004aa4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004aa8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004aac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ab0:	4692      	mov	sl, r2
 8004ab2:	469b      	mov	fp, r3
 8004ab4:	4643      	mov	r3, r8
 8004ab6:	eb1a 0303 	adds.w	r3, sl, r3
 8004aba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004abe:	464b      	mov	r3, r9
 8004ac0:	eb4b 0303 	adc.w	r3, fp, r3
 8004ac4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ad4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ad8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004adc:	460b      	mov	r3, r1
 8004ade:	18db      	adds	r3, r3, r3
 8004ae0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	eb42 0303 	adc.w	r3, r2, r3
 8004ae8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004aee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004af2:	f7fb fb75 	bl	80001e0 <__aeabi_uldivmod>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4611      	mov	r1, r2
 8004afc:	4b3b      	ldr	r3, [pc, #236]	@ (8004bec <UART_SetConfig+0x2d4>)
 8004afe:	fba3 2301 	umull	r2, r3, r3, r1
 8004b02:	095b      	lsrs	r3, r3, #5
 8004b04:	2264      	movs	r2, #100	@ 0x64
 8004b06:	fb02 f303 	mul.w	r3, r2, r3
 8004b0a:	1acb      	subs	r3, r1, r3
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b12:	4b36      	ldr	r3, [pc, #216]	@ (8004bec <UART_SetConfig+0x2d4>)
 8004b14:	fba3 2302 	umull	r2, r3, r3, r2
 8004b18:	095b      	lsrs	r3, r3, #5
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004b20:	441c      	add	r4, r3
 8004b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b26:	2200      	movs	r2, #0
 8004b28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004b30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004b34:	4642      	mov	r2, r8
 8004b36:	464b      	mov	r3, r9
 8004b38:	1891      	adds	r1, r2, r2
 8004b3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b3c:	415b      	adcs	r3, r3
 8004b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004b44:	4641      	mov	r1, r8
 8004b46:	1851      	adds	r1, r2, r1
 8004b48:	6339      	str	r1, [r7, #48]	@ 0x30
 8004b4a:	4649      	mov	r1, r9
 8004b4c:	414b      	adcs	r3, r1
 8004b4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b50:	f04f 0200 	mov.w	r2, #0
 8004b54:	f04f 0300 	mov.w	r3, #0
 8004b58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004b5c:	4659      	mov	r1, fp
 8004b5e:	00cb      	lsls	r3, r1, #3
 8004b60:	4651      	mov	r1, sl
 8004b62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b66:	4651      	mov	r1, sl
 8004b68:	00ca      	lsls	r2, r1, #3
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4603      	mov	r3, r0
 8004b70:	4642      	mov	r2, r8
 8004b72:	189b      	adds	r3, r3, r2
 8004b74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b78:	464b      	mov	r3, r9
 8004b7a:	460a      	mov	r2, r1
 8004b7c:	eb42 0303 	adc.w	r3, r2, r3
 8004b80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004b94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004b98:	460b      	mov	r3, r1
 8004b9a:	18db      	adds	r3, r3, r3
 8004b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	eb42 0303 	adc.w	r3, r2, r3
 8004ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ba6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004baa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004bae:	f7fb fb17 	bl	80001e0 <__aeabi_uldivmod>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8004bec <UART_SetConfig+0x2d4>)
 8004bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8004bbc:	095b      	lsrs	r3, r3, #5
 8004bbe:	2164      	movs	r1, #100	@ 0x64
 8004bc0:	fb01 f303 	mul.w	r3, r1, r3
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	3332      	adds	r3, #50	@ 0x32
 8004bca:	4a08      	ldr	r2, [pc, #32]	@ (8004bec <UART_SetConfig+0x2d4>)
 8004bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd0:	095b      	lsrs	r3, r3, #5
 8004bd2:	f003 0207 	and.w	r2, r3, #7
 8004bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4422      	add	r2, r4
 8004bde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004be0:	e106      	b.n	8004df0 <UART_SetConfig+0x4d8>
 8004be2:	bf00      	nop
 8004be4:	40011000 	.word	0x40011000
 8004be8:	40011400 	.word	0x40011400
 8004bec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004bfa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004bfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c02:	4642      	mov	r2, r8
 8004c04:	464b      	mov	r3, r9
 8004c06:	1891      	adds	r1, r2, r2
 8004c08:	6239      	str	r1, [r7, #32]
 8004c0a:	415b      	adcs	r3, r3
 8004c0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c12:	4641      	mov	r1, r8
 8004c14:	1854      	adds	r4, r2, r1
 8004c16:	4649      	mov	r1, r9
 8004c18:	eb43 0501 	adc.w	r5, r3, r1
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	00eb      	lsls	r3, r5, #3
 8004c26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c2a:	00e2      	lsls	r2, r4, #3
 8004c2c:	4614      	mov	r4, r2
 8004c2e:	461d      	mov	r5, r3
 8004c30:	4643      	mov	r3, r8
 8004c32:	18e3      	adds	r3, r4, r3
 8004c34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c38:	464b      	mov	r3, r9
 8004c3a:	eb45 0303 	adc.w	r3, r5, r3
 8004c3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	f04f 0300 	mov.w	r3, #0
 8004c5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004c5e:	4629      	mov	r1, r5
 8004c60:	008b      	lsls	r3, r1, #2
 8004c62:	4621      	mov	r1, r4
 8004c64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c68:	4621      	mov	r1, r4
 8004c6a:	008a      	lsls	r2, r1, #2
 8004c6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004c70:	f7fb fab6 	bl	80001e0 <__aeabi_uldivmod>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	4b60      	ldr	r3, [pc, #384]	@ (8004dfc <UART_SetConfig+0x4e4>)
 8004c7a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c7e:	095b      	lsrs	r3, r3, #5
 8004c80:	011c      	lsls	r4, r3, #4
 8004c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c86:	2200      	movs	r2, #0
 8004c88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004c94:	4642      	mov	r2, r8
 8004c96:	464b      	mov	r3, r9
 8004c98:	1891      	adds	r1, r2, r2
 8004c9a:	61b9      	str	r1, [r7, #24]
 8004c9c:	415b      	adcs	r3, r3
 8004c9e:	61fb      	str	r3, [r7, #28]
 8004ca0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ca4:	4641      	mov	r1, r8
 8004ca6:	1851      	adds	r1, r2, r1
 8004ca8:	6139      	str	r1, [r7, #16]
 8004caa:	4649      	mov	r1, r9
 8004cac:	414b      	adcs	r3, r1
 8004cae:	617b      	str	r3, [r7, #20]
 8004cb0:	f04f 0200 	mov.w	r2, #0
 8004cb4:	f04f 0300 	mov.w	r3, #0
 8004cb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cbc:	4659      	mov	r1, fp
 8004cbe:	00cb      	lsls	r3, r1, #3
 8004cc0:	4651      	mov	r1, sl
 8004cc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cc6:	4651      	mov	r1, sl
 8004cc8:	00ca      	lsls	r2, r1, #3
 8004cca:	4610      	mov	r0, r2
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4603      	mov	r3, r0
 8004cd0:	4642      	mov	r2, r8
 8004cd2:	189b      	adds	r3, r3, r2
 8004cd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004cd8:	464b      	mov	r3, r9
 8004cda:	460a      	mov	r2, r1
 8004cdc:	eb42 0303 	adc.w	r3, r2, r3
 8004ce0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004cee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	f04f 0300 	mov.w	r3, #0
 8004cf8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004cfc:	4649      	mov	r1, r9
 8004cfe:	008b      	lsls	r3, r1, #2
 8004d00:	4641      	mov	r1, r8
 8004d02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d06:	4641      	mov	r1, r8
 8004d08:	008a      	lsls	r2, r1, #2
 8004d0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d0e:	f7fb fa67 	bl	80001e0 <__aeabi_uldivmod>
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	4611      	mov	r1, r2
 8004d18:	4b38      	ldr	r3, [pc, #224]	@ (8004dfc <UART_SetConfig+0x4e4>)
 8004d1a:	fba3 2301 	umull	r2, r3, r3, r1
 8004d1e:	095b      	lsrs	r3, r3, #5
 8004d20:	2264      	movs	r2, #100	@ 0x64
 8004d22:	fb02 f303 	mul.w	r3, r2, r3
 8004d26:	1acb      	subs	r3, r1, r3
 8004d28:	011b      	lsls	r3, r3, #4
 8004d2a:	3332      	adds	r3, #50	@ 0x32
 8004d2c:	4a33      	ldr	r2, [pc, #204]	@ (8004dfc <UART_SetConfig+0x4e4>)
 8004d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d32:	095b      	lsrs	r3, r3, #5
 8004d34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d38:	441c      	add	r4, r3
 8004d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d3e:	2200      	movs	r2, #0
 8004d40:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d42:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004d48:	4642      	mov	r2, r8
 8004d4a:	464b      	mov	r3, r9
 8004d4c:	1891      	adds	r1, r2, r2
 8004d4e:	60b9      	str	r1, [r7, #8]
 8004d50:	415b      	adcs	r3, r3
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d58:	4641      	mov	r1, r8
 8004d5a:	1851      	adds	r1, r2, r1
 8004d5c:	6039      	str	r1, [r7, #0]
 8004d5e:	4649      	mov	r1, r9
 8004d60:	414b      	adcs	r3, r1
 8004d62:	607b      	str	r3, [r7, #4]
 8004d64:	f04f 0200 	mov.w	r2, #0
 8004d68:	f04f 0300 	mov.w	r3, #0
 8004d6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d70:	4659      	mov	r1, fp
 8004d72:	00cb      	lsls	r3, r1, #3
 8004d74:	4651      	mov	r1, sl
 8004d76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d7a:	4651      	mov	r1, sl
 8004d7c:	00ca      	lsls	r2, r1, #3
 8004d7e:	4610      	mov	r0, r2
 8004d80:	4619      	mov	r1, r3
 8004d82:	4603      	mov	r3, r0
 8004d84:	4642      	mov	r2, r8
 8004d86:	189b      	adds	r3, r3, r2
 8004d88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d8a:	464b      	mov	r3, r9
 8004d8c:	460a      	mov	r2, r1
 8004d8e:	eb42 0303 	adc.w	r3, r2, r3
 8004d92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d9e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004dac:	4649      	mov	r1, r9
 8004dae:	008b      	lsls	r3, r1, #2
 8004db0:	4641      	mov	r1, r8
 8004db2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004db6:	4641      	mov	r1, r8
 8004db8:	008a      	lsls	r2, r1, #2
 8004dba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004dbe:	f7fb fa0f 	bl	80001e0 <__aeabi_uldivmod>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004dfc <UART_SetConfig+0x4e4>)
 8004dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dcc:	095b      	lsrs	r3, r3, #5
 8004dce:	2164      	movs	r1, #100	@ 0x64
 8004dd0:	fb01 f303 	mul.w	r3, r1, r3
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	011b      	lsls	r3, r3, #4
 8004dd8:	3332      	adds	r3, #50	@ 0x32
 8004dda:	4a08      	ldr	r2, [pc, #32]	@ (8004dfc <UART_SetConfig+0x4e4>)
 8004ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8004de0:	095b      	lsrs	r3, r3, #5
 8004de2:	f003 020f 	and.w	r2, r3, #15
 8004de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4422      	add	r2, r4
 8004dee:	609a      	str	r2, [r3, #8]
}
 8004df0:	bf00      	nop
 8004df2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004df6:	46bd      	mov	sp, r7
 8004df8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dfc:	51eb851f 	.word	0x51eb851f

08004e00 <__NVIC_SetPriority>:
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	4603      	mov	r3, r0
 8004e08:	6039      	str	r1, [r7, #0]
 8004e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	db0a      	blt.n	8004e2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	490c      	ldr	r1, [pc, #48]	@ (8004e4c <__NVIC_SetPriority+0x4c>)
 8004e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e1e:	0112      	lsls	r2, r2, #4
 8004e20:	b2d2      	uxtb	r2, r2
 8004e22:	440b      	add	r3, r1
 8004e24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004e28:	e00a      	b.n	8004e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	4908      	ldr	r1, [pc, #32]	@ (8004e50 <__NVIC_SetPriority+0x50>)
 8004e30:	79fb      	ldrb	r3, [r7, #7]
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	3b04      	subs	r3, #4
 8004e38:	0112      	lsls	r2, r2, #4
 8004e3a:	b2d2      	uxtb	r2, r2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	761a      	strb	r2, [r3, #24]
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	e000e100 	.word	0xe000e100
 8004e50:	e000ed00 	.word	0xe000ed00

08004e54 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004e58:	4b05      	ldr	r3, [pc, #20]	@ (8004e70 <SysTick_Handler+0x1c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004e5c:	f001 fd46 	bl	80068ec <xTaskGetSchedulerState>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d001      	beq.n	8004e6a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004e66:	f002 fb3f 	bl	80074e8 <xPortSysTickHandler>
  }
}
 8004e6a:	bf00      	nop
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	e000e010 	.word	0xe000e010

08004e74 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004e78:	2100      	movs	r1, #0
 8004e7a:	f06f 0004 	mvn.w	r0, #4
 8004e7e:	f7ff ffbf 	bl	8004e00 <__NVIC_SetPriority>
#endif
}
 8004e82:	bf00      	nop
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e8e:	f3ef 8305 	mrs	r3, IPSR
 8004e92:	603b      	str	r3, [r7, #0]
  return(result);
 8004e94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004e9a:	f06f 0305 	mvn.w	r3, #5
 8004e9e:	607b      	str	r3, [r7, #4]
 8004ea0:	e00c      	b.n	8004ebc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8004ecc <osKernelInitialize+0x44>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d105      	bne.n	8004eb6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004eaa:	4b08      	ldr	r3, [pc, #32]	@ (8004ecc <osKernelInitialize+0x44>)
 8004eac:	2201      	movs	r2, #1
 8004eae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	607b      	str	r3, [r7, #4]
 8004eb4:	e002      	b.n	8004ebc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ebc:	687b      	ldr	r3, [r7, #4]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	20000260 	.word	0x20000260

08004ed0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ed6:	f3ef 8305 	mrs	r3, IPSR
 8004eda:	603b      	str	r3, [r7, #0]
  return(result);
 8004edc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <osKernelStart+0x1a>
    stat = osErrorISR;
 8004ee2:	f06f 0305 	mvn.w	r3, #5
 8004ee6:	607b      	str	r3, [r7, #4]
 8004ee8:	e010      	b.n	8004f0c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004eea:	4b0b      	ldr	r3, [pc, #44]	@ (8004f18 <osKernelStart+0x48>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d109      	bne.n	8004f06 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004ef2:	f7ff ffbf 	bl	8004e74 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004ef6:	4b08      	ldr	r3, [pc, #32]	@ (8004f18 <osKernelStart+0x48>)
 8004ef8:	2202      	movs	r2, #2
 8004efa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004efc:	f001 f892 	bl	8006024 <vTaskStartScheduler>
      stat = osOK;
 8004f00:	2300      	movs	r3, #0
 8004f02:	607b      	str	r3, [r7, #4]
 8004f04:	e002      	b.n	8004f0c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004f06:	f04f 33ff 	mov.w	r3, #4294967295
 8004f0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f0c:	687b      	ldr	r3, [r7, #4]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20000260 	.word	0x20000260

08004f1c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08e      	sub	sp, #56	@ 0x38
 8004f20:	af04      	add	r7, sp, #16
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f2c:	f3ef 8305 	mrs	r3, IPSR
 8004f30:	617b      	str	r3, [r7, #20]
  return(result);
 8004f32:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d17e      	bne.n	8005036 <osThreadNew+0x11a>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d07b      	beq.n	8005036 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004f3e:	2380      	movs	r3, #128	@ 0x80
 8004f40:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004f42:	2318      	movs	r3, #24
 8004f44:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004f46:	2300      	movs	r3, #0
 8004f48:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f4e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d045      	beq.n	8004fe2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d002      	beq.n	8004f64 <osThreadNew+0x48>
        name = attr->name;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d002      	beq.n	8004f72 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d008      	beq.n	8004f8a <osThreadNew+0x6e>
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	2b38      	cmp	r3, #56	@ 0x38
 8004f7c:	d805      	bhi.n	8004f8a <osThreadNew+0x6e>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <osThreadNew+0x72>
        return (NULL);
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	e054      	b.n	8005038 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	089b      	lsrs	r3, r3, #2
 8004f9c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00e      	beq.n	8004fc4 <osThreadNew+0xa8>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	2ba7      	cmp	r3, #167	@ 0xa7
 8004fac:	d90a      	bls.n	8004fc4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d006      	beq.n	8004fc4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d002      	beq.n	8004fc4 <osThreadNew+0xa8>
        mem = 1;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	61bb      	str	r3, [r7, #24]
 8004fc2:	e010      	b.n	8004fe6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10c      	bne.n	8004fe6 <osThreadNew+0xca>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d108      	bne.n	8004fe6 <osThreadNew+0xca>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d104      	bne.n	8004fe6 <osThreadNew+0xca>
          mem = 0;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	61bb      	str	r3, [r7, #24]
 8004fe0:	e001      	b.n	8004fe6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d110      	bne.n	800500e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ff4:	9202      	str	r2, [sp, #8]
 8004ff6:	9301      	str	r3, [sp, #4]
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	6a3a      	ldr	r2, [r7, #32]
 8005000:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 fe1a 	bl	8005c3c <xTaskCreateStatic>
 8005008:	4603      	mov	r3, r0
 800500a:	613b      	str	r3, [r7, #16]
 800500c:	e013      	b.n	8005036 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d110      	bne.n	8005036 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	b29a      	uxth	r2, r3
 8005018:	f107 0310 	add.w	r3, r7, #16
 800501c:	9301      	str	r3, [sp, #4]
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 fe68 	bl	8005cfc <xTaskCreate>
 800502c:	4603      	mov	r3, r0
 800502e:	2b01      	cmp	r3, #1
 8005030:	d001      	beq.n	8005036 <osThreadNew+0x11a>
            hTask = NULL;
 8005032:	2300      	movs	r3, #0
 8005034:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005036:	693b      	ldr	r3, [r7, #16]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3728      	adds	r7, #40	@ 0x28
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005048:	f3ef 8305 	mrs	r3, IPSR
 800504c:	60bb      	str	r3, [r7, #8]
  return(result);
 800504e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <osDelay+0x1c>
    stat = osErrorISR;
 8005054:	f06f 0305 	mvn.w	r3, #5
 8005058:	60fb      	str	r3, [r7, #12]
 800505a:	e007      	b.n	800506c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800505c:	2300      	movs	r3, #0
 800505e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d002      	beq.n	800506c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 ffa6 	bl	8005fb8 <vTaskDelay>
    }
  }

  return (stat);
 800506c:	68fb      	ldr	r3, [r7, #12]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4a07      	ldr	r2, [pc, #28]	@ (80050a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005088:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	4a06      	ldr	r2, [pc, #24]	@ (80050a8 <vApplicationGetIdleTaskMemory+0x30>)
 800508e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2280      	movs	r2, #128	@ 0x80
 8005094:	601a      	str	r2, [r3, #0]
}
 8005096:	bf00      	nop
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	20000264 	.word	0x20000264
 80050a8:	2000030c 	.word	0x2000030c

080050ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4a07      	ldr	r2, [pc, #28]	@ (80050d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80050bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	4a06      	ldr	r2, [pc, #24]	@ (80050dc <vApplicationGetTimerTaskMemory+0x30>)
 80050c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80050ca:	601a      	str	r2, [r3, #0]
}
 80050cc:	bf00      	nop
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	2000050c 	.word	0x2000050c
 80050dc:	200005b4 	.word	0x200005b4

080050e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f103 0208 	add.w	r2, r3, #8
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f04f 32ff 	mov.w	r2, #4294967295
 80050f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f103 0208 	add.w	r2, r3, #8
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f103 0208 	add.w	r2, r3, #8
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800513a:	b480      	push	{r7}
 800513c:	b085      	sub	sp, #20
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	601a      	str	r2, [r3, #0]
}
 8005176:	bf00      	nop
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005182:	b480      	push	{r7}
 8005184:	b085      	sub	sp, #20
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005198:	d103      	bne.n	80051a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	e00c      	b.n	80051bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	3308      	adds	r3, #8
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	e002      	b.n	80051b0 <vListInsert+0x2e>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d2f6      	bcs.n	80051aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	601a      	str	r2, [r3, #0]
}
 80051e8:	bf00      	nop
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6892      	ldr	r2, [r2, #8]
 800520a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	6852      	ldr	r2, [r2, #4]
 8005214:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	429a      	cmp	r2, r3
 800521e:	d103      	bne.n	8005228 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	1e5a      	subs	r2, r3, #1
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10b      	bne.n	8005274 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800525c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005260:	f383 8811 	msr	BASEPRI, r3
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800526e:	bf00      	nop
 8005270:	bf00      	nop
 8005272:	e7fd      	b.n	8005270 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005274:	f002 f8a8 	bl	80073c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005280:	68f9      	ldr	r1, [r7, #12]
 8005282:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005284:	fb01 f303 	mul.w	r3, r1, r3
 8005288:	441a      	add	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a4:	3b01      	subs	r3, #1
 80052a6:	68f9      	ldr	r1, [r7, #12]
 80052a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80052aa:	fb01 f303 	mul.w	r3, r1, r3
 80052ae:	441a      	add	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	22ff      	movs	r2, #255	@ 0xff
 80052b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	22ff      	movs	r2, #255	@ 0xff
 80052c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d114      	bne.n	80052f4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d01a      	beq.n	8005308 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	3310      	adds	r3, #16
 80052d6:	4618      	mov	r0, r3
 80052d8:	f001 f942 	bl	8006560 <xTaskRemoveFromEventList>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d012      	beq.n	8005308 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80052e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005318 <xQueueGenericReset+0xd0>)
 80052e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	e009      	b.n	8005308 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3310      	adds	r3, #16
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff fef1 	bl	80050e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	3324      	adds	r3, #36	@ 0x24
 8005302:	4618      	mov	r0, r3
 8005304:	f7ff feec 	bl	80050e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005308:	f002 f890 	bl	800742c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800530c:	2301      	movs	r3, #1
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	e000ed04 	.word	0xe000ed04

0800531c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08e      	sub	sp, #56	@ 0x38
 8005320:	af02      	add	r7, sp, #8
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
 8005328:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10b      	bne.n	8005348 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005342:	bf00      	nop
 8005344:	bf00      	nop
 8005346:	e7fd      	b.n	8005344 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10b      	bne.n	8005366 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005360:	bf00      	nop
 8005362:	bf00      	nop
 8005364:	e7fd      	b.n	8005362 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d002      	beq.n	8005372 <xQueueGenericCreateStatic+0x56>
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <xQueueGenericCreateStatic+0x5a>
 8005372:	2301      	movs	r3, #1
 8005374:	e000      	b.n	8005378 <xQueueGenericCreateStatic+0x5c>
 8005376:	2300      	movs	r3, #0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10b      	bne.n	8005394 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800537c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005380:	f383 8811 	msr	BASEPRI, r3
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	623b      	str	r3, [r7, #32]
}
 800538e:	bf00      	nop
 8005390:	bf00      	nop
 8005392:	e7fd      	b.n	8005390 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d102      	bne.n	80053a0 <xQueueGenericCreateStatic+0x84>
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <xQueueGenericCreateStatic+0x88>
 80053a0:	2301      	movs	r3, #1
 80053a2:	e000      	b.n	80053a6 <xQueueGenericCreateStatic+0x8a>
 80053a4:	2300      	movs	r3, #0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10b      	bne.n	80053c2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80053aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ae:	f383 8811 	msr	BASEPRI, r3
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	61fb      	str	r3, [r7, #28]
}
 80053bc:	bf00      	nop
 80053be:	bf00      	nop
 80053c0:	e7fd      	b.n	80053be <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80053c2:	2350      	movs	r3, #80	@ 0x50
 80053c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2b50      	cmp	r3, #80	@ 0x50
 80053ca:	d00b      	beq.n	80053e4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80053cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	61bb      	str	r3, [r7, #24]
}
 80053de:	bf00      	nop
 80053e0:	bf00      	nop
 80053e2:	e7fd      	b.n	80053e0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80053e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80053ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00d      	beq.n	800540c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80053f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053f8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80053fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	4613      	mov	r3, r2
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	68b9      	ldr	r1, [r7, #8]
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 f805 	bl	8005416 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800540c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800540e:	4618      	mov	r0, r3
 8005410:	3730      	adds	r7, #48	@ 0x30
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b084      	sub	sp, #16
 800541a:	af00      	add	r7, sp, #0
 800541c:	60f8      	str	r0, [r7, #12]
 800541e:	60b9      	str	r1, [r7, #8]
 8005420:	607a      	str	r2, [r7, #4]
 8005422:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d103      	bne.n	8005432 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	e002      	b.n	8005438 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005444:	2101      	movs	r1, #1
 8005446:	69b8      	ldr	r0, [r7, #24]
 8005448:	f7ff fefe 	bl	8005248 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	78fa      	ldrb	r2, [r7, #3]
 8005450:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005454:	bf00      	nop
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b08e      	sub	sp, #56	@ 0x38
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
 8005468:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800546a:	2300      	movs	r3, #0
 800546c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10b      	bne.n	8005490 <xQueueGenericSend+0x34>
	__asm volatile
 8005478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800548a:	bf00      	nop
 800548c:	bf00      	nop
 800548e:	e7fd      	b.n	800548c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d103      	bne.n	800549e <xQueueGenericSend+0x42>
 8005496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <xQueueGenericSend+0x46>
 800549e:	2301      	movs	r3, #1
 80054a0:	e000      	b.n	80054a4 <xQueueGenericSend+0x48>
 80054a2:	2300      	movs	r3, #0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10b      	bne.n	80054c0 <xQueueGenericSend+0x64>
	__asm volatile
 80054a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ac:	f383 8811 	msr	BASEPRI, r3
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80054ba:	bf00      	nop
 80054bc:	bf00      	nop
 80054be:	e7fd      	b.n	80054bc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d103      	bne.n	80054ce <xQueueGenericSend+0x72>
 80054c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d101      	bne.n	80054d2 <xQueueGenericSend+0x76>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e000      	b.n	80054d4 <xQueueGenericSend+0x78>
 80054d2:	2300      	movs	r3, #0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10b      	bne.n	80054f0 <xQueueGenericSend+0x94>
	__asm volatile
 80054d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054dc:	f383 8811 	msr	BASEPRI, r3
 80054e0:	f3bf 8f6f 	isb	sy
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	623b      	str	r3, [r7, #32]
}
 80054ea:	bf00      	nop
 80054ec:	bf00      	nop
 80054ee:	e7fd      	b.n	80054ec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054f0:	f001 f9fc 	bl	80068ec <xTaskGetSchedulerState>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d102      	bne.n	8005500 <xQueueGenericSend+0xa4>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <xQueueGenericSend+0xa8>
 8005500:	2301      	movs	r3, #1
 8005502:	e000      	b.n	8005506 <xQueueGenericSend+0xaa>
 8005504:	2300      	movs	r3, #0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10b      	bne.n	8005522 <xQueueGenericSend+0xc6>
	__asm volatile
 800550a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	61fb      	str	r3, [r7, #28]
}
 800551c:	bf00      	nop
 800551e:	bf00      	nop
 8005520:	e7fd      	b.n	800551e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005522:	f001 ff51 	bl	80073c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005528:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800552a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800552e:	429a      	cmp	r2, r3
 8005530:	d302      	bcc.n	8005538 <xQueueGenericSend+0xdc>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b02      	cmp	r3, #2
 8005536:	d129      	bne.n	800558c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	68b9      	ldr	r1, [r7, #8]
 800553c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800553e:	f000 fa0f 	bl	8005960 <prvCopyDataToQueue>
 8005542:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005548:	2b00      	cmp	r3, #0
 800554a:	d010      	beq.n	800556e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800554c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554e:	3324      	adds	r3, #36	@ 0x24
 8005550:	4618      	mov	r0, r3
 8005552:	f001 f805 	bl	8006560 <xTaskRemoveFromEventList>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d013      	beq.n	8005584 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800555c:	4b3f      	ldr	r3, [pc, #252]	@ (800565c <xQueueGenericSend+0x200>)
 800555e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	e00a      	b.n	8005584 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800556e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005570:	2b00      	cmp	r3, #0
 8005572:	d007      	beq.n	8005584 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005574:	4b39      	ldr	r3, [pc, #228]	@ (800565c <xQueueGenericSend+0x200>)
 8005576:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005584:	f001 ff52 	bl	800742c <vPortExitCritical>
				return pdPASS;
 8005588:	2301      	movs	r3, #1
 800558a:	e063      	b.n	8005654 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d103      	bne.n	800559a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005592:	f001 ff4b 	bl	800742c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005596:	2300      	movs	r3, #0
 8005598:	e05c      	b.n	8005654 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800559a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800559c:	2b00      	cmp	r3, #0
 800559e:	d106      	bne.n	80055ae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055a0:	f107 0314 	add.w	r3, r7, #20
 80055a4:	4618      	mov	r0, r3
 80055a6:	f001 f83f 	bl	8006628 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055aa:	2301      	movs	r3, #1
 80055ac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055ae:	f001 ff3d 	bl	800742c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055b2:	f000 fda7 	bl	8006104 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055b6:	f001 ff07 	bl	80073c8 <vPortEnterCritical>
 80055ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055c0:	b25b      	sxtb	r3, r3
 80055c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c6:	d103      	bne.n	80055d0 <xQueueGenericSend+0x174>
 80055c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055d6:	b25b      	sxtb	r3, r3
 80055d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055dc:	d103      	bne.n	80055e6 <xQueueGenericSend+0x18a>
 80055de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055e6:	f001 ff21 	bl	800742c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055ea:	1d3a      	adds	r2, r7, #4
 80055ec:	f107 0314 	add.w	r3, r7, #20
 80055f0:	4611      	mov	r1, r2
 80055f2:	4618      	mov	r0, r3
 80055f4:	f001 f82e 	bl	8006654 <xTaskCheckForTimeOut>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d124      	bne.n	8005648 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80055fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005600:	f000 faa6 	bl	8005b50 <prvIsQueueFull>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d018      	beq.n	800563c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800560a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560c:	3310      	adds	r3, #16
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	4611      	mov	r1, r2
 8005612:	4618      	mov	r0, r3
 8005614:	f000 ff52 	bl	80064bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005618:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800561a:	f000 fa31 	bl	8005a80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800561e:	f000 fd7f 	bl	8006120 <xTaskResumeAll>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	f47f af7c 	bne.w	8005522 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800562a:	4b0c      	ldr	r3, [pc, #48]	@ (800565c <xQueueGenericSend+0x200>)
 800562c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	e772      	b.n	8005522 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800563c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800563e:	f000 fa1f 	bl	8005a80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005642:	f000 fd6d 	bl	8006120 <xTaskResumeAll>
 8005646:	e76c      	b.n	8005522 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005648:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800564a:	f000 fa19 	bl	8005a80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800564e:	f000 fd67 	bl	8006120 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005652:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005654:	4618      	mov	r0, r3
 8005656:	3738      	adds	r7, #56	@ 0x38
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	e000ed04 	.word	0xe000ed04

08005660 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b090      	sub	sp, #64	@ 0x40
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10b      	bne.n	8005690 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800567c:	f383 8811 	msr	BASEPRI, r3
 8005680:	f3bf 8f6f 	isb	sy
 8005684:	f3bf 8f4f 	dsb	sy
 8005688:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800568a:	bf00      	nop
 800568c:	bf00      	nop
 800568e:	e7fd      	b.n	800568c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d103      	bne.n	800569e <xQueueGenericSendFromISR+0x3e>
 8005696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <xQueueGenericSendFromISR+0x42>
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <xQueueGenericSendFromISR+0x44>
 80056a2:	2300      	movs	r3, #0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10b      	bne.n	80056c0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80056a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80056ba:	bf00      	nop
 80056bc:	bf00      	nop
 80056be:	e7fd      	b.n	80056bc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d103      	bne.n	80056ce <xQueueGenericSendFromISR+0x6e>
 80056c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d101      	bne.n	80056d2 <xQueueGenericSendFromISR+0x72>
 80056ce:	2301      	movs	r3, #1
 80056d0:	e000      	b.n	80056d4 <xQueueGenericSendFromISR+0x74>
 80056d2:	2300      	movs	r3, #0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10b      	bne.n	80056f0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	623b      	str	r3, [r7, #32]
}
 80056ea:	bf00      	nop
 80056ec:	bf00      	nop
 80056ee:	e7fd      	b.n	80056ec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056f0:	f001 ff4a 	bl	8007588 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80056f4:	f3ef 8211 	mrs	r2, BASEPRI
 80056f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	61fa      	str	r2, [r7, #28]
 800570a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800570c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800570e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005712:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005718:	429a      	cmp	r2, r3
 800571a:	d302      	bcc.n	8005722 <xQueueGenericSendFromISR+0xc2>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	2b02      	cmp	r3, #2
 8005720:	d12f      	bne.n	8005782 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005724:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005728:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800572c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005730:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	68b9      	ldr	r1, [r7, #8]
 8005736:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005738:	f000 f912 	bl	8005960 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800573c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005744:	d112      	bne.n	800576c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574a:	2b00      	cmp	r3, #0
 800574c:	d016      	beq.n	800577c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800574e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005750:	3324      	adds	r3, #36	@ 0x24
 8005752:	4618      	mov	r0, r3
 8005754:	f000 ff04 	bl	8006560 <xTaskRemoveFromEventList>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00e      	beq.n	800577c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00b      	beq.n	800577c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	601a      	str	r2, [r3, #0]
 800576a:	e007      	b.n	800577c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800576c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005770:	3301      	adds	r3, #1
 8005772:	b2db      	uxtb	r3, r3
 8005774:	b25a      	sxtb	r2, r3
 8005776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005778:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800577c:	2301      	movs	r3, #1
 800577e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005780:	e001      	b.n	8005786 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005782:	2300      	movs	r3, #0
 8005784:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005788:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005790:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005794:	4618      	mov	r0, r3
 8005796:	3740      	adds	r7, #64	@ 0x40
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b08c      	sub	sp, #48	@ 0x30
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80057a8:	2300      	movs	r3, #0
 80057aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10b      	bne.n	80057ce <xQueueReceive+0x32>
	__asm volatile
 80057b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	623b      	str	r3, [r7, #32]
}
 80057c8:	bf00      	nop
 80057ca:	bf00      	nop
 80057cc:	e7fd      	b.n	80057ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d103      	bne.n	80057dc <xQueueReceive+0x40>
 80057d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <xQueueReceive+0x44>
 80057dc:	2301      	movs	r3, #1
 80057de:	e000      	b.n	80057e2 <xQueueReceive+0x46>
 80057e0:	2300      	movs	r3, #0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10b      	bne.n	80057fe <xQueueReceive+0x62>
	__asm volatile
 80057e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ea:	f383 8811 	msr	BASEPRI, r3
 80057ee:	f3bf 8f6f 	isb	sy
 80057f2:	f3bf 8f4f 	dsb	sy
 80057f6:	61fb      	str	r3, [r7, #28]
}
 80057f8:	bf00      	nop
 80057fa:	bf00      	nop
 80057fc:	e7fd      	b.n	80057fa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057fe:	f001 f875 	bl	80068ec <xTaskGetSchedulerState>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d102      	bne.n	800580e <xQueueReceive+0x72>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <xQueueReceive+0x76>
 800580e:	2301      	movs	r3, #1
 8005810:	e000      	b.n	8005814 <xQueueReceive+0x78>
 8005812:	2300      	movs	r3, #0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10b      	bne.n	8005830 <xQueueReceive+0x94>
	__asm volatile
 8005818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	61bb      	str	r3, [r7, #24]
}
 800582a:	bf00      	nop
 800582c:	bf00      	nop
 800582e:	e7fd      	b.n	800582c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005830:	f001 fdca 	bl	80073c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005838:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800583a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583c:	2b00      	cmp	r3, #0
 800583e:	d01f      	beq.n	8005880 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005840:	68b9      	ldr	r1, [r7, #8]
 8005842:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005844:	f000 f8f6 	bl	8005a34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584a:	1e5a      	subs	r2, r3, #1
 800584c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800584e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00f      	beq.n	8005878 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585a:	3310      	adds	r3, #16
 800585c:	4618      	mov	r0, r3
 800585e:	f000 fe7f 	bl	8006560 <xTaskRemoveFromEventList>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d007      	beq.n	8005878 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005868:	4b3c      	ldr	r3, [pc, #240]	@ (800595c <xQueueReceive+0x1c0>)
 800586a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800586e:	601a      	str	r2, [r3, #0]
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005878:	f001 fdd8 	bl	800742c <vPortExitCritical>
				return pdPASS;
 800587c:	2301      	movs	r3, #1
 800587e:	e069      	b.n	8005954 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d103      	bne.n	800588e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005886:	f001 fdd1 	bl	800742c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800588a:	2300      	movs	r3, #0
 800588c:	e062      	b.n	8005954 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800588e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005890:	2b00      	cmp	r3, #0
 8005892:	d106      	bne.n	80058a2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005894:	f107 0310 	add.w	r3, r7, #16
 8005898:	4618      	mov	r0, r3
 800589a:	f000 fec5 	bl	8006628 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800589e:	2301      	movs	r3, #1
 80058a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058a2:	f001 fdc3 	bl	800742c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058a6:	f000 fc2d 	bl	8006104 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058aa:	f001 fd8d 	bl	80073c8 <vPortEnterCritical>
 80058ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058b4:	b25b      	sxtb	r3, r3
 80058b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ba:	d103      	bne.n	80058c4 <xQueueReceive+0x128>
 80058bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058ca:	b25b      	sxtb	r3, r3
 80058cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d0:	d103      	bne.n	80058da <xQueueReceive+0x13e>
 80058d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058da:	f001 fda7 	bl	800742c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058de:	1d3a      	adds	r2, r7, #4
 80058e0:	f107 0310 	add.w	r3, r7, #16
 80058e4:	4611      	mov	r1, r2
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 feb4 	bl	8006654 <xTaskCheckForTimeOut>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d123      	bne.n	800593a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058f4:	f000 f916 	bl	8005b24 <prvIsQueueEmpty>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d017      	beq.n	800592e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80058fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005900:	3324      	adds	r3, #36	@ 0x24
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	4611      	mov	r1, r2
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fdd8 	bl	80064bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800590c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800590e:	f000 f8b7 	bl	8005a80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005912:	f000 fc05 	bl	8006120 <xTaskResumeAll>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d189      	bne.n	8005830 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800591c:	4b0f      	ldr	r3, [pc, #60]	@ (800595c <xQueueReceive+0x1c0>)
 800591e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	f3bf 8f6f 	isb	sy
 800592c:	e780      	b.n	8005830 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800592e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005930:	f000 f8a6 	bl	8005a80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005934:	f000 fbf4 	bl	8006120 <xTaskResumeAll>
 8005938:	e77a      	b.n	8005830 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800593a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800593c:	f000 f8a0 	bl	8005a80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005940:	f000 fbee 	bl	8006120 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005944:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005946:	f000 f8ed 	bl	8005b24 <prvIsQueueEmpty>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	f43f af6f 	beq.w	8005830 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005952:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005954:	4618      	mov	r0, r3
 8005956:	3730      	adds	r7, #48	@ 0x30
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	e000ed04 	.word	0xe000ed04

08005960 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800596c:	2300      	movs	r3, #0
 800596e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005974:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10d      	bne.n	800599a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d14d      	bne.n	8005a22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	4618      	mov	r0, r3
 800598c:	f000 ffcc 	bl	8006928 <xTaskPriorityDisinherit>
 8005990:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	609a      	str	r2, [r3, #8]
 8005998:	e043      	b.n	8005a22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d119      	bne.n	80059d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6858      	ldr	r0, [r3, #4]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a8:	461a      	mov	r2, r3
 80059aa:	68b9      	ldr	r1, [r7, #8]
 80059ac:	f002 f8a0 	bl	8007af0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b8:	441a      	add	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d32b      	bcc.n	8005a22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	605a      	str	r2, [r3, #4]
 80059d2:	e026      	b.n	8005a22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	68d8      	ldr	r0, [r3, #12]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059dc:	461a      	mov	r2, r3
 80059de:	68b9      	ldr	r1, [r7, #8]
 80059e0:	f002 f886 	bl	8007af0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	68da      	ldr	r2, [r3, #12]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ec:	425b      	negs	r3, r3
 80059ee:	441a      	add	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d207      	bcs.n	8005a10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	689a      	ldr	r2, [r3, #8]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a08:	425b      	negs	r3, r3
 8005a0a:	441a      	add	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d105      	bne.n	8005a22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005a2a:	697b      	ldr	r3, [r7, #20]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d018      	beq.n	8005a78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68da      	ldr	r2, [r3, #12]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4e:	441a      	add	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68da      	ldr	r2, [r3, #12]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d303      	bcc.n	8005a68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68d9      	ldr	r1, [r3, #12]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a70:	461a      	mov	r2, r3
 8005a72:	6838      	ldr	r0, [r7, #0]
 8005a74:	f002 f83c 	bl	8007af0 <memcpy>
	}
}
 8005a78:	bf00      	nop
 8005a7a:	3708      	adds	r7, #8
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a88:	f001 fc9e 	bl	80073c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a94:	e011      	b.n	8005aba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d012      	beq.n	8005ac4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	3324      	adds	r3, #36	@ 0x24
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 fd5c 	bl	8006560 <xTaskRemoveFromEventList>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005aae:	f000 fe35 	bl	800671c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	dce9      	bgt.n	8005a96 <prvUnlockQueue+0x16>
 8005ac2:	e000      	b.n	8005ac6 <prvUnlockQueue+0x46>
					break;
 8005ac4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	22ff      	movs	r2, #255	@ 0xff
 8005aca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005ace:	f001 fcad 	bl	800742c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ad2:	f001 fc79 	bl	80073c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005adc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ade:	e011      	b.n	8005b04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d012      	beq.n	8005b0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3310      	adds	r3, #16
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 fd37 	bl	8006560 <xTaskRemoveFromEventList>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d001      	beq.n	8005afc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005af8:	f000 fe10 	bl	800671c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005afc:	7bbb      	ldrb	r3, [r7, #14]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	dce9      	bgt.n	8005ae0 <prvUnlockQueue+0x60>
 8005b0c:	e000      	b.n	8005b10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005b0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	22ff      	movs	r2, #255	@ 0xff
 8005b14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005b18:	f001 fc88 	bl	800742c <vPortExitCritical>
}
 8005b1c:	bf00      	nop
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b2c:	f001 fc4c 	bl	80073c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d102      	bne.n	8005b3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	60fb      	str	r3, [r7, #12]
 8005b3c:	e001      	b.n	8005b42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b42:	f001 fc73 	bl	800742c <vPortExitCritical>

	return xReturn;
 8005b46:	68fb      	ldr	r3, [r7, #12]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b58:	f001 fc36 	bl	80073c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d102      	bne.n	8005b6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	e001      	b.n	8005b72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b72:	f001 fc5b 	bl	800742c <vPortExitCritical>

	return xReturn;
 8005b76:	68fb      	ldr	r3, [r7, #12]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	e014      	b.n	8005bba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b90:	4a0f      	ldr	r2, [pc, #60]	@ (8005bd0 <vQueueAddToRegistry+0x50>)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10b      	bne.n	8005bb4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b9c:	490c      	ldr	r1, [pc, #48]	@ (8005bd0 <vQueueAddToRegistry+0x50>)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8005bd0 <vQueueAddToRegistry+0x50>)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	4413      	add	r3, r2
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005bb2:	e006      	b.n	8005bc2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	60fb      	str	r3, [r7, #12]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b07      	cmp	r3, #7
 8005bbe:	d9e7      	bls.n	8005b90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005bc0:	bf00      	nop
 8005bc2:	bf00      	nop
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	200009b4 	.word	0x200009b4

08005bd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005be4:	f001 fbf0 	bl	80073c8 <vPortEnterCritical>
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005bee:	b25b      	sxtb	r3, r3
 8005bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf4:	d103      	bne.n	8005bfe <vQueueWaitForMessageRestricted+0x2a>
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c04:	b25b      	sxtb	r3, r3
 8005c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0a:	d103      	bne.n	8005c14 <vQueueWaitForMessageRestricted+0x40>
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c14:	f001 fc0a 	bl	800742c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d106      	bne.n	8005c2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	3324      	adds	r3, #36	@ 0x24
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	68b9      	ldr	r1, [r7, #8]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f000 fc6d 	bl	8006508 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c2e:	6978      	ldr	r0, [r7, #20]
 8005c30:	f7ff ff26 	bl	8005a80 <prvUnlockQueue>
	}
 8005c34:	bf00      	nop
 8005c36:	3718      	adds	r7, #24
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b08e      	sub	sp, #56	@ 0x38
 8005c40:	af04      	add	r7, sp, #16
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
 8005c48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10b      	bne.n	8005c68 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c54:	f383 8811 	msr	BASEPRI, r3
 8005c58:	f3bf 8f6f 	isb	sy
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	623b      	str	r3, [r7, #32]
}
 8005c62:	bf00      	nop
 8005c64:	bf00      	nop
 8005c66:	e7fd      	b.n	8005c64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10b      	bne.n	8005c86 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	61fb      	str	r3, [r7, #28]
}
 8005c80:	bf00      	nop
 8005c82:	bf00      	nop
 8005c84:	e7fd      	b.n	8005c82 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c86:	23a8      	movs	r3, #168	@ 0xa8
 8005c88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	2ba8      	cmp	r3, #168	@ 0xa8
 8005c8e:	d00b      	beq.n	8005ca8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	61bb      	str	r3, [r7, #24]
}
 8005ca2:	bf00      	nop
 8005ca4:	bf00      	nop
 8005ca6:	e7fd      	b.n	8005ca4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ca8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d01e      	beq.n	8005cee <xTaskCreateStatic+0xb2>
 8005cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d01b      	beq.n	8005cee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005cbe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005cc8:	2300      	movs	r3, #0
 8005cca:	9303      	str	r3, [sp, #12]
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cce:	9302      	str	r3, [sp, #8]
 8005cd0:	f107 0314 	add.w	r3, r7, #20
 8005cd4:	9301      	str	r3, [sp, #4]
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	68b9      	ldr	r1, [r7, #8]
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 f851 	bl	8005d88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ce6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005ce8:	f000 f8f6 	bl	8005ed8 <prvAddNewTaskToReadyList>
 8005cec:	e001      	b.n	8005cf2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005cf2:	697b      	ldr	r3, [r7, #20]
	}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3728      	adds	r7, #40	@ 0x28
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b08c      	sub	sp, #48	@ 0x30
 8005d00:	af04      	add	r7, sp, #16
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	603b      	str	r3, [r7, #0]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005d0c:	88fb      	ldrh	r3, [r7, #6]
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4618      	mov	r0, r3
 8005d12:	f001 fc7b 	bl	800760c <pvPortMalloc>
 8005d16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00e      	beq.n	8005d3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d1e:	20a8      	movs	r0, #168	@ 0xa8
 8005d20:	f001 fc74 	bl	800760c <pvPortMalloc>
 8005d24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d003      	beq.n	8005d34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d32:	e005      	b.n	8005d40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d34:	6978      	ldr	r0, [r7, #20]
 8005d36:	f001 fd37 	bl	80077a8 <vPortFree>
 8005d3a:	e001      	b.n	8005d40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d017      	beq.n	8005d76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d4e:	88fa      	ldrh	r2, [r7, #6]
 8005d50:	2300      	movs	r3, #0
 8005d52:	9303      	str	r3, [sp, #12]
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	9302      	str	r3, [sp, #8]
 8005d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d5a:	9301      	str	r3, [sp, #4]
 8005d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	68b9      	ldr	r1, [r7, #8]
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f000 f80f 	bl	8005d88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d6a:	69f8      	ldr	r0, [r7, #28]
 8005d6c:	f000 f8b4 	bl	8005ed8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d70:	2301      	movs	r3, #1
 8005d72:	61bb      	str	r3, [r7, #24]
 8005d74:	e002      	b.n	8005d7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d76:	f04f 33ff 	mov.w	r3, #4294967295
 8005d7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d7c:	69bb      	ldr	r3, [r7, #24]
	}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3720      	adds	r7, #32
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
	...

08005d88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b088      	sub	sp, #32
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
 8005d94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d98:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	461a      	mov	r2, r3
 8005da0:	21a5      	movs	r1, #165	@ 0xa5
 8005da2:	f001 fe21 	bl	80079e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005db0:	3b01      	subs	r3, #1
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	f023 0307 	bic.w	r3, r3, #7
 8005dbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	f003 0307 	and.w	r3, r3, #7
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00b      	beq.n	8005de2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	617b      	str	r3, [r7, #20]
}
 8005ddc:	bf00      	nop
 8005dde:	bf00      	nop
 8005de0:	e7fd      	b.n	8005dde <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d01f      	beq.n	8005e28 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005de8:	2300      	movs	r3, #0
 8005dea:	61fb      	str	r3, [r7, #28]
 8005dec:	e012      	b.n	8005e14 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	4413      	add	r3, r2
 8005df4:	7819      	ldrb	r1, [r3, #0]
 8005df6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	3334      	adds	r3, #52	@ 0x34
 8005dfe:	460a      	mov	r2, r1
 8005e00:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	4413      	add	r3, r2
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d006      	beq.n	8005e1c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	3301      	adds	r3, #1
 8005e12:	61fb      	str	r3, [r7, #28]
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	2b0f      	cmp	r3, #15
 8005e18:	d9e9      	bls.n	8005dee <prvInitialiseNewTask+0x66>
 8005e1a:	e000      	b.n	8005e1e <prvInitialiseNewTask+0x96>
			{
				break;
 8005e1c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e26:	e003      	b.n	8005e30 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e32:	2b37      	cmp	r3, #55	@ 0x37
 8005e34:	d901      	bls.n	8005e3a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e36:	2337      	movs	r3, #55	@ 0x37
 8005e38:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e44:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e48:	2200      	movs	r2, #0
 8005e4a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4e:	3304      	adds	r3, #4
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7ff f965 	bl	8005120 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e58:	3318      	adds	r3, #24
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7ff f960 	bl	8005120 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e64:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e68:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e74:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e88:	3354      	adds	r3, #84	@ 0x54
 8005e8a:	224c      	movs	r2, #76	@ 0x4c
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f001 fdaa 	bl	80079e8 <memset>
 8005e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e96:	4a0d      	ldr	r2, [pc, #52]	@ (8005ecc <prvInitialiseNewTask+0x144>)
 8005e98:	659a      	str	r2, [r3, #88]	@ 0x58
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e9c:	4a0c      	ldr	r2, [pc, #48]	@ (8005ed0 <prvInitialiseNewTask+0x148>)
 8005e9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea2:	4a0c      	ldr	r2, [pc, #48]	@ (8005ed4 <prvInitialiseNewTask+0x14c>)
 8005ea4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	68f9      	ldr	r1, [r7, #12]
 8005eaa:	69b8      	ldr	r0, [r7, #24]
 8005eac:	f001 f95a 	bl	8007164 <pxPortInitialiseStack>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d002      	beq.n	8005ec2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ebe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ec0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ec2:	bf00      	nop
 8005ec4:	3720      	adds	r7, #32
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	20004c48 	.word	0x20004c48
 8005ed0:	20004cb0 	.word	0x20004cb0
 8005ed4:	20004d18 	.word	0x20004d18

08005ed8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ee0:	f001 fa72 	bl	80073c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ee4:	4b2d      	ldr	r3, [pc, #180]	@ (8005f9c <prvAddNewTaskToReadyList+0xc4>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	4a2c      	ldr	r2, [pc, #176]	@ (8005f9c <prvAddNewTaskToReadyList+0xc4>)
 8005eec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005eee:	4b2c      	ldr	r3, [pc, #176]	@ (8005fa0 <prvAddNewTaskToReadyList+0xc8>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d109      	bne.n	8005f0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ef6:	4a2a      	ldr	r2, [pc, #168]	@ (8005fa0 <prvAddNewTaskToReadyList+0xc8>)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005efc:	4b27      	ldr	r3, [pc, #156]	@ (8005f9c <prvAddNewTaskToReadyList+0xc4>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d110      	bne.n	8005f26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f04:	f000 fc2e 	bl	8006764 <prvInitialiseTaskLists>
 8005f08:	e00d      	b.n	8005f26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f0a:	4b26      	ldr	r3, [pc, #152]	@ (8005fa4 <prvAddNewTaskToReadyList+0xcc>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d109      	bne.n	8005f26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f12:	4b23      	ldr	r3, [pc, #140]	@ (8005fa0 <prvAddNewTaskToReadyList+0xc8>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d802      	bhi.n	8005f26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f20:	4a1f      	ldr	r2, [pc, #124]	@ (8005fa0 <prvAddNewTaskToReadyList+0xc8>)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f26:	4b20      	ldr	r3, [pc, #128]	@ (8005fa8 <prvAddNewTaskToReadyList+0xd0>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	4a1e      	ldr	r2, [pc, #120]	@ (8005fa8 <prvAddNewTaskToReadyList+0xd0>)
 8005f2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f30:	4b1d      	ldr	r3, [pc, #116]	@ (8005fa8 <prvAddNewTaskToReadyList+0xd0>)
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8005fac <prvAddNewTaskToReadyList+0xd4>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d903      	bls.n	8005f4c <prvAddNewTaskToReadyList+0x74>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f48:	4a18      	ldr	r2, [pc, #96]	@ (8005fac <prvAddNewTaskToReadyList+0xd4>)
 8005f4a:	6013      	str	r3, [r2, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f50:	4613      	mov	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4a15      	ldr	r2, [pc, #84]	@ (8005fb0 <prvAddNewTaskToReadyList+0xd8>)
 8005f5a:	441a      	add	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	4619      	mov	r1, r3
 8005f62:	4610      	mov	r0, r2
 8005f64:	f7ff f8e9 	bl	800513a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f68:	f001 fa60 	bl	800742c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa4 <prvAddNewTaskToReadyList+0xcc>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00e      	beq.n	8005f92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f74:	4b0a      	ldr	r3, [pc, #40]	@ (8005fa0 <prvAddNewTaskToReadyList+0xc8>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d207      	bcs.n	8005f92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f82:	4b0c      	ldr	r3, [pc, #48]	@ (8005fb4 <prvAddNewTaskToReadyList+0xdc>)
 8005f84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f92:	bf00      	nop
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000ec8 	.word	0x20000ec8
 8005fa0:	200009f4 	.word	0x200009f4
 8005fa4:	20000ed4 	.word	0x20000ed4
 8005fa8:	20000ee4 	.word	0x20000ee4
 8005fac:	20000ed0 	.word	0x20000ed0
 8005fb0:	200009f8 	.word	0x200009f8
 8005fb4:	e000ed04 	.word	0xe000ed04

08005fb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d018      	beq.n	8005ffc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005fca:	4b14      	ldr	r3, [pc, #80]	@ (800601c <vTaskDelay+0x64>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00b      	beq.n	8005fea <vTaskDelay+0x32>
	__asm volatile
 8005fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	60bb      	str	r3, [r7, #8]
}
 8005fe4:	bf00      	nop
 8005fe6:	bf00      	nop
 8005fe8:	e7fd      	b.n	8005fe6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005fea:	f000 f88b 	bl	8006104 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005fee:	2100      	movs	r1, #0
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fd09 	bl	8006a08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005ff6:	f000 f893 	bl	8006120 <xTaskResumeAll>
 8005ffa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d107      	bne.n	8006012 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006002:	4b07      	ldr	r3, [pc, #28]	@ (8006020 <vTaskDelay+0x68>)
 8006004:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006012:	bf00      	nop
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	20000ef0 	.word	0x20000ef0
 8006020:	e000ed04 	.word	0xe000ed04

08006024 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b08a      	sub	sp, #40	@ 0x28
 8006028:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800602a:	2300      	movs	r3, #0
 800602c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800602e:	2300      	movs	r3, #0
 8006030:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006032:	463a      	mov	r2, r7
 8006034:	1d39      	adds	r1, r7, #4
 8006036:	f107 0308 	add.w	r3, r7, #8
 800603a:	4618      	mov	r0, r3
 800603c:	f7ff f81c 	bl	8005078 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006040:	6839      	ldr	r1, [r7, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	9202      	str	r2, [sp, #8]
 8006048:	9301      	str	r3, [sp, #4]
 800604a:	2300      	movs	r3, #0
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	2300      	movs	r3, #0
 8006050:	460a      	mov	r2, r1
 8006052:	4924      	ldr	r1, [pc, #144]	@ (80060e4 <vTaskStartScheduler+0xc0>)
 8006054:	4824      	ldr	r0, [pc, #144]	@ (80060e8 <vTaskStartScheduler+0xc4>)
 8006056:	f7ff fdf1 	bl	8005c3c <xTaskCreateStatic>
 800605a:	4603      	mov	r3, r0
 800605c:	4a23      	ldr	r2, [pc, #140]	@ (80060ec <vTaskStartScheduler+0xc8>)
 800605e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006060:	4b22      	ldr	r3, [pc, #136]	@ (80060ec <vTaskStartScheduler+0xc8>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006068:	2301      	movs	r3, #1
 800606a:	617b      	str	r3, [r7, #20]
 800606c:	e001      	b.n	8006072 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800606e:	2300      	movs	r3, #0
 8006070:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d102      	bne.n	800607e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006078:	f000 fd1a 	bl	8006ab0 <xTimerCreateTimerTask>
 800607c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d11b      	bne.n	80060bc <vTaskStartScheduler+0x98>
	__asm volatile
 8006084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006088:	f383 8811 	msr	BASEPRI, r3
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	613b      	str	r3, [r7, #16]
}
 8006096:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006098:	4b15      	ldr	r3, [pc, #84]	@ (80060f0 <vTaskStartScheduler+0xcc>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3354      	adds	r3, #84	@ 0x54
 800609e:	4a15      	ldr	r2, [pc, #84]	@ (80060f4 <vTaskStartScheduler+0xd0>)
 80060a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80060a2:	4b15      	ldr	r3, [pc, #84]	@ (80060f8 <vTaskStartScheduler+0xd4>)
 80060a4:	f04f 32ff 	mov.w	r2, #4294967295
 80060a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80060aa:	4b14      	ldr	r3, [pc, #80]	@ (80060fc <vTaskStartScheduler+0xd8>)
 80060ac:	2201      	movs	r2, #1
 80060ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80060b0:	4b13      	ldr	r3, [pc, #76]	@ (8006100 <vTaskStartScheduler+0xdc>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80060b6:	f001 f8e3 	bl	8007280 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80060ba:	e00f      	b.n	80060dc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c2:	d10b      	bne.n	80060dc <vTaskStartScheduler+0xb8>
	__asm volatile
 80060c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	60fb      	str	r3, [r7, #12]
}
 80060d6:	bf00      	nop
 80060d8:	bf00      	nop
 80060da:	e7fd      	b.n	80060d8 <vTaskStartScheduler+0xb4>
}
 80060dc:	bf00      	nop
 80060de:	3718      	adds	r7, #24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	08007c00 	.word	0x08007c00
 80060e8:	08006735 	.word	0x08006735
 80060ec:	20000eec 	.word	0x20000eec
 80060f0:	200009f4 	.word	0x200009f4
 80060f4:	20000014 	.word	0x20000014
 80060f8:	20000ee8 	.word	0x20000ee8
 80060fc:	20000ed4 	.word	0x20000ed4
 8006100:	20000ecc 	.word	0x20000ecc

08006104 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006104:	b480      	push	{r7}
 8006106:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006108:	4b04      	ldr	r3, [pc, #16]	@ (800611c <vTaskSuspendAll+0x18>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3301      	adds	r3, #1
 800610e:	4a03      	ldr	r2, [pc, #12]	@ (800611c <vTaskSuspendAll+0x18>)
 8006110:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006112:	bf00      	nop
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	20000ef0 	.word	0x20000ef0

08006120 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006126:	2300      	movs	r3, #0
 8006128:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800612a:	2300      	movs	r3, #0
 800612c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800612e:	4b42      	ldr	r3, [pc, #264]	@ (8006238 <xTaskResumeAll+0x118>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10b      	bne.n	800614e <xTaskResumeAll+0x2e>
	__asm volatile
 8006136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613a:	f383 8811 	msr	BASEPRI, r3
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	603b      	str	r3, [r7, #0]
}
 8006148:	bf00      	nop
 800614a:	bf00      	nop
 800614c:	e7fd      	b.n	800614a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800614e:	f001 f93b 	bl	80073c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006152:	4b39      	ldr	r3, [pc, #228]	@ (8006238 <xTaskResumeAll+0x118>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3b01      	subs	r3, #1
 8006158:	4a37      	ldr	r2, [pc, #220]	@ (8006238 <xTaskResumeAll+0x118>)
 800615a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800615c:	4b36      	ldr	r3, [pc, #216]	@ (8006238 <xTaskResumeAll+0x118>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d162      	bne.n	800622a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006164:	4b35      	ldr	r3, [pc, #212]	@ (800623c <xTaskResumeAll+0x11c>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d05e      	beq.n	800622a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800616c:	e02f      	b.n	80061ce <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800616e:	4b34      	ldr	r3, [pc, #208]	@ (8006240 <xTaskResumeAll+0x120>)
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	3318      	adds	r3, #24
 800617a:	4618      	mov	r0, r3
 800617c:	f7ff f83a 	bl	80051f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	3304      	adds	r3, #4
 8006184:	4618      	mov	r0, r3
 8006186:	f7ff f835 	bl	80051f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800618e:	4b2d      	ldr	r3, [pc, #180]	@ (8006244 <xTaskResumeAll+0x124>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	429a      	cmp	r2, r3
 8006194:	d903      	bls.n	800619e <xTaskResumeAll+0x7e>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619a:	4a2a      	ldr	r2, [pc, #168]	@ (8006244 <xTaskResumeAll+0x124>)
 800619c:	6013      	str	r3, [r2, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061a2:	4613      	mov	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4413      	add	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4a27      	ldr	r2, [pc, #156]	@ (8006248 <xTaskResumeAll+0x128>)
 80061ac:	441a      	add	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	3304      	adds	r3, #4
 80061b2:	4619      	mov	r1, r3
 80061b4:	4610      	mov	r0, r2
 80061b6:	f7fe ffc0 	bl	800513a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061be:	4b23      	ldr	r3, [pc, #140]	@ (800624c <xTaskResumeAll+0x12c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d302      	bcc.n	80061ce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80061c8:	4b21      	ldr	r3, [pc, #132]	@ (8006250 <xTaskResumeAll+0x130>)
 80061ca:	2201      	movs	r2, #1
 80061cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061ce:	4b1c      	ldr	r3, [pc, #112]	@ (8006240 <xTaskResumeAll+0x120>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1cb      	bne.n	800616e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80061dc:	f000 fb66 	bl	80068ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80061e0:	4b1c      	ldr	r3, [pc, #112]	@ (8006254 <xTaskResumeAll+0x134>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d010      	beq.n	800620e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80061ec:	f000 f846 	bl	800627c <xTaskIncrementTick>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d002      	beq.n	80061fc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80061f6:	4b16      	ldr	r3, [pc, #88]	@ (8006250 <xTaskResumeAll+0x130>)
 80061f8:	2201      	movs	r2, #1
 80061fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	3b01      	subs	r3, #1
 8006200:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1f1      	bne.n	80061ec <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006208:	4b12      	ldr	r3, [pc, #72]	@ (8006254 <xTaskResumeAll+0x134>)
 800620a:	2200      	movs	r2, #0
 800620c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800620e:	4b10      	ldr	r3, [pc, #64]	@ (8006250 <xTaskResumeAll+0x130>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d009      	beq.n	800622a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006216:	2301      	movs	r3, #1
 8006218:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800621a:	4b0f      	ldr	r3, [pc, #60]	@ (8006258 <xTaskResumeAll+0x138>)
 800621c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800622a:	f001 f8ff 	bl	800742c <vPortExitCritical>

	return xAlreadyYielded;
 800622e:	68bb      	ldr	r3, [r7, #8]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	20000ef0 	.word	0x20000ef0
 800623c:	20000ec8 	.word	0x20000ec8
 8006240:	20000e88 	.word	0x20000e88
 8006244:	20000ed0 	.word	0x20000ed0
 8006248:	200009f8 	.word	0x200009f8
 800624c:	200009f4 	.word	0x200009f4
 8006250:	20000edc 	.word	0x20000edc
 8006254:	20000ed8 	.word	0x20000ed8
 8006258:	e000ed04 	.word	0xe000ed04

0800625c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006262:	4b05      	ldr	r3, [pc, #20]	@ (8006278 <xTaskGetTickCount+0x1c>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006268:	687b      	ldr	r3, [r7, #4]
}
 800626a:	4618      	mov	r0, r3
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	20000ecc 	.word	0x20000ecc

0800627c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006282:	2300      	movs	r3, #0
 8006284:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006286:	4b4f      	ldr	r3, [pc, #316]	@ (80063c4 <xTaskIncrementTick+0x148>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	f040 8090 	bne.w	80063b0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006290:	4b4d      	ldr	r3, [pc, #308]	@ (80063c8 <xTaskIncrementTick+0x14c>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3301      	adds	r3, #1
 8006296:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006298:	4a4b      	ldr	r2, [pc, #300]	@ (80063c8 <xTaskIncrementTick+0x14c>)
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d121      	bne.n	80062e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80062a4:	4b49      	ldr	r3, [pc, #292]	@ (80063cc <xTaskIncrementTick+0x150>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00b      	beq.n	80062c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	603b      	str	r3, [r7, #0]
}
 80062c0:	bf00      	nop
 80062c2:	bf00      	nop
 80062c4:	e7fd      	b.n	80062c2 <xTaskIncrementTick+0x46>
 80062c6:	4b41      	ldr	r3, [pc, #260]	@ (80063cc <xTaskIncrementTick+0x150>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	4b40      	ldr	r3, [pc, #256]	@ (80063d0 <xTaskIncrementTick+0x154>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a3e      	ldr	r2, [pc, #248]	@ (80063cc <xTaskIncrementTick+0x150>)
 80062d2:	6013      	str	r3, [r2, #0]
 80062d4:	4a3e      	ldr	r2, [pc, #248]	@ (80063d0 <xTaskIncrementTick+0x154>)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	4b3e      	ldr	r3, [pc, #248]	@ (80063d4 <xTaskIncrementTick+0x158>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	3301      	adds	r3, #1
 80062e0:	4a3c      	ldr	r2, [pc, #240]	@ (80063d4 <xTaskIncrementTick+0x158>)
 80062e2:	6013      	str	r3, [r2, #0]
 80062e4:	f000 fae2 	bl	80068ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80062e8:	4b3b      	ldr	r3, [pc, #236]	@ (80063d8 <xTaskIncrementTick+0x15c>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d349      	bcc.n	8006386 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062f2:	4b36      	ldr	r3, [pc, #216]	@ (80063cc <xTaskIncrementTick+0x150>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d104      	bne.n	8006306 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062fc:	4b36      	ldr	r3, [pc, #216]	@ (80063d8 <xTaskIncrementTick+0x15c>)
 80062fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006302:	601a      	str	r2, [r3, #0]
					break;
 8006304:	e03f      	b.n	8006386 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006306:	4b31      	ldr	r3, [pc, #196]	@ (80063cc <xTaskIncrementTick+0x150>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	429a      	cmp	r2, r3
 800631c:	d203      	bcs.n	8006326 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800631e:	4a2e      	ldr	r2, [pc, #184]	@ (80063d8 <xTaskIncrementTick+0x15c>)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006324:	e02f      	b.n	8006386 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	3304      	adds	r3, #4
 800632a:	4618      	mov	r0, r3
 800632c:	f7fe ff62 	bl	80051f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006334:	2b00      	cmp	r3, #0
 8006336:	d004      	beq.n	8006342 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	3318      	adds	r3, #24
 800633c:	4618      	mov	r0, r3
 800633e:	f7fe ff59 	bl	80051f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006346:	4b25      	ldr	r3, [pc, #148]	@ (80063dc <xTaskIncrementTick+0x160>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	429a      	cmp	r2, r3
 800634c:	d903      	bls.n	8006356 <xTaskIncrementTick+0xda>
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006352:	4a22      	ldr	r2, [pc, #136]	@ (80063dc <xTaskIncrementTick+0x160>)
 8006354:	6013      	str	r3, [r2, #0]
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800635a:	4613      	mov	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4a1f      	ldr	r2, [pc, #124]	@ (80063e0 <xTaskIncrementTick+0x164>)
 8006364:	441a      	add	r2, r3
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	3304      	adds	r3, #4
 800636a:	4619      	mov	r1, r3
 800636c:	4610      	mov	r0, r2
 800636e:	f7fe fee4 	bl	800513a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006376:	4b1b      	ldr	r3, [pc, #108]	@ (80063e4 <xTaskIncrementTick+0x168>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800637c:	429a      	cmp	r2, r3
 800637e:	d3b8      	bcc.n	80062f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006380:	2301      	movs	r3, #1
 8006382:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006384:	e7b5      	b.n	80062f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006386:	4b17      	ldr	r3, [pc, #92]	@ (80063e4 <xTaskIncrementTick+0x168>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800638c:	4914      	ldr	r1, [pc, #80]	@ (80063e0 <xTaskIncrementTick+0x164>)
 800638e:	4613      	mov	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	440b      	add	r3, r1
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d901      	bls.n	80063a2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800639e:	2301      	movs	r3, #1
 80063a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80063a2:	4b11      	ldr	r3, [pc, #68]	@ (80063e8 <xTaskIncrementTick+0x16c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d007      	beq.n	80063ba <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80063aa:	2301      	movs	r3, #1
 80063ac:	617b      	str	r3, [r7, #20]
 80063ae:	e004      	b.n	80063ba <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80063b0:	4b0e      	ldr	r3, [pc, #56]	@ (80063ec <xTaskIncrementTick+0x170>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3301      	adds	r3, #1
 80063b6:	4a0d      	ldr	r2, [pc, #52]	@ (80063ec <xTaskIncrementTick+0x170>)
 80063b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80063ba:	697b      	ldr	r3, [r7, #20]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3718      	adds	r7, #24
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	20000ef0 	.word	0x20000ef0
 80063c8:	20000ecc 	.word	0x20000ecc
 80063cc:	20000e80 	.word	0x20000e80
 80063d0:	20000e84 	.word	0x20000e84
 80063d4:	20000ee0 	.word	0x20000ee0
 80063d8:	20000ee8 	.word	0x20000ee8
 80063dc:	20000ed0 	.word	0x20000ed0
 80063e0:	200009f8 	.word	0x200009f8
 80063e4:	200009f4 	.word	0x200009f4
 80063e8:	20000edc 	.word	0x20000edc
 80063ec:	20000ed8 	.word	0x20000ed8

080063f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063f6:	4b2b      	ldr	r3, [pc, #172]	@ (80064a4 <vTaskSwitchContext+0xb4>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80063fe:	4b2a      	ldr	r3, [pc, #168]	@ (80064a8 <vTaskSwitchContext+0xb8>)
 8006400:	2201      	movs	r2, #1
 8006402:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006404:	e047      	b.n	8006496 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006406:	4b28      	ldr	r3, [pc, #160]	@ (80064a8 <vTaskSwitchContext+0xb8>)
 8006408:	2200      	movs	r2, #0
 800640a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800640c:	4b27      	ldr	r3, [pc, #156]	@ (80064ac <vTaskSwitchContext+0xbc>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	60fb      	str	r3, [r7, #12]
 8006412:	e011      	b.n	8006438 <vTaskSwitchContext+0x48>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10b      	bne.n	8006432 <vTaskSwitchContext+0x42>
	__asm volatile
 800641a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	607b      	str	r3, [r7, #4]
}
 800642c:	bf00      	nop
 800642e:	bf00      	nop
 8006430:	e7fd      	b.n	800642e <vTaskSwitchContext+0x3e>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	3b01      	subs	r3, #1
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	491d      	ldr	r1, [pc, #116]	@ (80064b0 <vTaskSwitchContext+0xc0>)
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	4613      	mov	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	440b      	add	r3, r1
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d0e3      	beq.n	8006414 <vTaskSwitchContext+0x24>
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	4613      	mov	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4a16      	ldr	r2, [pc, #88]	@ (80064b0 <vTaskSwitchContext+0xc0>)
 8006458:	4413      	add	r3, r2
 800645a:	60bb      	str	r3, [r7, #8]
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	605a      	str	r2, [r3, #4]
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	3308      	adds	r3, #8
 800646e:	429a      	cmp	r2, r3
 8006470:	d104      	bne.n	800647c <vTaskSwitchContext+0x8c>
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	685a      	ldr	r2, [r3, #4]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	605a      	str	r2, [r3, #4]
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	4a0c      	ldr	r2, [pc, #48]	@ (80064b4 <vTaskSwitchContext+0xc4>)
 8006484:	6013      	str	r3, [r2, #0]
 8006486:	4a09      	ldr	r2, [pc, #36]	@ (80064ac <vTaskSwitchContext+0xbc>)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800648c:	4b09      	ldr	r3, [pc, #36]	@ (80064b4 <vTaskSwitchContext+0xc4>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3354      	adds	r3, #84	@ 0x54
 8006492:	4a09      	ldr	r2, [pc, #36]	@ (80064b8 <vTaskSwitchContext+0xc8>)
 8006494:	6013      	str	r3, [r2, #0]
}
 8006496:	bf00      	nop
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	20000ef0 	.word	0x20000ef0
 80064a8:	20000edc 	.word	0x20000edc
 80064ac:	20000ed0 	.word	0x20000ed0
 80064b0:	200009f8 	.word	0x200009f8
 80064b4:	200009f4 	.word	0x200009f4
 80064b8:	20000014 	.word	0x20000014

080064bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10b      	bne.n	80064e4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80064cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d0:	f383 8811 	msr	BASEPRI, r3
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	60fb      	str	r3, [r7, #12]
}
 80064de:	bf00      	nop
 80064e0:	bf00      	nop
 80064e2:	e7fd      	b.n	80064e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064e4:	4b07      	ldr	r3, [pc, #28]	@ (8006504 <vTaskPlaceOnEventList+0x48>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3318      	adds	r3, #24
 80064ea:	4619      	mov	r1, r3
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f7fe fe48 	bl	8005182 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80064f2:	2101      	movs	r1, #1
 80064f4:	6838      	ldr	r0, [r7, #0]
 80064f6:	f000 fa87 	bl	8006a08 <prvAddCurrentTaskToDelayedList>
}
 80064fa:	bf00      	nop
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	200009f4 	.word	0x200009f4

08006508 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10b      	bne.n	8006532 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800651a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	617b      	str	r3, [r7, #20]
}
 800652c:	bf00      	nop
 800652e:	bf00      	nop
 8006530:	e7fd      	b.n	800652e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006532:	4b0a      	ldr	r3, [pc, #40]	@ (800655c <vTaskPlaceOnEventListRestricted+0x54>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3318      	adds	r3, #24
 8006538:	4619      	mov	r1, r3
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f7fe fdfd 	bl	800513a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006546:	f04f 33ff 	mov.w	r3, #4294967295
 800654a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800654c:	6879      	ldr	r1, [r7, #4]
 800654e:	68b8      	ldr	r0, [r7, #8]
 8006550:	f000 fa5a 	bl	8006a08 <prvAddCurrentTaskToDelayedList>
	}
 8006554:	bf00      	nop
 8006556:	3718      	adds	r7, #24
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	200009f4 	.word	0x200009f4

08006560 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10b      	bne.n	800658e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800657a:	f383 8811 	msr	BASEPRI, r3
 800657e:	f3bf 8f6f 	isb	sy
 8006582:	f3bf 8f4f 	dsb	sy
 8006586:	60fb      	str	r3, [r7, #12]
}
 8006588:	bf00      	nop
 800658a:	bf00      	nop
 800658c:	e7fd      	b.n	800658a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	3318      	adds	r3, #24
 8006592:	4618      	mov	r0, r3
 8006594:	f7fe fe2e 	bl	80051f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006598:	4b1d      	ldr	r3, [pc, #116]	@ (8006610 <xTaskRemoveFromEventList+0xb0>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d11d      	bne.n	80065dc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	3304      	adds	r3, #4
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7fe fe25 	bl	80051f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ae:	4b19      	ldr	r3, [pc, #100]	@ (8006614 <xTaskRemoveFromEventList+0xb4>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d903      	bls.n	80065be <xTaskRemoveFromEventList+0x5e>
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ba:	4a16      	ldr	r2, [pc, #88]	@ (8006614 <xTaskRemoveFromEventList+0xb4>)
 80065bc:	6013      	str	r3, [r2, #0]
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065c2:	4613      	mov	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	4413      	add	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4a13      	ldr	r2, [pc, #76]	@ (8006618 <xTaskRemoveFromEventList+0xb8>)
 80065cc:	441a      	add	r2, r3
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	3304      	adds	r3, #4
 80065d2:	4619      	mov	r1, r3
 80065d4:	4610      	mov	r0, r2
 80065d6:	f7fe fdb0 	bl	800513a <vListInsertEnd>
 80065da:	e005      	b.n	80065e8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	3318      	adds	r3, #24
 80065e0:	4619      	mov	r1, r3
 80065e2:	480e      	ldr	r0, [pc, #56]	@ (800661c <xTaskRemoveFromEventList+0xbc>)
 80065e4:	f7fe fda9 	bl	800513a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006620 <xTaskRemoveFromEventList+0xc0>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d905      	bls.n	8006602 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80065f6:	2301      	movs	r3, #1
 80065f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80065fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006624 <xTaskRemoveFromEventList+0xc4>)
 80065fc:	2201      	movs	r2, #1
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	e001      	b.n	8006606 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006602:	2300      	movs	r3, #0
 8006604:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006606:	697b      	ldr	r3, [r7, #20]
}
 8006608:	4618      	mov	r0, r3
 800660a:	3718      	adds	r7, #24
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	20000ef0 	.word	0x20000ef0
 8006614:	20000ed0 	.word	0x20000ed0
 8006618:	200009f8 	.word	0x200009f8
 800661c:	20000e88 	.word	0x20000e88
 8006620:	200009f4 	.word	0x200009f4
 8006624:	20000edc 	.word	0x20000edc

08006628 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006630:	4b06      	ldr	r3, [pc, #24]	@ (800664c <vTaskInternalSetTimeOutState+0x24>)
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006638:	4b05      	ldr	r3, [pc, #20]	@ (8006650 <vTaskInternalSetTimeOutState+0x28>)
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	605a      	str	r2, [r3, #4]
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	20000ee0 	.word	0x20000ee0
 8006650:	20000ecc 	.word	0x20000ecc

08006654 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b088      	sub	sp, #32
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10b      	bne.n	800667c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006668:	f383 8811 	msr	BASEPRI, r3
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	613b      	str	r3, [r7, #16]
}
 8006676:	bf00      	nop
 8006678:	bf00      	nop
 800667a:	e7fd      	b.n	8006678 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10b      	bne.n	800669a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	60fb      	str	r3, [r7, #12]
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop
 8006698:	e7fd      	b.n	8006696 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800669a:	f000 fe95 	bl	80073c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800669e:	4b1d      	ldr	r3, [pc, #116]	@ (8006714 <xTaskCheckForTimeOut+0xc0>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	69ba      	ldr	r2, [r7, #24]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b6:	d102      	bne.n	80066be <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80066b8:	2300      	movs	r3, #0
 80066ba:	61fb      	str	r3, [r7, #28]
 80066bc:	e023      	b.n	8006706 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	4b15      	ldr	r3, [pc, #84]	@ (8006718 <xTaskCheckForTimeOut+0xc4>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d007      	beq.n	80066da <xTaskCheckForTimeOut+0x86>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d302      	bcc.n	80066da <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80066d4:	2301      	movs	r3, #1
 80066d6:	61fb      	str	r3, [r7, #28]
 80066d8:	e015      	b.n	8006706 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d20b      	bcs.n	80066fc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	1ad2      	subs	r2, r2, r3
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f7ff ff99 	bl	8006628 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80066f6:	2300      	movs	r3, #0
 80066f8:	61fb      	str	r3, [r7, #28]
 80066fa:	e004      	b.n	8006706 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	2200      	movs	r2, #0
 8006700:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006702:	2301      	movs	r3, #1
 8006704:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006706:	f000 fe91 	bl	800742c <vPortExitCritical>

	return xReturn;
 800670a:	69fb      	ldr	r3, [r7, #28]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3720      	adds	r7, #32
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	20000ecc 	.word	0x20000ecc
 8006718:	20000ee0 	.word	0x20000ee0

0800671c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800671c:	b480      	push	{r7}
 800671e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006720:	4b03      	ldr	r3, [pc, #12]	@ (8006730 <vTaskMissedYield+0x14>)
 8006722:	2201      	movs	r2, #1
 8006724:	601a      	str	r2, [r3, #0]
}
 8006726:	bf00      	nop
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	20000edc 	.word	0x20000edc

08006734 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800673c:	f000 f852 	bl	80067e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006740:	4b06      	ldr	r3, [pc, #24]	@ (800675c <prvIdleTask+0x28>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d9f9      	bls.n	800673c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006748:	4b05      	ldr	r3, [pc, #20]	@ (8006760 <prvIdleTask+0x2c>)
 800674a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800674e:	601a      	str	r2, [r3, #0]
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006758:	e7f0      	b.n	800673c <prvIdleTask+0x8>
 800675a:	bf00      	nop
 800675c:	200009f8 	.word	0x200009f8
 8006760:	e000ed04 	.word	0xe000ed04

08006764 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800676a:	2300      	movs	r3, #0
 800676c:	607b      	str	r3, [r7, #4]
 800676e:	e00c      	b.n	800678a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	4613      	mov	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4a12      	ldr	r2, [pc, #72]	@ (80067c4 <prvInitialiseTaskLists+0x60>)
 800677c:	4413      	add	r3, r2
 800677e:	4618      	mov	r0, r3
 8006780:	f7fe fcae 	bl	80050e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	3301      	adds	r3, #1
 8006788:	607b      	str	r3, [r7, #4]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2b37      	cmp	r3, #55	@ 0x37
 800678e:	d9ef      	bls.n	8006770 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006790:	480d      	ldr	r0, [pc, #52]	@ (80067c8 <prvInitialiseTaskLists+0x64>)
 8006792:	f7fe fca5 	bl	80050e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006796:	480d      	ldr	r0, [pc, #52]	@ (80067cc <prvInitialiseTaskLists+0x68>)
 8006798:	f7fe fca2 	bl	80050e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800679c:	480c      	ldr	r0, [pc, #48]	@ (80067d0 <prvInitialiseTaskLists+0x6c>)
 800679e:	f7fe fc9f 	bl	80050e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80067a2:	480c      	ldr	r0, [pc, #48]	@ (80067d4 <prvInitialiseTaskLists+0x70>)
 80067a4:	f7fe fc9c 	bl	80050e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80067a8:	480b      	ldr	r0, [pc, #44]	@ (80067d8 <prvInitialiseTaskLists+0x74>)
 80067aa:	f7fe fc99 	bl	80050e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80067ae:	4b0b      	ldr	r3, [pc, #44]	@ (80067dc <prvInitialiseTaskLists+0x78>)
 80067b0:	4a05      	ldr	r2, [pc, #20]	@ (80067c8 <prvInitialiseTaskLists+0x64>)
 80067b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80067b4:	4b0a      	ldr	r3, [pc, #40]	@ (80067e0 <prvInitialiseTaskLists+0x7c>)
 80067b6:	4a05      	ldr	r2, [pc, #20]	@ (80067cc <prvInitialiseTaskLists+0x68>)
 80067b8:	601a      	str	r2, [r3, #0]
}
 80067ba:	bf00      	nop
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	200009f8 	.word	0x200009f8
 80067c8:	20000e58 	.word	0x20000e58
 80067cc:	20000e6c 	.word	0x20000e6c
 80067d0:	20000e88 	.word	0x20000e88
 80067d4:	20000e9c 	.word	0x20000e9c
 80067d8:	20000eb4 	.word	0x20000eb4
 80067dc:	20000e80 	.word	0x20000e80
 80067e0:	20000e84 	.word	0x20000e84

080067e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067ea:	e019      	b.n	8006820 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80067ec:	f000 fdec 	bl	80073c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067f0:	4b10      	ldr	r3, [pc, #64]	@ (8006834 <prvCheckTasksWaitingTermination+0x50>)
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	3304      	adds	r3, #4
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7fe fcf9 	bl	80051f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006802:	4b0d      	ldr	r3, [pc, #52]	@ (8006838 <prvCheckTasksWaitingTermination+0x54>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3b01      	subs	r3, #1
 8006808:	4a0b      	ldr	r2, [pc, #44]	@ (8006838 <prvCheckTasksWaitingTermination+0x54>)
 800680a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800680c:	4b0b      	ldr	r3, [pc, #44]	@ (800683c <prvCheckTasksWaitingTermination+0x58>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3b01      	subs	r3, #1
 8006812:	4a0a      	ldr	r2, [pc, #40]	@ (800683c <prvCheckTasksWaitingTermination+0x58>)
 8006814:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006816:	f000 fe09 	bl	800742c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f810 	bl	8006840 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006820:	4b06      	ldr	r3, [pc, #24]	@ (800683c <prvCheckTasksWaitingTermination+0x58>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1e1      	bne.n	80067ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006828:	bf00      	nop
 800682a:	bf00      	nop
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	20000e9c 	.word	0x20000e9c
 8006838:	20000ec8 	.word	0x20000ec8
 800683c:	20000eb0 	.word	0x20000eb0

08006840 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	3354      	adds	r3, #84	@ 0x54
 800684c:	4618      	mov	r0, r3
 800684e:	f001 f8d3 	bl	80079f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006858:	2b00      	cmp	r3, #0
 800685a:	d108      	bne.n	800686e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006860:	4618      	mov	r0, r3
 8006862:	f000 ffa1 	bl	80077a8 <vPortFree>
				vPortFree( pxTCB );
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 ff9e 	bl	80077a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800686c:	e019      	b.n	80068a2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006874:	2b01      	cmp	r3, #1
 8006876:	d103      	bne.n	8006880 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 ff95 	bl	80077a8 <vPortFree>
	}
 800687e:	e010      	b.n	80068a2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006886:	2b02      	cmp	r3, #2
 8006888:	d00b      	beq.n	80068a2 <prvDeleteTCB+0x62>
	__asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	60fb      	str	r3, [r7, #12]
}
 800689c:	bf00      	nop
 800689e:	bf00      	nop
 80068a0:	e7fd      	b.n	800689e <prvDeleteTCB+0x5e>
	}
 80068a2:	bf00      	nop
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
	...

080068ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068b2:	4b0c      	ldr	r3, [pc, #48]	@ (80068e4 <prvResetNextTaskUnblockTime+0x38>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d104      	bne.n	80068c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80068bc:	4b0a      	ldr	r3, [pc, #40]	@ (80068e8 <prvResetNextTaskUnblockTime+0x3c>)
 80068be:	f04f 32ff 	mov.w	r2, #4294967295
 80068c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80068c4:	e008      	b.n	80068d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068c6:	4b07      	ldr	r3, [pc, #28]	@ (80068e4 <prvResetNextTaskUnblockTime+0x38>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	4a04      	ldr	r2, [pc, #16]	@ (80068e8 <prvResetNextTaskUnblockTime+0x3c>)
 80068d6:	6013      	str	r3, [r2, #0]
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	20000e80 	.word	0x20000e80
 80068e8:	20000ee8 	.word	0x20000ee8

080068ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80068f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006920 <xTaskGetSchedulerState+0x34>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d102      	bne.n	8006900 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80068fa:	2301      	movs	r3, #1
 80068fc:	607b      	str	r3, [r7, #4]
 80068fe:	e008      	b.n	8006912 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006900:	4b08      	ldr	r3, [pc, #32]	@ (8006924 <xTaskGetSchedulerState+0x38>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d102      	bne.n	800690e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006908:	2302      	movs	r3, #2
 800690a:	607b      	str	r3, [r7, #4]
 800690c:	e001      	b.n	8006912 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800690e:	2300      	movs	r3, #0
 8006910:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006912:	687b      	ldr	r3, [r7, #4]
	}
 8006914:	4618      	mov	r0, r3
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	20000ed4 	.word	0x20000ed4
 8006924:	20000ef0 	.word	0x20000ef0

08006928 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006934:	2300      	movs	r3, #0
 8006936:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d058      	beq.n	80069f0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800693e:	4b2f      	ldr	r3, [pc, #188]	@ (80069fc <xTaskPriorityDisinherit+0xd4>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	429a      	cmp	r2, r3
 8006946:	d00b      	beq.n	8006960 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800694c:	f383 8811 	msr	BASEPRI, r3
 8006950:	f3bf 8f6f 	isb	sy
 8006954:	f3bf 8f4f 	dsb	sy
 8006958:	60fb      	str	r3, [r7, #12]
}
 800695a:	bf00      	nop
 800695c:	bf00      	nop
 800695e:	e7fd      	b.n	800695c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10b      	bne.n	8006980 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696c:	f383 8811 	msr	BASEPRI, r3
 8006970:	f3bf 8f6f 	isb	sy
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	60bb      	str	r3, [r7, #8]
}
 800697a:	bf00      	nop
 800697c:	bf00      	nop
 800697e:	e7fd      	b.n	800697c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006984:	1e5a      	subs	r2, r3, #1
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006992:	429a      	cmp	r2, r3
 8006994:	d02c      	beq.n	80069f0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800699a:	2b00      	cmp	r3, #0
 800699c:	d128      	bne.n	80069f0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	3304      	adds	r3, #4
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7fe fc26 	bl	80051f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069c0:	4b0f      	ldr	r3, [pc, #60]	@ (8006a00 <xTaskPriorityDisinherit+0xd8>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d903      	bls.n	80069d0 <xTaskPriorityDisinherit+0xa8>
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069cc:	4a0c      	ldr	r2, [pc, #48]	@ (8006a00 <xTaskPriorityDisinherit+0xd8>)
 80069ce:	6013      	str	r3, [r2, #0]
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069d4:	4613      	mov	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4a09      	ldr	r2, [pc, #36]	@ (8006a04 <xTaskPriorityDisinherit+0xdc>)
 80069de:	441a      	add	r2, r3
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	3304      	adds	r3, #4
 80069e4:	4619      	mov	r1, r3
 80069e6:	4610      	mov	r0, r2
 80069e8:	f7fe fba7 	bl	800513a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80069ec:	2301      	movs	r3, #1
 80069ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80069f0:	697b      	ldr	r3, [r7, #20]
	}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3718      	adds	r7, #24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	200009f4 	.word	0x200009f4
 8006a00:	20000ed0 	.word	0x20000ed0
 8006a04:	200009f8 	.word	0x200009f8

08006a08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a12:	4b21      	ldr	r3, [pc, #132]	@ (8006a98 <prvAddCurrentTaskToDelayedList+0x90>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a18:	4b20      	ldr	r3, [pc, #128]	@ (8006a9c <prvAddCurrentTaskToDelayedList+0x94>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	3304      	adds	r3, #4
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fe fbe8 	bl	80051f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2a:	d10a      	bne.n	8006a42 <prvAddCurrentTaskToDelayedList+0x3a>
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d007      	beq.n	8006a42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a32:	4b1a      	ldr	r3, [pc, #104]	@ (8006a9c <prvAddCurrentTaskToDelayedList+0x94>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	3304      	adds	r3, #4
 8006a38:	4619      	mov	r1, r3
 8006a3a:	4819      	ldr	r0, [pc, #100]	@ (8006aa0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006a3c:	f7fe fb7d 	bl	800513a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a40:	e026      	b.n	8006a90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4413      	add	r3, r2
 8006a48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a4a:	4b14      	ldr	r3, [pc, #80]	@ (8006a9c <prvAddCurrentTaskToDelayedList+0x94>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d209      	bcs.n	8006a6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a5a:	4b12      	ldr	r3, [pc, #72]	@ (8006aa4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8006a9c <prvAddCurrentTaskToDelayedList+0x94>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3304      	adds	r3, #4
 8006a64:	4619      	mov	r1, r3
 8006a66:	4610      	mov	r0, r2
 8006a68:	f7fe fb8b 	bl	8005182 <vListInsert>
}
 8006a6c:	e010      	b.n	8006a90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8006aa8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	4b0a      	ldr	r3, [pc, #40]	@ (8006a9c <prvAddCurrentTaskToDelayedList+0x94>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3304      	adds	r3, #4
 8006a78:	4619      	mov	r1, r3
 8006a7a:	4610      	mov	r0, r2
 8006a7c:	f7fe fb81 	bl	8005182 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a80:	4b0a      	ldr	r3, [pc, #40]	@ (8006aac <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d202      	bcs.n	8006a90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006a8a:	4a08      	ldr	r2, [pc, #32]	@ (8006aac <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	6013      	str	r3, [r2, #0]
}
 8006a90:	bf00      	nop
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	20000ecc 	.word	0x20000ecc
 8006a9c:	200009f4 	.word	0x200009f4
 8006aa0:	20000eb4 	.word	0x20000eb4
 8006aa4:	20000e84 	.word	0x20000e84
 8006aa8:	20000e80 	.word	0x20000e80
 8006aac:	20000ee8 	.word	0x20000ee8

08006ab0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b08a      	sub	sp, #40	@ 0x28
 8006ab4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006aba:	f000 fb13 	bl	80070e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006abe:	4b1d      	ldr	r3, [pc, #116]	@ (8006b34 <xTimerCreateTimerTask+0x84>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d021      	beq.n	8006b0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006aca:	2300      	movs	r3, #0
 8006acc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006ace:	1d3a      	adds	r2, r7, #4
 8006ad0:	f107 0108 	add.w	r1, r7, #8
 8006ad4:	f107 030c 	add.w	r3, r7, #12
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fe fae7 	bl	80050ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006ade:	6879      	ldr	r1, [r7, #4]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	9202      	str	r2, [sp, #8]
 8006ae6:	9301      	str	r3, [sp, #4]
 8006ae8:	2302      	movs	r3, #2
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	2300      	movs	r3, #0
 8006aee:	460a      	mov	r2, r1
 8006af0:	4911      	ldr	r1, [pc, #68]	@ (8006b38 <xTimerCreateTimerTask+0x88>)
 8006af2:	4812      	ldr	r0, [pc, #72]	@ (8006b3c <xTimerCreateTimerTask+0x8c>)
 8006af4:	f7ff f8a2 	bl	8005c3c <xTaskCreateStatic>
 8006af8:	4603      	mov	r3, r0
 8006afa:	4a11      	ldr	r2, [pc, #68]	@ (8006b40 <xTimerCreateTimerTask+0x90>)
 8006afc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006afe:	4b10      	ldr	r3, [pc, #64]	@ (8006b40 <xTimerCreateTimerTask+0x90>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006b06:	2301      	movs	r3, #1
 8006b08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10b      	bne.n	8006b28 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b14:	f383 8811 	msr	BASEPRI, r3
 8006b18:	f3bf 8f6f 	isb	sy
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	613b      	str	r3, [r7, #16]
}
 8006b22:	bf00      	nop
 8006b24:	bf00      	nop
 8006b26:	e7fd      	b.n	8006b24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006b28:	697b      	ldr	r3, [r7, #20]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3718      	adds	r7, #24
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	20000f24 	.word	0x20000f24
 8006b38:	08007c08 	.word	0x08007c08
 8006b3c:	08006c7d 	.word	0x08006c7d
 8006b40:	20000f28 	.word	0x20000f28

08006b44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b08a      	sub	sp, #40	@ 0x28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
 8006b50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006b52:	2300      	movs	r3, #0
 8006b54:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10b      	bne.n	8006b74 <xTimerGenericCommand+0x30>
	__asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	623b      	str	r3, [r7, #32]
}
 8006b6e:	bf00      	nop
 8006b70:	bf00      	nop
 8006b72:	e7fd      	b.n	8006b70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006b74:	4b19      	ldr	r3, [pc, #100]	@ (8006bdc <xTimerGenericCommand+0x98>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d02a      	beq.n	8006bd2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	2b05      	cmp	r3, #5
 8006b8c:	dc18      	bgt.n	8006bc0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006b8e:	f7ff fead 	bl	80068ec <xTaskGetSchedulerState>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d109      	bne.n	8006bac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006b98:	4b10      	ldr	r3, [pc, #64]	@ (8006bdc <xTimerGenericCommand+0x98>)
 8006b9a:	6818      	ldr	r0, [r3, #0]
 8006b9c:	f107 0110 	add.w	r1, r7, #16
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ba4:	f7fe fc5a 	bl	800545c <xQueueGenericSend>
 8006ba8:	6278      	str	r0, [r7, #36]	@ 0x24
 8006baa:	e012      	b.n	8006bd2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006bac:	4b0b      	ldr	r3, [pc, #44]	@ (8006bdc <xTimerGenericCommand+0x98>)
 8006bae:	6818      	ldr	r0, [r3, #0]
 8006bb0:	f107 0110 	add.w	r1, r7, #16
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f7fe fc50 	bl	800545c <xQueueGenericSend>
 8006bbc:	6278      	str	r0, [r7, #36]	@ 0x24
 8006bbe:	e008      	b.n	8006bd2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006bc0:	4b06      	ldr	r3, [pc, #24]	@ (8006bdc <xTimerGenericCommand+0x98>)
 8006bc2:	6818      	ldr	r0, [r3, #0]
 8006bc4:	f107 0110 	add.w	r1, r7, #16
 8006bc8:	2300      	movs	r3, #0
 8006bca:	683a      	ldr	r2, [r7, #0]
 8006bcc:	f7fe fd48 	bl	8005660 <xQueueGenericSendFromISR>
 8006bd0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3728      	adds	r7, #40	@ 0x28
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	20000f24 	.word	0x20000f24

08006be0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b088      	sub	sp, #32
 8006be4:	af02      	add	r7, sp, #8
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bea:	4b23      	ldr	r3, [pc, #140]	@ (8006c78 <prvProcessExpiredTimer+0x98>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7fe fafb 	bl	80051f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c04:	f003 0304 	and.w	r3, r3, #4
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d023      	beq.n	8006c54 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	699a      	ldr	r2, [r3, #24]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	18d1      	adds	r1, r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	6978      	ldr	r0, [r7, #20]
 8006c1a:	f000 f8d5 	bl	8006dc8 <prvInsertTimerInActiveList>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d020      	beq.n	8006c66 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c24:	2300      	movs	r3, #0
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	2300      	movs	r3, #0
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	6978      	ldr	r0, [r7, #20]
 8006c30:	f7ff ff88 	bl	8006b44 <xTimerGenericCommand>
 8006c34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d114      	bne.n	8006c66 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c40:	f383 8811 	msr	BASEPRI, r3
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	60fb      	str	r3, [r7, #12]
}
 8006c4e:	bf00      	nop
 8006c50:	bf00      	nop
 8006c52:	e7fd      	b.n	8006c50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c5a:	f023 0301 	bic.w	r3, r3, #1
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	6978      	ldr	r0, [r7, #20]
 8006c6c:	4798      	blx	r3
}
 8006c6e:	bf00      	nop
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20000f1c 	.word	0x20000f1c

08006c7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c84:	f107 0308 	add.w	r3, r7, #8
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f000 f859 	bl	8006d40 <prvGetNextExpireTime>
 8006c8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	4619      	mov	r1, r3
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	f000 f805 	bl	8006ca4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006c9a:	f000 f8d7 	bl	8006e4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c9e:	bf00      	nop
 8006ca0:	e7f0      	b.n	8006c84 <prvTimerTask+0x8>
	...

08006ca4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006cae:	f7ff fa29 	bl	8006104 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006cb2:	f107 0308 	add.w	r3, r7, #8
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 f866 	bl	8006d88 <prvSampleTimeNow>
 8006cbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d130      	bne.n	8006d26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10a      	bne.n	8006ce0 <prvProcessTimerOrBlockTask+0x3c>
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d806      	bhi.n	8006ce0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006cd2:	f7ff fa25 	bl	8006120 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006cd6:	68f9      	ldr	r1, [r7, #12]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f7ff ff81 	bl	8006be0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006cde:	e024      	b.n	8006d2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d008      	beq.n	8006cf8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006ce6:	4b13      	ldr	r3, [pc, #76]	@ (8006d34 <prvProcessTimerOrBlockTask+0x90>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <prvProcessTimerOrBlockTask+0x50>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e000      	b.n	8006cf6 <prvProcessTimerOrBlockTask+0x52>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8006d38 <prvProcessTimerOrBlockTask+0x94>)
 8006cfa:	6818      	ldr	r0, [r3, #0]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	4619      	mov	r1, r3
 8006d06:	f7fe ff65 	bl	8005bd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d0a:	f7ff fa09 	bl	8006120 <xTaskResumeAll>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10a      	bne.n	8006d2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006d14:	4b09      	ldr	r3, [pc, #36]	@ (8006d3c <prvProcessTimerOrBlockTask+0x98>)
 8006d16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d1a:	601a      	str	r2, [r3, #0]
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	f3bf 8f6f 	isb	sy
}
 8006d24:	e001      	b.n	8006d2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006d26:	f7ff f9fb 	bl	8006120 <xTaskResumeAll>
}
 8006d2a:	bf00      	nop
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	20000f20 	.word	0x20000f20
 8006d38:	20000f24 	.word	0x20000f24
 8006d3c:	e000ed04 	.word	0xe000ed04

08006d40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d48:	4b0e      	ldr	r3, [pc, #56]	@ (8006d84 <prvGetNextExpireTime+0x44>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <prvGetNextExpireTime+0x16>
 8006d52:	2201      	movs	r2, #1
 8006d54:	e000      	b.n	8006d58 <prvGetNextExpireTime+0x18>
 8006d56:	2200      	movs	r2, #0
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d105      	bne.n	8006d70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d64:	4b07      	ldr	r3, [pc, #28]	@ (8006d84 <prvGetNextExpireTime+0x44>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	60fb      	str	r3, [r7, #12]
 8006d6e:	e001      	b.n	8006d74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006d70:	2300      	movs	r3, #0
 8006d72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006d74:	68fb      	ldr	r3, [r7, #12]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	20000f1c 	.word	0x20000f1c

08006d88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006d90:	f7ff fa64 	bl	800625c <xTaskGetTickCount>
 8006d94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006d96:	4b0b      	ldr	r3, [pc, #44]	@ (8006dc4 <prvSampleTimeNow+0x3c>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d205      	bcs.n	8006dac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006da0:	f000 f93a 	bl	8007018 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	e002      	b.n	8006db2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006db2:	4a04      	ldr	r2, [pc, #16]	@ (8006dc4 <prvSampleTimeNow+0x3c>)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006db8:	68fb      	ldr	r3, [r7, #12]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	20000f2c 	.word	0x20000f2c

08006dc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
 8006dd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d812      	bhi.n	8006e14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	1ad2      	subs	r2, r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d302      	bcc.n	8006e02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	617b      	str	r3, [r7, #20]
 8006e00:	e01b      	b.n	8006e3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e02:	4b10      	ldr	r3, [pc, #64]	@ (8006e44 <prvInsertTimerInActiveList+0x7c>)
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	3304      	adds	r3, #4
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	f7fe f9b8 	bl	8005182 <vListInsert>
 8006e12:	e012      	b.n	8006e3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d206      	bcs.n	8006e2a <prvInsertTimerInActiveList+0x62>
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d302      	bcc.n	8006e2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006e24:	2301      	movs	r3, #1
 8006e26:	617b      	str	r3, [r7, #20]
 8006e28:	e007      	b.n	8006e3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e2a:	4b07      	ldr	r3, [pc, #28]	@ (8006e48 <prvInsertTimerInActiveList+0x80>)
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	3304      	adds	r3, #4
 8006e32:	4619      	mov	r1, r3
 8006e34:	4610      	mov	r0, r2
 8006e36:	f7fe f9a4 	bl	8005182 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006e3a:	697b      	ldr	r3, [r7, #20]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3718      	adds	r7, #24
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	20000f20 	.word	0x20000f20
 8006e48:	20000f1c 	.word	0x20000f1c

08006e4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b08e      	sub	sp, #56	@ 0x38
 8006e50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e52:	e0ce      	b.n	8006ff2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	da19      	bge.n	8006e8e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006e5a:	1d3b      	adds	r3, r7, #4
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10b      	bne.n	8006e7e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	61fb      	str	r3, [r7, #28]
}
 8006e78:	bf00      	nop
 8006e7a:	bf00      	nop
 8006e7c:	e7fd      	b.n	8006e7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e84:	6850      	ldr	r0, [r2, #4]
 8006e86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e88:	6892      	ldr	r2, [r2, #8]
 8006e8a:	4611      	mov	r1, r2
 8006e8c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f2c0 80ae 	blt.w	8006ff2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d004      	beq.n	8006eac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7fe f9a4 	bl	80051f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006eac:	463b      	mov	r3, r7
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7ff ff6a 	bl	8006d88 <prvSampleTimeNow>
 8006eb4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2b09      	cmp	r3, #9
 8006eba:	f200 8097 	bhi.w	8006fec <prvProcessReceivedCommands+0x1a0>
 8006ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8006ec4 <prvProcessReceivedCommands+0x78>)
 8006ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec4:	08006eed 	.word	0x08006eed
 8006ec8:	08006eed 	.word	0x08006eed
 8006ecc:	08006eed 	.word	0x08006eed
 8006ed0:	08006f63 	.word	0x08006f63
 8006ed4:	08006f77 	.word	0x08006f77
 8006ed8:	08006fc3 	.word	0x08006fc3
 8006edc:	08006eed 	.word	0x08006eed
 8006ee0:	08006eed 	.word	0x08006eed
 8006ee4:	08006f63 	.word	0x08006f63
 8006ee8:	08006f77 	.word	0x08006f77
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ef2:	f043 0301 	orr.w	r3, r3, #1
 8006ef6:	b2da      	uxtb	r2, r3
 8006ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006efa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	18d1      	adds	r1, r2, r3
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f0c:	f7ff ff5c 	bl	8006dc8 <prvInsertTimerInActiveList>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d06c      	beq.n	8006ff0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f24:	f003 0304 	and.w	r3, r3, #4
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d061      	beq.n	8006ff0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	441a      	add	r2, r3
 8006f34:	2300      	movs	r3, #0
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	2300      	movs	r3, #0
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f3e:	f7ff fe01 	bl	8006b44 <xTimerGenericCommand>
 8006f42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d152      	bne.n	8006ff0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	61bb      	str	r3, [r7, #24]
}
 8006f5c:	bf00      	nop
 8006f5e:	bf00      	nop
 8006f60:	e7fd      	b.n	8006f5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f68:	f023 0301 	bic.w	r3, r3, #1
 8006f6c:	b2da      	uxtb	r2, r3
 8006f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006f74:	e03d      	b.n	8006ff2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f7c:	f043 0301 	orr.w	r3, r3, #1
 8006f80:	b2da      	uxtb	r2, r3
 8006f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f8c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10b      	bne.n	8006fae <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f9a:	f383 8811 	msr	BASEPRI, r3
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f3bf 8f4f 	dsb	sy
 8006fa6:	617b      	str	r3, [r7, #20]
}
 8006fa8:	bf00      	nop
 8006faa:	bf00      	nop
 8006fac:	e7fd      	b.n	8006faa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb0:	699a      	ldr	r2, [r3, #24]
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb4:	18d1      	adds	r1, r2, r3
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fbc:	f7ff ff04 	bl	8006dc8 <prvInsertTimerInActiveList>
					break;
 8006fc0:	e017      	b.n	8006ff2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fc8:	f003 0302 	and.w	r3, r3, #2
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d103      	bne.n	8006fd8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006fd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fd2:	f000 fbe9 	bl	80077a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006fd6:	e00c      	b.n	8006ff2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fde:	f023 0301 	bic.w	r3, r3, #1
 8006fe2:	b2da      	uxtb	r2, r3
 8006fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006fea:	e002      	b.n	8006ff2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006fec:	bf00      	nop
 8006fee:	e000      	b.n	8006ff2 <prvProcessReceivedCommands+0x1a6>
					break;
 8006ff0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ff2:	4b08      	ldr	r3, [pc, #32]	@ (8007014 <prvProcessReceivedCommands+0x1c8>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	1d39      	adds	r1, r7, #4
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7fe fbce 	bl	800579c <xQueueReceive>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	f47f af26 	bne.w	8006e54 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007008:	bf00      	nop
 800700a:	bf00      	nop
 800700c:	3730      	adds	r7, #48	@ 0x30
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	20000f24 	.word	0x20000f24

08007018 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b088      	sub	sp, #32
 800701c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800701e:	e049      	b.n	80070b4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007020:	4b2e      	ldr	r3, [pc, #184]	@ (80070dc <prvSwitchTimerLists+0xc4>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800702a:	4b2c      	ldr	r3, [pc, #176]	@ (80070dc <prvSwitchTimerLists+0xc4>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	3304      	adds	r3, #4
 8007038:	4618      	mov	r0, r3
 800703a:	f7fe f8db 	bl	80051f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800704c:	f003 0304 	and.w	r3, r3, #4
 8007050:	2b00      	cmp	r3, #0
 8007052:	d02f      	beq.n	80070b4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	4413      	add	r3, r2
 800705c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	429a      	cmp	r2, r3
 8007064:	d90e      	bls.n	8007084 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007072:	4b1a      	ldr	r3, [pc, #104]	@ (80070dc <prvSwitchTimerLists+0xc4>)
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	3304      	adds	r3, #4
 800707a:	4619      	mov	r1, r3
 800707c:	4610      	mov	r0, r2
 800707e:	f7fe f880 	bl	8005182 <vListInsert>
 8007082:	e017      	b.n	80070b4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007084:	2300      	movs	r3, #0
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	2300      	movs	r3, #0
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	2100      	movs	r1, #0
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f7ff fd58 	bl	8006b44 <xTimerGenericCommand>
 8007094:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d10b      	bne.n	80070b4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800709c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a0:	f383 8811 	msr	BASEPRI, r3
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	603b      	str	r3, [r7, #0]
}
 80070ae:	bf00      	nop
 80070b0:	bf00      	nop
 80070b2:	e7fd      	b.n	80070b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80070b4:	4b09      	ldr	r3, [pc, #36]	@ (80070dc <prvSwitchTimerLists+0xc4>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1b0      	bne.n	8007020 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80070be:	4b07      	ldr	r3, [pc, #28]	@ (80070dc <prvSwitchTimerLists+0xc4>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80070c4:	4b06      	ldr	r3, [pc, #24]	@ (80070e0 <prvSwitchTimerLists+0xc8>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a04      	ldr	r2, [pc, #16]	@ (80070dc <prvSwitchTimerLists+0xc4>)
 80070ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80070cc:	4a04      	ldr	r2, [pc, #16]	@ (80070e0 <prvSwitchTimerLists+0xc8>)
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	6013      	str	r3, [r2, #0]
}
 80070d2:	bf00      	nop
 80070d4:	3718      	adds	r7, #24
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	20000f1c 	.word	0x20000f1c
 80070e0:	20000f20 	.word	0x20000f20

080070e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80070ea:	f000 f96d 	bl	80073c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80070ee:	4b15      	ldr	r3, [pc, #84]	@ (8007144 <prvCheckForValidListAndQueue+0x60>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d120      	bne.n	8007138 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80070f6:	4814      	ldr	r0, [pc, #80]	@ (8007148 <prvCheckForValidListAndQueue+0x64>)
 80070f8:	f7fd fff2 	bl	80050e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80070fc:	4813      	ldr	r0, [pc, #76]	@ (800714c <prvCheckForValidListAndQueue+0x68>)
 80070fe:	f7fd ffef 	bl	80050e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007102:	4b13      	ldr	r3, [pc, #76]	@ (8007150 <prvCheckForValidListAndQueue+0x6c>)
 8007104:	4a10      	ldr	r2, [pc, #64]	@ (8007148 <prvCheckForValidListAndQueue+0x64>)
 8007106:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007108:	4b12      	ldr	r3, [pc, #72]	@ (8007154 <prvCheckForValidListAndQueue+0x70>)
 800710a:	4a10      	ldr	r2, [pc, #64]	@ (800714c <prvCheckForValidListAndQueue+0x68>)
 800710c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800710e:	2300      	movs	r3, #0
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	4b11      	ldr	r3, [pc, #68]	@ (8007158 <prvCheckForValidListAndQueue+0x74>)
 8007114:	4a11      	ldr	r2, [pc, #68]	@ (800715c <prvCheckForValidListAndQueue+0x78>)
 8007116:	2110      	movs	r1, #16
 8007118:	200a      	movs	r0, #10
 800711a:	f7fe f8ff 	bl	800531c <xQueueGenericCreateStatic>
 800711e:	4603      	mov	r3, r0
 8007120:	4a08      	ldr	r2, [pc, #32]	@ (8007144 <prvCheckForValidListAndQueue+0x60>)
 8007122:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007124:	4b07      	ldr	r3, [pc, #28]	@ (8007144 <prvCheckForValidListAndQueue+0x60>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d005      	beq.n	8007138 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800712c:	4b05      	ldr	r3, [pc, #20]	@ (8007144 <prvCheckForValidListAndQueue+0x60>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	490b      	ldr	r1, [pc, #44]	@ (8007160 <prvCheckForValidListAndQueue+0x7c>)
 8007132:	4618      	mov	r0, r3
 8007134:	f7fe fd24 	bl	8005b80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007138:	f000 f978 	bl	800742c <vPortExitCritical>
}
 800713c:	bf00      	nop
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	20000f24 	.word	0x20000f24
 8007148:	20000ef4 	.word	0x20000ef4
 800714c:	20000f08 	.word	0x20000f08
 8007150:	20000f1c 	.word	0x20000f1c
 8007154:	20000f20 	.word	0x20000f20
 8007158:	20000fd0 	.word	0x20000fd0
 800715c:	20000f30 	.word	0x20000f30
 8007160:	08007c10 	.word	0x08007c10

08007164 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	3b04      	subs	r3, #4
 8007174:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800717c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	3b04      	subs	r3, #4
 8007182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	f023 0201 	bic.w	r2, r3, #1
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	3b04      	subs	r3, #4
 8007192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007194:	4a0c      	ldr	r2, [pc, #48]	@ (80071c8 <pxPortInitialiseStack+0x64>)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	3b14      	subs	r3, #20
 800719e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3b04      	subs	r3, #4
 80071aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f06f 0202 	mvn.w	r2, #2
 80071b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	3b20      	subs	r3, #32
 80071b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80071ba:	68fb      	ldr	r3, [r7, #12]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3714      	adds	r7, #20
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr
 80071c8:	080071cd 	.word	0x080071cd

080071cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80071d2:	2300      	movs	r3, #0
 80071d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80071d6:	4b13      	ldr	r3, [pc, #76]	@ (8007224 <prvTaskExitError+0x58>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071de:	d00b      	beq.n	80071f8 <prvTaskExitError+0x2c>
	__asm volatile
 80071e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e4:	f383 8811 	msr	BASEPRI, r3
 80071e8:	f3bf 8f6f 	isb	sy
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	60fb      	str	r3, [r7, #12]
}
 80071f2:	bf00      	nop
 80071f4:	bf00      	nop
 80071f6:	e7fd      	b.n	80071f4 <prvTaskExitError+0x28>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	60bb      	str	r3, [r7, #8]
}
 800720a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800720c:	bf00      	nop
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d0fc      	beq.n	800720e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007214:	bf00      	nop
 8007216:	bf00      	nop
 8007218:	3714      	adds	r7, #20
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	20000010 	.word	0x20000010
	...

08007230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007230:	4b07      	ldr	r3, [pc, #28]	@ (8007250 <pxCurrentTCBConst2>)
 8007232:	6819      	ldr	r1, [r3, #0]
 8007234:	6808      	ldr	r0, [r1, #0]
 8007236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723a:	f380 8809 	msr	PSP, r0
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f04f 0000 	mov.w	r0, #0
 8007246:	f380 8811 	msr	BASEPRI, r0
 800724a:	4770      	bx	lr
 800724c:	f3af 8000 	nop.w

08007250 <pxCurrentTCBConst2>:
 8007250:	200009f4 	.word	0x200009f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007254:	bf00      	nop
 8007256:	bf00      	nop

08007258 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007258:	4808      	ldr	r0, [pc, #32]	@ (800727c <prvPortStartFirstTask+0x24>)
 800725a:	6800      	ldr	r0, [r0, #0]
 800725c:	6800      	ldr	r0, [r0, #0]
 800725e:	f380 8808 	msr	MSP, r0
 8007262:	f04f 0000 	mov.w	r0, #0
 8007266:	f380 8814 	msr	CONTROL, r0
 800726a:	b662      	cpsie	i
 800726c:	b661      	cpsie	f
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	df00      	svc	0
 8007278:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800727a:	bf00      	nop
 800727c:	e000ed08 	.word	0xe000ed08

08007280 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007286:	4b47      	ldr	r3, [pc, #284]	@ (80073a4 <xPortStartScheduler+0x124>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a47      	ldr	r2, [pc, #284]	@ (80073a8 <xPortStartScheduler+0x128>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d10b      	bne.n	80072a8 <xPortStartScheduler+0x28>
	__asm volatile
 8007290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007294:	f383 8811 	msr	BASEPRI, r3
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	613b      	str	r3, [r7, #16]
}
 80072a2:	bf00      	nop
 80072a4:	bf00      	nop
 80072a6:	e7fd      	b.n	80072a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80072a8:	4b3e      	ldr	r3, [pc, #248]	@ (80073a4 <xPortStartScheduler+0x124>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a3f      	ldr	r2, [pc, #252]	@ (80073ac <xPortStartScheduler+0x12c>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d10b      	bne.n	80072ca <xPortStartScheduler+0x4a>
	__asm volatile
 80072b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b6:	f383 8811 	msr	BASEPRI, r3
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	60fb      	str	r3, [r7, #12]
}
 80072c4:	bf00      	nop
 80072c6:	bf00      	nop
 80072c8:	e7fd      	b.n	80072c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80072ca:	4b39      	ldr	r3, [pc, #228]	@ (80073b0 <xPortStartScheduler+0x130>)
 80072cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	22ff      	movs	r2, #255	@ 0xff
 80072da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80072e4:	78fb      	ldrb	r3, [r7, #3]
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80072ec:	b2da      	uxtb	r2, r3
 80072ee:	4b31      	ldr	r3, [pc, #196]	@ (80073b4 <xPortStartScheduler+0x134>)
 80072f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80072f2:	4b31      	ldr	r3, [pc, #196]	@ (80073b8 <xPortStartScheduler+0x138>)
 80072f4:	2207      	movs	r2, #7
 80072f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072f8:	e009      	b.n	800730e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80072fa:	4b2f      	ldr	r3, [pc, #188]	@ (80073b8 <xPortStartScheduler+0x138>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3b01      	subs	r3, #1
 8007300:	4a2d      	ldr	r2, [pc, #180]	@ (80073b8 <xPortStartScheduler+0x138>)
 8007302:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007304:	78fb      	ldrb	r3, [r7, #3]
 8007306:	b2db      	uxtb	r3, r3
 8007308:	005b      	lsls	r3, r3, #1
 800730a:	b2db      	uxtb	r3, r3
 800730c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800730e:	78fb      	ldrb	r3, [r7, #3]
 8007310:	b2db      	uxtb	r3, r3
 8007312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007316:	2b80      	cmp	r3, #128	@ 0x80
 8007318:	d0ef      	beq.n	80072fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800731a:	4b27      	ldr	r3, [pc, #156]	@ (80073b8 <xPortStartScheduler+0x138>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f1c3 0307 	rsb	r3, r3, #7
 8007322:	2b04      	cmp	r3, #4
 8007324:	d00b      	beq.n	800733e <xPortStartScheduler+0xbe>
	__asm volatile
 8007326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	60bb      	str	r3, [r7, #8]
}
 8007338:	bf00      	nop
 800733a:	bf00      	nop
 800733c:	e7fd      	b.n	800733a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800733e:	4b1e      	ldr	r3, [pc, #120]	@ (80073b8 <xPortStartScheduler+0x138>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	021b      	lsls	r3, r3, #8
 8007344:	4a1c      	ldr	r2, [pc, #112]	@ (80073b8 <xPortStartScheduler+0x138>)
 8007346:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007348:	4b1b      	ldr	r3, [pc, #108]	@ (80073b8 <xPortStartScheduler+0x138>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007350:	4a19      	ldr	r2, [pc, #100]	@ (80073b8 <xPortStartScheduler+0x138>)
 8007352:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	b2da      	uxtb	r2, r3
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800735c:	4b17      	ldr	r3, [pc, #92]	@ (80073bc <xPortStartScheduler+0x13c>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a16      	ldr	r2, [pc, #88]	@ (80073bc <xPortStartScheduler+0x13c>)
 8007362:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007366:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007368:	4b14      	ldr	r3, [pc, #80]	@ (80073bc <xPortStartScheduler+0x13c>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a13      	ldr	r2, [pc, #76]	@ (80073bc <xPortStartScheduler+0x13c>)
 800736e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007372:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007374:	f000 f8da 	bl	800752c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007378:	4b11      	ldr	r3, [pc, #68]	@ (80073c0 <xPortStartScheduler+0x140>)
 800737a:	2200      	movs	r2, #0
 800737c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800737e:	f000 f8f9 	bl	8007574 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007382:	4b10      	ldr	r3, [pc, #64]	@ (80073c4 <xPortStartScheduler+0x144>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a0f      	ldr	r2, [pc, #60]	@ (80073c4 <xPortStartScheduler+0x144>)
 8007388:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800738c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800738e:	f7ff ff63 	bl	8007258 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007392:	f7ff f82d 	bl	80063f0 <vTaskSwitchContext>
	prvTaskExitError();
 8007396:	f7ff ff19 	bl	80071cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3718      	adds	r7, #24
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	e000ed00 	.word	0xe000ed00
 80073a8:	410fc271 	.word	0x410fc271
 80073ac:	410fc270 	.word	0x410fc270
 80073b0:	e000e400 	.word	0xe000e400
 80073b4:	20001020 	.word	0x20001020
 80073b8:	20001024 	.word	0x20001024
 80073bc:	e000ed20 	.word	0xe000ed20
 80073c0:	20000010 	.word	0x20000010
 80073c4:	e000ef34 	.word	0xe000ef34

080073c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
	__asm volatile
 80073ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	607b      	str	r3, [r7, #4]
}
 80073e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80073e2:	4b10      	ldr	r3, [pc, #64]	@ (8007424 <vPortEnterCritical+0x5c>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3301      	adds	r3, #1
 80073e8:	4a0e      	ldr	r2, [pc, #56]	@ (8007424 <vPortEnterCritical+0x5c>)
 80073ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80073ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007424 <vPortEnterCritical+0x5c>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d110      	bne.n	8007416 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80073f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007428 <vPortEnterCritical+0x60>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00b      	beq.n	8007416 <vPortEnterCritical+0x4e>
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	603b      	str	r3, [r7, #0]
}
 8007410:	bf00      	nop
 8007412:	bf00      	nop
 8007414:	e7fd      	b.n	8007412 <vPortEnterCritical+0x4a>
	}
}
 8007416:	bf00      	nop
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	20000010 	.word	0x20000010
 8007428:	e000ed04 	.word	0xe000ed04

0800742c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007432:	4b12      	ldr	r3, [pc, #72]	@ (800747c <vPortExitCritical+0x50>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10b      	bne.n	8007452 <vPortExitCritical+0x26>
	__asm volatile
 800743a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800743e:	f383 8811 	msr	BASEPRI, r3
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	f3bf 8f4f 	dsb	sy
 800744a:	607b      	str	r3, [r7, #4]
}
 800744c:	bf00      	nop
 800744e:	bf00      	nop
 8007450:	e7fd      	b.n	800744e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007452:	4b0a      	ldr	r3, [pc, #40]	@ (800747c <vPortExitCritical+0x50>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3b01      	subs	r3, #1
 8007458:	4a08      	ldr	r2, [pc, #32]	@ (800747c <vPortExitCritical+0x50>)
 800745a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800745c:	4b07      	ldr	r3, [pc, #28]	@ (800747c <vPortExitCritical+0x50>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d105      	bne.n	8007470 <vPortExitCritical+0x44>
 8007464:	2300      	movs	r3, #0
 8007466:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	f383 8811 	msr	BASEPRI, r3
}
 800746e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	20000010 	.word	0x20000010

08007480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007480:	f3ef 8009 	mrs	r0, PSP
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	4b15      	ldr	r3, [pc, #84]	@ (80074e0 <pxCurrentTCBConst>)
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	f01e 0f10 	tst.w	lr, #16
 8007490:	bf08      	it	eq
 8007492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800749a:	6010      	str	r0, [r2, #0]
 800749c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80074a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80074a4:	f380 8811 	msr	BASEPRI, r0
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	f3bf 8f6f 	isb	sy
 80074b0:	f7fe ff9e 	bl	80063f0 <vTaskSwitchContext>
 80074b4:	f04f 0000 	mov.w	r0, #0
 80074b8:	f380 8811 	msr	BASEPRI, r0
 80074bc:	bc09      	pop	{r0, r3}
 80074be:	6819      	ldr	r1, [r3, #0]
 80074c0:	6808      	ldr	r0, [r1, #0]
 80074c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c6:	f01e 0f10 	tst.w	lr, #16
 80074ca:	bf08      	it	eq
 80074cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80074d0:	f380 8809 	msr	PSP, r0
 80074d4:	f3bf 8f6f 	isb	sy
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	f3af 8000 	nop.w

080074e0 <pxCurrentTCBConst>:
 80074e0:	200009f4 	.word	0x200009f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80074e4:	bf00      	nop
 80074e6:	bf00      	nop

080074e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
	__asm volatile
 80074ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	607b      	str	r3, [r7, #4]
}
 8007500:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007502:	f7fe febb 	bl	800627c <xTaskIncrementTick>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d003      	beq.n	8007514 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800750c:	4b06      	ldr	r3, [pc, #24]	@ (8007528 <xPortSysTickHandler+0x40>)
 800750e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007512:	601a      	str	r2, [r3, #0]
 8007514:	2300      	movs	r3, #0
 8007516:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	f383 8811 	msr	BASEPRI, r3
}
 800751e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007520:	bf00      	nop
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	e000ed04 	.word	0xe000ed04

0800752c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800752c:	b480      	push	{r7}
 800752e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007530:	4b0b      	ldr	r3, [pc, #44]	@ (8007560 <vPortSetupTimerInterrupt+0x34>)
 8007532:	2200      	movs	r2, #0
 8007534:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007536:	4b0b      	ldr	r3, [pc, #44]	@ (8007564 <vPortSetupTimerInterrupt+0x38>)
 8007538:	2200      	movs	r2, #0
 800753a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800753c:	4b0a      	ldr	r3, [pc, #40]	@ (8007568 <vPortSetupTimerInterrupt+0x3c>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a0a      	ldr	r2, [pc, #40]	@ (800756c <vPortSetupTimerInterrupt+0x40>)
 8007542:	fba2 2303 	umull	r2, r3, r2, r3
 8007546:	099b      	lsrs	r3, r3, #6
 8007548:	4a09      	ldr	r2, [pc, #36]	@ (8007570 <vPortSetupTimerInterrupt+0x44>)
 800754a:	3b01      	subs	r3, #1
 800754c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800754e:	4b04      	ldr	r3, [pc, #16]	@ (8007560 <vPortSetupTimerInterrupt+0x34>)
 8007550:	2207      	movs	r2, #7
 8007552:	601a      	str	r2, [r3, #0]
}
 8007554:	bf00      	nop
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	e000e010 	.word	0xe000e010
 8007564:	e000e018 	.word	0xe000e018
 8007568:	20000004 	.word	0x20000004
 800756c:	10624dd3 	.word	0x10624dd3
 8007570:	e000e014 	.word	0xe000e014

08007574 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007574:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007584 <vPortEnableVFP+0x10>
 8007578:	6801      	ldr	r1, [r0, #0]
 800757a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800757e:	6001      	str	r1, [r0, #0]
 8007580:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007582:	bf00      	nop
 8007584:	e000ed88 	.word	0xe000ed88

08007588 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800758e:	f3ef 8305 	mrs	r3, IPSR
 8007592:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2b0f      	cmp	r3, #15
 8007598:	d915      	bls.n	80075c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800759a:	4a18      	ldr	r2, [pc, #96]	@ (80075fc <vPortValidateInterruptPriority+0x74>)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	4413      	add	r3, r2
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80075a4:	4b16      	ldr	r3, [pc, #88]	@ (8007600 <vPortValidateInterruptPriority+0x78>)
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	7afa      	ldrb	r2, [r7, #11]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d20b      	bcs.n	80075c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	607b      	str	r3, [r7, #4]
}
 80075c0:	bf00      	nop
 80075c2:	bf00      	nop
 80075c4:	e7fd      	b.n	80075c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80075c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007604 <vPortValidateInterruptPriority+0x7c>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80075ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007608 <vPortValidateInterruptPriority+0x80>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d90b      	bls.n	80075ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80075d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075da:	f383 8811 	msr	BASEPRI, r3
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	f3bf 8f4f 	dsb	sy
 80075e6:	603b      	str	r3, [r7, #0]
}
 80075e8:	bf00      	nop
 80075ea:	bf00      	nop
 80075ec:	e7fd      	b.n	80075ea <vPortValidateInterruptPriority+0x62>
	}
 80075ee:	bf00      	nop
 80075f0:	3714      	adds	r7, #20
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	e000e3f0 	.word	0xe000e3f0
 8007600:	20001020 	.word	0x20001020
 8007604:	e000ed0c 	.word	0xe000ed0c
 8007608:	20001024 	.word	0x20001024

0800760c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b08a      	sub	sp, #40	@ 0x28
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007614:	2300      	movs	r3, #0
 8007616:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007618:	f7fe fd74 	bl	8006104 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800761c:	4b5c      	ldr	r3, [pc, #368]	@ (8007790 <pvPortMalloc+0x184>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007624:	f000 f924 	bl	8007870 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007628:	4b5a      	ldr	r3, [pc, #360]	@ (8007794 <pvPortMalloc+0x188>)
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4013      	ands	r3, r2
 8007630:	2b00      	cmp	r3, #0
 8007632:	f040 8095 	bne.w	8007760 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d01e      	beq.n	800767a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800763c:	2208      	movs	r2, #8
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4413      	add	r3, r2
 8007642:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f003 0307 	and.w	r3, r3, #7
 800764a:	2b00      	cmp	r3, #0
 800764c:	d015      	beq.n	800767a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f023 0307 	bic.w	r3, r3, #7
 8007654:	3308      	adds	r3, #8
 8007656:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f003 0307 	and.w	r3, r3, #7
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00b      	beq.n	800767a <pvPortMalloc+0x6e>
	__asm volatile
 8007662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007666:	f383 8811 	msr	BASEPRI, r3
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	617b      	str	r3, [r7, #20]
}
 8007674:	bf00      	nop
 8007676:	bf00      	nop
 8007678:	e7fd      	b.n	8007676 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d06f      	beq.n	8007760 <pvPortMalloc+0x154>
 8007680:	4b45      	ldr	r3, [pc, #276]	@ (8007798 <pvPortMalloc+0x18c>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	429a      	cmp	r2, r3
 8007688:	d86a      	bhi.n	8007760 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800768a:	4b44      	ldr	r3, [pc, #272]	@ (800779c <pvPortMalloc+0x190>)
 800768c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800768e:	4b43      	ldr	r3, [pc, #268]	@ (800779c <pvPortMalloc+0x190>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007694:	e004      	b.n	80076a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007698:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800769a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d903      	bls.n	80076b2 <pvPortMalloc+0xa6>
 80076aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1f1      	bne.n	8007696 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80076b2:	4b37      	ldr	r3, [pc, #220]	@ (8007790 <pvPortMalloc+0x184>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d051      	beq.n	8007760 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2208      	movs	r2, #8
 80076c2:	4413      	add	r3, r2
 80076c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80076c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	6a3b      	ldr	r3, [r7, #32]
 80076cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80076ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d0:	685a      	ldr	r2, [r3, #4]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	1ad2      	subs	r2, r2, r3
 80076d6:	2308      	movs	r3, #8
 80076d8:	005b      	lsls	r3, r3, #1
 80076da:	429a      	cmp	r2, r3
 80076dc:	d920      	bls.n	8007720 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80076de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4413      	add	r3, r2
 80076e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	f003 0307 	and.w	r3, r3, #7
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00b      	beq.n	8007708 <pvPortMalloc+0xfc>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	613b      	str	r3, [r7, #16]
}
 8007702:	bf00      	nop
 8007704:	bf00      	nop
 8007706:	e7fd      	b.n	8007704 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	1ad2      	subs	r2, r2, r3
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800771a:	69b8      	ldr	r0, [r7, #24]
 800771c:	f000 f90a 	bl	8007934 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007720:	4b1d      	ldr	r3, [pc, #116]	@ (8007798 <pvPortMalloc+0x18c>)
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	4a1b      	ldr	r2, [pc, #108]	@ (8007798 <pvPortMalloc+0x18c>)
 800772c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800772e:	4b1a      	ldr	r3, [pc, #104]	@ (8007798 <pvPortMalloc+0x18c>)
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	4b1b      	ldr	r3, [pc, #108]	@ (80077a0 <pvPortMalloc+0x194>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	429a      	cmp	r2, r3
 8007738:	d203      	bcs.n	8007742 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800773a:	4b17      	ldr	r3, [pc, #92]	@ (8007798 <pvPortMalloc+0x18c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a18      	ldr	r2, [pc, #96]	@ (80077a0 <pvPortMalloc+0x194>)
 8007740:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	4b13      	ldr	r3, [pc, #76]	@ (8007794 <pvPortMalloc+0x188>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	431a      	orrs	r2, r3
 800774c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007752:	2200      	movs	r2, #0
 8007754:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007756:	4b13      	ldr	r3, [pc, #76]	@ (80077a4 <pvPortMalloc+0x198>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	3301      	adds	r3, #1
 800775c:	4a11      	ldr	r2, [pc, #68]	@ (80077a4 <pvPortMalloc+0x198>)
 800775e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007760:	f7fe fcde 	bl	8006120 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	f003 0307 	and.w	r3, r3, #7
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00b      	beq.n	8007786 <pvPortMalloc+0x17a>
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	60fb      	str	r3, [r7, #12]
}
 8007780:	bf00      	nop
 8007782:	bf00      	nop
 8007784:	e7fd      	b.n	8007782 <pvPortMalloc+0x176>
	return pvReturn;
 8007786:	69fb      	ldr	r3, [r7, #28]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3728      	adds	r7, #40	@ 0x28
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	20004c30 	.word	0x20004c30
 8007794:	20004c44 	.word	0x20004c44
 8007798:	20004c34 	.word	0x20004c34
 800779c:	20004c28 	.word	0x20004c28
 80077a0:	20004c38 	.word	0x20004c38
 80077a4:	20004c3c 	.word	0x20004c3c

080077a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d04f      	beq.n	800785a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80077ba:	2308      	movs	r3, #8
 80077bc:	425b      	negs	r3, r3
 80077be:	697a      	ldr	r2, [r7, #20]
 80077c0:	4413      	add	r3, r2
 80077c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	685a      	ldr	r2, [r3, #4]
 80077cc:	4b25      	ldr	r3, [pc, #148]	@ (8007864 <vPortFree+0xbc>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4013      	ands	r3, r2
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10b      	bne.n	80077ee <vPortFree+0x46>
	__asm volatile
 80077d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077da:	f383 8811 	msr	BASEPRI, r3
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	60fb      	str	r3, [r7, #12]
}
 80077e8:	bf00      	nop
 80077ea:	bf00      	nop
 80077ec:	e7fd      	b.n	80077ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00b      	beq.n	800780e <vPortFree+0x66>
	__asm volatile
 80077f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077fa:	f383 8811 	msr	BASEPRI, r3
 80077fe:	f3bf 8f6f 	isb	sy
 8007802:	f3bf 8f4f 	dsb	sy
 8007806:	60bb      	str	r3, [r7, #8]
}
 8007808:	bf00      	nop
 800780a:	bf00      	nop
 800780c:	e7fd      	b.n	800780a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	685a      	ldr	r2, [r3, #4]
 8007812:	4b14      	ldr	r3, [pc, #80]	@ (8007864 <vPortFree+0xbc>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4013      	ands	r3, r2
 8007818:	2b00      	cmp	r3, #0
 800781a:	d01e      	beq.n	800785a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d11a      	bne.n	800785a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	4b0e      	ldr	r3, [pc, #56]	@ (8007864 <vPortFree+0xbc>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	43db      	mvns	r3, r3
 800782e:	401a      	ands	r2, r3
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007834:	f7fe fc66 	bl	8006104 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	685a      	ldr	r2, [r3, #4]
 800783c:	4b0a      	ldr	r3, [pc, #40]	@ (8007868 <vPortFree+0xc0>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4413      	add	r3, r2
 8007842:	4a09      	ldr	r2, [pc, #36]	@ (8007868 <vPortFree+0xc0>)
 8007844:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007846:	6938      	ldr	r0, [r7, #16]
 8007848:	f000 f874 	bl	8007934 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800784c:	4b07      	ldr	r3, [pc, #28]	@ (800786c <vPortFree+0xc4>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	3301      	adds	r3, #1
 8007852:	4a06      	ldr	r2, [pc, #24]	@ (800786c <vPortFree+0xc4>)
 8007854:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007856:	f7fe fc63 	bl	8006120 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800785a:	bf00      	nop
 800785c:	3718      	adds	r7, #24
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	20004c44 	.word	0x20004c44
 8007868:	20004c34 	.word	0x20004c34
 800786c:	20004c40 	.word	0x20004c40

08007870 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007876:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800787a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800787c:	4b27      	ldr	r3, [pc, #156]	@ (800791c <prvHeapInit+0xac>)
 800787e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f003 0307 	and.w	r3, r3, #7
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00c      	beq.n	80078a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	3307      	adds	r3, #7
 800788e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f023 0307 	bic.w	r3, r3, #7
 8007896:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	4a1f      	ldr	r2, [pc, #124]	@ (800791c <prvHeapInit+0xac>)
 80078a0:	4413      	add	r3, r2
 80078a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80078a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007920 <prvHeapInit+0xb0>)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80078ae:	4b1c      	ldr	r3, [pc, #112]	@ (8007920 <prvHeapInit+0xb0>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	4413      	add	r3, r2
 80078ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80078bc:	2208      	movs	r2, #8
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	1a9b      	subs	r3, r3, r2
 80078c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f023 0307 	bic.w	r3, r3, #7
 80078ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	4a15      	ldr	r2, [pc, #84]	@ (8007924 <prvHeapInit+0xb4>)
 80078d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80078d2:	4b14      	ldr	r3, [pc, #80]	@ (8007924 <prvHeapInit+0xb4>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2200      	movs	r2, #0
 80078d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80078da:	4b12      	ldr	r3, [pc, #72]	@ (8007924 <prvHeapInit+0xb4>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2200      	movs	r2, #0
 80078e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	1ad2      	subs	r2, r2, r3
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80078f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007924 <prvHeapInit+0xb4>)
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	4a0a      	ldr	r2, [pc, #40]	@ (8007928 <prvHeapInit+0xb8>)
 80078fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	4a09      	ldr	r2, [pc, #36]	@ (800792c <prvHeapInit+0xbc>)
 8007906:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007908:	4b09      	ldr	r3, [pc, #36]	@ (8007930 <prvHeapInit+0xc0>)
 800790a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800790e:	601a      	str	r2, [r3, #0]
}
 8007910:	bf00      	nop
 8007912:	3714      	adds	r7, #20
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	20001028 	.word	0x20001028
 8007920:	20004c28 	.word	0x20004c28
 8007924:	20004c30 	.word	0x20004c30
 8007928:	20004c38 	.word	0x20004c38
 800792c:	20004c34 	.word	0x20004c34
 8007930:	20004c44 	.word	0x20004c44

08007934 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800793c:	4b28      	ldr	r3, [pc, #160]	@ (80079e0 <prvInsertBlockIntoFreeList+0xac>)
 800793e:	60fb      	str	r3, [r7, #12]
 8007940:	e002      	b.n	8007948 <prvInsertBlockIntoFreeList+0x14>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	60fb      	str	r3, [r7, #12]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	429a      	cmp	r2, r3
 8007950:	d8f7      	bhi.n	8007942 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	4413      	add	r3, r2
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	429a      	cmp	r2, r3
 8007962:	d108      	bne.n	8007976 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	685a      	ldr	r2, [r3, #4]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	441a      	add	r2, r3
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	441a      	add	r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	429a      	cmp	r2, r3
 8007988:	d118      	bne.n	80079bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	4b15      	ldr	r3, [pc, #84]	@ (80079e4 <prvInsertBlockIntoFreeList+0xb0>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	429a      	cmp	r2, r3
 8007994:	d00d      	beq.n	80079b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	685a      	ldr	r2, [r3, #4]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	441a      	add	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	601a      	str	r2, [r3, #0]
 80079b0:	e008      	b.n	80079c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80079b2:	4b0c      	ldr	r3, [pc, #48]	@ (80079e4 <prvInsertBlockIntoFreeList+0xb0>)
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	601a      	str	r2, [r3, #0]
 80079ba:	e003      	b.n	80079c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d002      	beq.n	80079d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079d2:	bf00      	nop
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	20004c28 	.word	0x20004c28
 80079e4:	20004c30 	.word	0x20004c30

080079e8 <memset>:
 80079e8:	4402      	add	r2, r0
 80079ea:	4603      	mov	r3, r0
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d100      	bne.n	80079f2 <memset+0xa>
 80079f0:	4770      	bx	lr
 80079f2:	f803 1b01 	strb.w	r1, [r3], #1
 80079f6:	e7f9      	b.n	80079ec <memset+0x4>

080079f8 <_reclaim_reent>:
 80079f8:	4b29      	ldr	r3, [pc, #164]	@ (8007aa0 <_reclaim_reent+0xa8>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4283      	cmp	r3, r0
 80079fe:	b570      	push	{r4, r5, r6, lr}
 8007a00:	4604      	mov	r4, r0
 8007a02:	d04b      	beq.n	8007a9c <_reclaim_reent+0xa4>
 8007a04:	69c3      	ldr	r3, [r0, #28]
 8007a06:	b1ab      	cbz	r3, 8007a34 <_reclaim_reent+0x3c>
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	b16b      	cbz	r3, 8007a28 <_reclaim_reent+0x30>
 8007a0c:	2500      	movs	r5, #0
 8007a0e:	69e3      	ldr	r3, [r4, #28]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	5959      	ldr	r1, [r3, r5]
 8007a14:	2900      	cmp	r1, #0
 8007a16:	d13b      	bne.n	8007a90 <_reclaim_reent+0x98>
 8007a18:	3504      	adds	r5, #4
 8007a1a:	2d80      	cmp	r5, #128	@ 0x80
 8007a1c:	d1f7      	bne.n	8007a0e <_reclaim_reent+0x16>
 8007a1e:	69e3      	ldr	r3, [r4, #28]
 8007a20:	4620      	mov	r0, r4
 8007a22:	68d9      	ldr	r1, [r3, #12]
 8007a24:	f000 f872 	bl	8007b0c <_free_r>
 8007a28:	69e3      	ldr	r3, [r4, #28]
 8007a2a:	6819      	ldr	r1, [r3, #0]
 8007a2c:	b111      	cbz	r1, 8007a34 <_reclaim_reent+0x3c>
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f000 f86c 	bl	8007b0c <_free_r>
 8007a34:	6961      	ldr	r1, [r4, #20]
 8007a36:	b111      	cbz	r1, 8007a3e <_reclaim_reent+0x46>
 8007a38:	4620      	mov	r0, r4
 8007a3a:	f000 f867 	bl	8007b0c <_free_r>
 8007a3e:	69e1      	ldr	r1, [r4, #28]
 8007a40:	b111      	cbz	r1, 8007a48 <_reclaim_reent+0x50>
 8007a42:	4620      	mov	r0, r4
 8007a44:	f000 f862 	bl	8007b0c <_free_r>
 8007a48:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007a4a:	b111      	cbz	r1, 8007a52 <_reclaim_reent+0x5a>
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	f000 f85d 	bl	8007b0c <_free_r>
 8007a52:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a54:	b111      	cbz	r1, 8007a5c <_reclaim_reent+0x64>
 8007a56:	4620      	mov	r0, r4
 8007a58:	f000 f858 	bl	8007b0c <_free_r>
 8007a5c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007a5e:	b111      	cbz	r1, 8007a66 <_reclaim_reent+0x6e>
 8007a60:	4620      	mov	r0, r4
 8007a62:	f000 f853 	bl	8007b0c <_free_r>
 8007a66:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007a68:	b111      	cbz	r1, 8007a70 <_reclaim_reent+0x78>
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	f000 f84e 	bl	8007b0c <_free_r>
 8007a70:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007a72:	b111      	cbz	r1, 8007a7a <_reclaim_reent+0x82>
 8007a74:	4620      	mov	r0, r4
 8007a76:	f000 f849 	bl	8007b0c <_free_r>
 8007a7a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007a7c:	b111      	cbz	r1, 8007a84 <_reclaim_reent+0x8c>
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f000 f844 	bl	8007b0c <_free_r>
 8007a84:	6a23      	ldr	r3, [r4, #32]
 8007a86:	b14b      	cbz	r3, 8007a9c <_reclaim_reent+0xa4>
 8007a88:	4620      	mov	r0, r4
 8007a8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007a8e:	4718      	bx	r3
 8007a90:	680e      	ldr	r6, [r1, #0]
 8007a92:	4620      	mov	r0, r4
 8007a94:	f000 f83a 	bl	8007b0c <_free_r>
 8007a98:	4631      	mov	r1, r6
 8007a9a:	e7bb      	b.n	8007a14 <_reclaim_reent+0x1c>
 8007a9c:	bd70      	pop	{r4, r5, r6, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20000014 	.word	0x20000014

08007aa4 <__libc_init_array>:
 8007aa4:	b570      	push	{r4, r5, r6, lr}
 8007aa6:	4d0d      	ldr	r5, [pc, #52]	@ (8007adc <__libc_init_array+0x38>)
 8007aa8:	4c0d      	ldr	r4, [pc, #52]	@ (8007ae0 <__libc_init_array+0x3c>)
 8007aaa:	1b64      	subs	r4, r4, r5
 8007aac:	10a4      	asrs	r4, r4, #2
 8007aae:	2600      	movs	r6, #0
 8007ab0:	42a6      	cmp	r6, r4
 8007ab2:	d109      	bne.n	8007ac8 <__libc_init_array+0x24>
 8007ab4:	4d0b      	ldr	r5, [pc, #44]	@ (8007ae4 <__libc_init_array+0x40>)
 8007ab6:	4c0c      	ldr	r4, [pc, #48]	@ (8007ae8 <__libc_init_array+0x44>)
 8007ab8:	f000 f87e 	bl	8007bb8 <_init>
 8007abc:	1b64      	subs	r4, r4, r5
 8007abe:	10a4      	asrs	r4, r4, #2
 8007ac0:	2600      	movs	r6, #0
 8007ac2:	42a6      	cmp	r6, r4
 8007ac4:	d105      	bne.n	8007ad2 <__libc_init_array+0x2e>
 8007ac6:	bd70      	pop	{r4, r5, r6, pc}
 8007ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007acc:	4798      	blx	r3
 8007ace:	3601      	adds	r6, #1
 8007ad0:	e7ee      	b.n	8007ab0 <__libc_init_array+0xc>
 8007ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad6:	4798      	blx	r3
 8007ad8:	3601      	adds	r6, #1
 8007ada:	e7f2      	b.n	8007ac2 <__libc_init_array+0x1e>
 8007adc:	08007cc8 	.word	0x08007cc8
 8007ae0:	08007cc8 	.word	0x08007cc8
 8007ae4:	08007cc8 	.word	0x08007cc8
 8007ae8:	08007ccc 	.word	0x08007ccc

08007aec <__retarget_lock_acquire_recursive>:
 8007aec:	4770      	bx	lr

08007aee <__retarget_lock_release_recursive>:
 8007aee:	4770      	bx	lr

08007af0 <memcpy>:
 8007af0:	440a      	add	r2, r1
 8007af2:	4291      	cmp	r1, r2
 8007af4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007af8:	d100      	bne.n	8007afc <memcpy+0xc>
 8007afa:	4770      	bx	lr
 8007afc:	b510      	push	{r4, lr}
 8007afe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b06:	4291      	cmp	r1, r2
 8007b08:	d1f9      	bne.n	8007afe <memcpy+0xe>
 8007b0a:	bd10      	pop	{r4, pc}

08007b0c <_free_r>:
 8007b0c:	b538      	push	{r3, r4, r5, lr}
 8007b0e:	4605      	mov	r5, r0
 8007b10:	2900      	cmp	r1, #0
 8007b12:	d041      	beq.n	8007b98 <_free_r+0x8c>
 8007b14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b18:	1f0c      	subs	r4, r1, #4
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	bfb8      	it	lt
 8007b1e:	18e4      	addlt	r4, r4, r3
 8007b20:	f000 f83e 	bl	8007ba0 <__malloc_lock>
 8007b24:	4a1d      	ldr	r2, [pc, #116]	@ (8007b9c <_free_r+0x90>)
 8007b26:	6813      	ldr	r3, [r2, #0]
 8007b28:	b933      	cbnz	r3, 8007b38 <_free_r+0x2c>
 8007b2a:	6063      	str	r3, [r4, #4]
 8007b2c:	6014      	str	r4, [r2, #0]
 8007b2e:	4628      	mov	r0, r5
 8007b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b34:	f000 b83a 	b.w	8007bac <__malloc_unlock>
 8007b38:	42a3      	cmp	r3, r4
 8007b3a:	d908      	bls.n	8007b4e <_free_r+0x42>
 8007b3c:	6820      	ldr	r0, [r4, #0]
 8007b3e:	1821      	adds	r1, r4, r0
 8007b40:	428b      	cmp	r3, r1
 8007b42:	bf01      	itttt	eq
 8007b44:	6819      	ldreq	r1, [r3, #0]
 8007b46:	685b      	ldreq	r3, [r3, #4]
 8007b48:	1809      	addeq	r1, r1, r0
 8007b4a:	6021      	streq	r1, [r4, #0]
 8007b4c:	e7ed      	b.n	8007b2a <_free_r+0x1e>
 8007b4e:	461a      	mov	r2, r3
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	b10b      	cbz	r3, 8007b58 <_free_r+0x4c>
 8007b54:	42a3      	cmp	r3, r4
 8007b56:	d9fa      	bls.n	8007b4e <_free_r+0x42>
 8007b58:	6811      	ldr	r1, [r2, #0]
 8007b5a:	1850      	adds	r0, r2, r1
 8007b5c:	42a0      	cmp	r0, r4
 8007b5e:	d10b      	bne.n	8007b78 <_free_r+0x6c>
 8007b60:	6820      	ldr	r0, [r4, #0]
 8007b62:	4401      	add	r1, r0
 8007b64:	1850      	adds	r0, r2, r1
 8007b66:	4283      	cmp	r3, r0
 8007b68:	6011      	str	r1, [r2, #0]
 8007b6a:	d1e0      	bne.n	8007b2e <_free_r+0x22>
 8007b6c:	6818      	ldr	r0, [r3, #0]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	6053      	str	r3, [r2, #4]
 8007b72:	4408      	add	r0, r1
 8007b74:	6010      	str	r0, [r2, #0]
 8007b76:	e7da      	b.n	8007b2e <_free_r+0x22>
 8007b78:	d902      	bls.n	8007b80 <_free_r+0x74>
 8007b7a:	230c      	movs	r3, #12
 8007b7c:	602b      	str	r3, [r5, #0]
 8007b7e:	e7d6      	b.n	8007b2e <_free_r+0x22>
 8007b80:	6820      	ldr	r0, [r4, #0]
 8007b82:	1821      	adds	r1, r4, r0
 8007b84:	428b      	cmp	r3, r1
 8007b86:	bf04      	itt	eq
 8007b88:	6819      	ldreq	r1, [r3, #0]
 8007b8a:	685b      	ldreq	r3, [r3, #4]
 8007b8c:	6063      	str	r3, [r4, #4]
 8007b8e:	bf04      	itt	eq
 8007b90:	1809      	addeq	r1, r1, r0
 8007b92:	6021      	streq	r1, [r4, #0]
 8007b94:	6054      	str	r4, [r2, #4]
 8007b96:	e7ca      	b.n	8007b2e <_free_r+0x22>
 8007b98:	bd38      	pop	{r3, r4, r5, pc}
 8007b9a:	bf00      	nop
 8007b9c:	20004d84 	.word	0x20004d84

08007ba0 <__malloc_lock>:
 8007ba0:	4801      	ldr	r0, [pc, #4]	@ (8007ba8 <__malloc_lock+0x8>)
 8007ba2:	f7ff bfa3 	b.w	8007aec <__retarget_lock_acquire_recursive>
 8007ba6:	bf00      	nop
 8007ba8:	20004d80 	.word	0x20004d80

08007bac <__malloc_unlock>:
 8007bac:	4801      	ldr	r0, [pc, #4]	@ (8007bb4 <__malloc_unlock+0x8>)
 8007bae:	f7ff bf9e 	b.w	8007aee <__retarget_lock_release_recursive>
 8007bb2:	bf00      	nop
 8007bb4:	20004d80 	.word	0x20004d80

08007bb8 <_init>:
 8007bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bba:	bf00      	nop
 8007bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bbe:	bc08      	pop	{r3}
 8007bc0:	469e      	mov	lr, r3
 8007bc2:	4770      	bx	lr

08007bc4 <_fini>:
 8007bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc6:	bf00      	nop
 8007bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bca:	bc08      	pop	{r3}
 8007bcc:	469e      	mov	lr, r3
 8007bce:	4770      	bx	lr
